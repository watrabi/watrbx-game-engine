//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once
#include <wmistr.h>
#include <evntrace.h>
#include "evntprov.h"
//
//  Initial Defs
//
#if !defined(ETW_INLINE)
#define ETW_INLINE DECLSPEC_NOINLINE __inline
#endif

#if defined(__cplusplus)
extern "C" {
#endif

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION
#if  !defined(McGenDebug)
#define McGenDebug(a,b)
#endif 


#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level; 
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;

}
#endif

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{

    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);

}
#endif


//
// EnableCheckMacro
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled &&  McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Vista.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider. 

    ControlCode - The parameter indicates whether the provider 
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to 
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category 
                      of events that the provider writes. 

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider 
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;
 
        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif
   
    return;
}

#endif
#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION
//+
// Provider Xbox GameChat API Event Count 26
//+
EXTERN_C __declspec(selectany) const GUID XboxGameChatEventsProvider = {0x2ab79849, 0x74d6, 0x497e, {0xa1, 0x29, 0x73, 0x8f, 0xea, 0x40, 0x52, 0x07}};

//
// Channel
//
#define XboxGameChatEventsProvider_CHANNEL_Debug 0x10

//
// Tasks
//
#define XboxGameChatEventsProvider_TASK_ChatManagerSettingsAudioThread 0x44d
#define XboxGameChatEventsProvider_TASK_ChatManagerSettingsAudioEncodingQuality 0x44e
#define XboxGameChatEventsProvider_TASK_ChatManagerSettingsJitterBuffer 0x44f
#define XboxGameChatEventsProvider_TASK_ChatManagerSettingsMisc 0x450
#define XboxGameChatEventsProvider_TASK_ChatManagerSettingsEffects 0x451
#define XboxGameChatEventsProvider_TASK_ChatHandleNewRemoteConsole 0x4b1
#define XboxGameChatEventsProvider_TASK_ChatRemoveRemoteConsole 0x4b2
#define XboxGameChatEventsProvider_TASK_ChatAddLocalUserToChatChannel 0x4b3
#define XboxGameChatEventsProvider_TASK_ChatRemoveLocalUserFromChatChannel 0x4b4
#define XboxGameChatEventsProvider_TASK_ChatMuteUserFromAllChannels 0x4bd
#define XboxGameChatEventsProvider_TASK_ChatUnmuteUserFromAllChannels 0x4be
#define XboxGameChatEventsProvider_TASK_ChatMuteAllUsersFromAllChannels 0x4bf
#define XboxGameChatEventsProvider_TASK_ChatUnmuteAllUsersFromAllChannels 0x4c0
#define XboxGameChatEventsProvider_TASK_ChatUserInfo 0x4c1
#define XboxGameChatEventsProvider_TASK_ChatUserAudioDevice 0x4c2
#define XboxGameChatEventsProvider_TASK_ChatMicFocus 0x4c3
#define XboxGameChatEventsProvider_TASK_ChatLocalCaptureSource 0x4c4
#define XboxGameChatEventsProvider_TASK_ChatRemoteCaptureSource 0x4c5
#define XboxGameChatEventsProvider_TASK_ChatCorrelateAudioDeviceToUser 0x4c6
#define XboxGameChatEventsProvider_TASK_ChatIncomingChatVoiceDataPacket 0x515
#define XboxGameChatEventsProvider_TASK_ChatIncomingChatUserAddedPacket 0x516
#define XboxGameChatEventsProvider_TASK_ChatIncomingChatUserRemovedPacket 0x517
#define XboxGameChatEventsProvider_TASK_ChatIncomingChatInvalidPacket 0x518
#define XboxGameChatEventsProvider_TASK_ChatOutgoingChatVoiceDataPacket 0x579
#define XboxGameChatEventsProvider_TASK_ChatOutgoingChatUserAddedPacket 0x57a
#define XboxGameChatEventsProvider_TASK_ChatOutgoingChatUserRemovedPacket 0x57b

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatManagerSettingsAudioThread = {0x44d, 0x0, 0x10, 0x4, 0x0, 0x44d, 0x8000000000000000};
#define ChatManagerSettingsAudioThread_value 0x44d
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatManagerSettingsAudioEncodingQuality = {0x44e, 0x0, 0x10, 0x4, 0x0, 0x44e, 0x8000000000000000};
#define ChatManagerSettingsAudioEncodingQuality_value 0x44e
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatManagerSettingsJitterBuffer = {0x44f, 0x0, 0x10, 0x4, 0x0, 0x44f, 0x8000000000000000};
#define ChatManagerSettingsJitterBuffer_value 0x44f
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatManagerSettingsMisc = {0x450, 0x0, 0x10, 0x4, 0x0, 0x450, 0x8000000000000000};
#define ChatManagerSettingsMisc_value 0x450
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatManagerSettingsEffects = {0x451, 0x0, 0x10, 0x4, 0x0, 0x451, 0x8000000000000000};
#define ChatManagerSettingsEffects_value 0x451
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatHandleNewRemoteConsole = {0x4b1, 0x0, 0x10, 0x4, 0x0, 0x4b1, 0x8000000000000000};
#define ChatHandleNewRemoteConsole_value 0x4b1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatRemoveRemoteConsole = {0x4b2, 0x0, 0x10, 0x4, 0x0, 0x4b2, 0x8000000000000000};
#define ChatRemoveRemoteConsole_value 0x4b2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatAddLocalUserToChatChannel = {0x4b3, 0x0, 0x10, 0x4, 0x0, 0x4b3, 0x8000000000000000};
#define ChatAddLocalUserToChatChannel_value 0x4b3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatRemoveLocalUserFromChatChannel = {0x4b4, 0x0, 0x10, 0x4, 0x0, 0x4b4, 0x8000000000000000};
#define ChatRemoveLocalUserFromChatChannel_value 0x4b4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatMuteUserFromAllChannels = {0x4b7, 0x0, 0x10, 0x4, 0x0, 0x4bd, 0x8000000000000000};
#define ChatMuteUserFromAllChannels_value 0x4b7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatUnmuteUserFromAllChannels = {0x4b8, 0x0, 0x10, 0x4, 0x0, 0x4be, 0x8000000000000000};
#define ChatUnmuteUserFromAllChannels_value 0x4b8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatMuteAllUsersFromAllChannels = {0x4b9, 0x0, 0x10, 0x4, 0x0, 0x4bf, 0x8000000000000000};
#define ChatMuteAllUsersFromAllChannels_value 0x4b9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatUnmuteAllUsersFromAllChannels = {0x4ba, 0x0, 0x10, 0x4, 0x0, 0x4c0, 0x8000000000000000};
#define ChatUnmuteAllUsersFromAllChannels_value 0x4ba
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatUserInfo = {0x4bb, 0x0, 0x10, 0x4, 0x0, 0x4c1, 0x8000000000000000};
#define ChatUserInfo_value 0x4bb
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatUserAudioDevice = {0x4bc, 0x0, 0x10, 0x4, 0x0, 0x4c2, 0x8000000000000000};
#define ChatUserAudioDevice_value 0x4bc
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatMicFocus = {0x4bd, 0x0, 0x10, 0x4, 0x0, 0x4c3, 0x8000000000000000};
#define ChatMicFocus_value 0x4bd
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatLocalCaptureSource = {0x4be, 0x0, 0x10, 0x4, 0x0, 0x4c4, 0x8000000000000000};
#define ChatLocalCaptureSource_value 0x4be
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatRemoteCaptureSource = {0x4bf, 0x0, 0x10, 0x4, 0x0, 0x4c5, 0x8000000000000000};
#define ChatRemoteCaptureSource_value 0x4bf
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatCorrelateAudioDeviceToUser = {0x4c0, 0x0, 0x10, 0x4, 0x0, 0x4c6, 0x8000000000000000};
#define ChatCorrelateAudioDeviceToUser_value 0x4c0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatIncomingChatVoiceDataPacket = {0x515, 0x0, 0x10, 0x5, 0x0, 0x515, 0x8000000000000000};
#define ChatIncomingChatVoiceDataPacket_value 0x515
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatIncomingChatUserAddedPacket = {0x516, 0x0, 0x10, 0x4, 0x0, 0x516, 0x8000000000000000};
#define ChatIncomingChatUserAddedPacket_value 0x516
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatIncomingChatUserRemovedPacket = {0x517, 0x0, 0x10, 0x4, 0x0, 0x517, 0x8000000000000000};
#define ChatIncomingChatUserRemovedPacket_value 0x517
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatIncomingChatInvalidPacket = {0x518, 0x0, 0x10, 0x2, 0x0, 0x518, 0x8000000000000000};
#define ChatIncomingChatInvalidPacket_value 0x518
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatOutgoingChatVoiceDataPacket = {0x579, 0x0, 0x10, 0x5, 0x0, 0x579, 0x8000000000000000};
#define ChatOutgoingChatVoiceDataPacket_value 0x579
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatOutgoingChatUserAddedPacket = {0x57a, 0x0, 0x10, 0x4, 0x0, 0x57a, 0x8000000000000000};
#define ChatOutgoingChatUserAddedPacket_value 0x57a
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR ChatOutgoingChatUserRemovedPacket = {0x57b, 0x0, 0x10, 0x4, 0x0, 0x57b, 0x8000000000000000};
#define ChatOutgoingChatUserRemovedPacket_value 0x57b

//
// Note on Generate Code from Manifest Windows Vista and above
//
//Structures :  are handled as a size and pointer pairs. The macro for the event will have an extra 
//parameter for the size in bytes of the structure. Make sure that your structures have no extra padding.
//
//Strings: There are several cases that can be described in the manifest. For array of variable length 
//strings, the generated code will take the count of characters for the whole array as an input parameter. 
//
//SID No support for array of SIDs, the macro will take a pointer to the SID and use appropriate 
//GetLengthSid function to get the length.
//

//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Globals 
//


//
// Event Enablement Bits
//

EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG Xbox_GameChat_APIEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG Xbox_GameChat_APIKeywords[3] = {0x8000000000000000, 0x8000000000000000, 0x8000000000000000};
EXTERN_C __declspec(selectany) const UCHAR Xbox_GameChat_APILevels[3] = {4, 5, 2};
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT XboxGameChatEventsProvider_Context = {0, 0, 0, 0, 0, 0, 0, 0, 3, Xbox_GameChat_APIEnableBits, Xbox_GameChat_APIKeywords, Xbox_GameChat_APILevels};

EXTERN_C __declspec(selectany) REGHANDLE Xbox_GameChat_APIHandle = (REGHANDLE)0;

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function register the provider with ETW USER mode.

Arguments:
    ProviderId - Provider Id to be register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for this provider.

    RegHandle - Pointer to Registration handle.

Remarks:

    If the handle != NULL will return ERROR_SUCCESS

--*/
{
    ULONG Error;


    if (*RegHandle) {
        //
        // already registered
        //
        return ERROR_SUCCESS;
    }

    Error = EventRegister( ProviderId, EnableCallback, CallbackContext, RegHandle); 

    return Error;
}


DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW USER mode

Arguments:
            RegHandle this is the pointer to the provider context
Remarks:
            If Provider has not register RegHandle = NULL,
            return ERROR_SUCCESS
--*/
{
    ULONG Error;


    if(!(*RegHandle)) {
        //
        // Provider has not registerd
        //
        return ERROR_SUCCESS;
    }

    Error = EventUnregister(*RegHandle); 
    *RegHandle = (REGHANDLE)0;
    
    return Error;
}
#endif
//
// Register with ETW Vista +
//
#ifndef EventRegisterXbox_GameChat_API
#define EventRegisterXbox_GameChat_API() McGenEventRegister(&XboxGameChatEventsProvider, McGenControlCallbackV2, &XboxGameChatEventsProvider_Context, &Xbox_GameChat_APIHandle) 
#endif

//
// UnRegister with ETW
//
#ifndef EventUnregisterXbox_GameChat_API
#define EventUnregisterXbox_GameChat_API() McGenEventUnregister(&Xbox_GameChat_APIHandle) 
#endif

//
// Enablement check macro for ChatManagerSettingsAudioThread
//

#define EventEnabledChatManagerSettingsAudioThread() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatManagerSettingsAudioThread
//
#define TraceChatManagerSettingsAudioThread(AudioThreadPeriodInMilliseconds, AudioThreadAffinityMask, AudioThreadPriority)\
        EventEnabledChatManagerSettingsAudioThread() ?\
        Template_qqd(Xbox_GameChat_APIHandle, &ChatManagerSettingsAudioThread, AudioThreadPeriodInMilliseconds, AudioThreadAffinityMask, AudioThreadPriority)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatManagerSettingsAudioEncodingQuality
//

#define EventEnabledChatManagerSettingsAudioEncodingQuality() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatManagerSettingsAudioEncodingQuality
//
#define TraceChatManagerSettingsAudioEncodingQuality(AudioEncodingQuality)\
        EventEnabledChatManagerSettingsAudioEncodingQuality() ?\
        Template_q(Xbox_GameChat_APIHandle, &ChatManagerSettingsAudioEncodingQuality, AudioEncodingQuality)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatManagerSettingsJitterBuffer
//

#define EventEnabledChatManagerSettingsJitterBuffer() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatManagerSettingsJitterBuffer
//
#define TraceChatManagerSettingsJitterBuffer(JitterBufferMaxPackets, JitterBufferLowestNeededPacketCount, JitterBufferPacketsBeforeRelaxingNeeded)\
        EventEnabledChatManagerSettingsJitterBuffer() ?\
        Template_qqq(Xbox_GameChat_APIHandle, &ChatManagerSettingsJitterBuffer, JitterBufferMaxPackets, JitterBufferLowestNeededPacketCount, JitterBufferPacketsBeforeRelaxingNeeded)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatManagerSettingsMisc
//

#define EventEnabledChatManagerSettingsMisc() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatManagerSettingsMisc
//
#define TraceChatManagerSettingsMisc(PerformanceCountersEnabled, CombineCaptureBuffersIntoSinglePacket, UseKinectAsCaptureSource, DiagnosticsTraceLevel_)\
        EventEnabledChatManagerSettingsMisc() ?\
        Template_tttq(Xbox_GameChat_APIHandle, &ChatManagerSettingsMisc, PerformanceCountersEnabled, CombineCaptureBuffersIntoSinglePacket, UseKinectAsCaptureSource, DiagnosticsTraceLevel_)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatManagerSettingsEffects
//

#define EventEnabledChatManagerSettingsEffects() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatManagerSettingsEffects
//
#define TraceChatManagerSettingsEffects(PreEncodeCallbackEnabled, PostDecodeCallbackEnabled)\
        EventEnabledChatManagerSettingsEffects() ?\
        Template_tt(Xbox_GameChat_APIHandle, &ChatManagerSettingsEffects, PreEncodeCallbackEnabled, PostDecodeCallbackEnabled)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatHandleNewRemoteConsole
//

#define EventEnabledChatHandleNewRemoteConsole() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatHandleNewRemoteConsole
//
#define TraceChatHandleNewRemoteConsole(DiagnosticConsoleId)\
        EventEnabledChatHandleNewRemoteConsole() ?\
        Template_q(Xbox_GameChat_APIHandle, &ChatHandleNewRemoteConsole, DiagnosticConsoleId)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatRemoveRemoteConsole
//

#define EventEnabledChatRemoveRemoteConsole() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatRemoveRemoteConsole
//
#define TraceChatRemoveRemoteConsole(DiagnosticConsoleId)\
        EventEnabledChatRemoveRemoteConsole() ?\
        Template_q(Xbox_GameChat_APIHandle, &ChatRemoveRemoteConsole, DiagnosticConsoleId)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatAddLocalUserToChatChannel
//

#define EventEnabledChatAddLocalUserToChatChannel() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatAddLocalUserToChatChannel
//
#define TraceChatAddLocalUserToChatChannel(XboxUserId, ChannelIndex)\
        EventEnabledChatAddLocalUserToChatChannel() ?\
        Template_zq(Xbox_GameChat_APIHandle, &ChatAddLocalUserToChatChannel, XboxUserId, ChannelIndex)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatRemoveLocalUserFromChatChannel
//

#define EventEnabledChatRemoveLocalUserFromChatChannel() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatRemoveLocalUserFromChatChannel
//
#define TraceChatRemoveLocalUserFromChatChannel(XboxUserId, ChannelIndex)\
        EventEnabledChatRemoveLocalUserFromChatChannel() ?\
        Template_zq(Xbox_GameChat_APIHandle, &ChatRemoveLocalUserFromChatChannel, XboxUserId, ChannelIndex)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatMuteUserFromAllChannels
//

#define EventEnabledChatMuteUserFromAllChannels() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatMuteUserFromAllChannels
//
#define TraceChatMuteUserFromAllChannels(xboxUserId)\
        EventEnabledChatMuteUserFromAllChannels() ?\
        Template_z(Xbox_GameChat_APIHandle, &ChatMuteUserFromAllChannels, xboxUserId)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatUnmuteUserFromAllChannels
//

#define EventEnabledChatUnmuteUserFromAllChannels() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatUnmuteUserFromAllChannels
//
#define TraceChatUnmuteUserFromAllChannels(xboxUserId)\
        EventEnabledChatUnmuteUserFromAllChannels() ?\
        Template_z(Xbox_GameChat_APIHandle, &ChatUnmuteUserFromAllChannels, xboxUserId)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatMuteAllUsersFromAllChannels
//

#define EventEnabledChatMuteAllUsersFromAllChannels() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatMuteAllUsersFromAllChannels
//
#define TraceChatMuteAllUsersFromAllChannels()\
        EventEnabledChatMuteAllUsersFromAllChannels() ?\
        TemplateEventDescriptor(Xbox_GameChat_APIHandle, &ChatMuteAllUsersFromAllChannels)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatUnmuteAllUsersFromAllChannels
//

#define EventEnabledChatUnmuteAllUsersFromAllChannels() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatUnmuteAllUsersFromAllChannels
//
#define TraceChatUnmuteAllUsersFromAllChannels()\
        EventEnabledChatUnmuteAllUsersFromAllChannels() ?\
        TemplateEventDescriptor(Xbox_GameChat_APIHandle, &ChatUnmuteAllUsersFromAllChannels)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatUserInfo
//

#define EventEnabledChatUserInfo() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatUserInfo
//
#define TraceChatUserInfo(XboxUserId, UserId, IsGuest, IsSignedIn, HasSponsor, NumControllers, NumAudioDevices)\
        EventEnabledChatUserInfo() ?\
        Template_zqtttqq(Xbox_GameChat_APIHandle, &ChatUserInfo, XboxUserId, UserId, IsGuest, IsSignedIn, HasSponsor, NumControllers, NumAudioDevices)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatUserAudioDevice
//

#define EventEnabledChatUserAudioDevice() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatUserAudioDevice
//
#define TraceChatUserAudioDevice(XboxUserId, Id, DeviceCategory, DeviceType, IsMicrophoneMuted, Sharing)\
        EventEnabledChatUserAudioDevice() ?\
        Template_zzzztz(Xbox_GameChat_APIHandle, &ChatUserAudioDevice, XboxUserId, Id, DeviceCategory, DeviceType, IsMicrophoneMuted, Sharing)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatMicFocus
//

#define EventEnabledChatMicFocus() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatMicFocus
//
#define TraceChatMicFocus(HasMicFocus)\
        EventEnabledChatMicFocus() ?\
        Template_t(Xbox_GameChat_APIHandle, &ChatMicFocus, HasMicFocus)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatLocalCaptureSource
//

#define EventEnabledChatLocalCaptureSource() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatLocalCaptureSource
//
#define TraceChatLocalCaptureSource(XboxUserId, AudioCaptureSourceId, CaptureSourceDeviceId, TalkingMode)\
        EventEnabledChatLocalCaptureSource() ?\
        Template_zzqz(Xbox_GameChat_APIHandle, &ChatLocalCaptureSource, XboxUserId, AudioCaptureSourceId, CaptureSourceDeviceId, TalkingMode)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatRemoteCaptureSource
//

#define EventEnabledChatRemoteCaptureSource() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatRemoteCaptureSource
//
#define TraceChatRemoteCaptureSource(XboxUserId, AudioCaptureSourceId, LookupId, NumberOfChatUsers)\
        EventEnabledChatRemoteCaptureSource() ?\
        Template_zzqq(Xbox_GameChat_APIHandle, &ChatRemoteCaptureSource, XboxUserId, AudioCaptureSourceId, LookupId, NumberOfChatUsers)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatCorrelateAudioDeviceToUser
//

#define EventEnabledChatCorrelateAudioDeviceToUser() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatCorrelateAudioDeviceToUser
//
#define TraceChatCorrelateAudioDeviceToUser(AudioCaptureSourceId, UserId, IsSharedDevice, IsRemove)\
        EventEnabledChatCorrelateAudioDeviceToUser() ?\
        Template_zqtt(Xbox_GameChat_APIHandle, &ChatCorrelateAudioDeviceToUser, AudioCaptureSourceId, UserId, IsSharedDevice, IsRemove)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatIncomingChatVoiceDataPacket
//

#define EventEnabledChatIncomingChatVoiceDataPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for ChatIncomingChatVoiceDataPacket
//
#define TraceChatIncomingChatVoiceDataPacket(DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength, LocalNameOfRemoteConsole, AudioDeviceID, AudioCaptureSourceId)\
        EventEnabledChatIncomingChatVoiceDataPacket() ?\
        Template_qzqqqz(Xbox_GameChat_APIHandle, &ChatIncomingChatVoiceDataPacket, DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength, LocalNameOfRemoteConsole, AudioDeviceID, AudioCaptureSourceId)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatIncomingChatUserAddedPacket
//

#define EventEnabledChatIncomingChatUserAddedPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatIncomingChatUserAddedPacket
//
#define TraceChatIncomingChatUserAddedPacket(DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        EventEnabledChatIncomingChatUserAddedPacket() ?\
        Template_qzq(Xbox_GameChat_APIHandle, &ChatIncomingChatUserAddedPacket, DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatIncomingChatUserRemovedPacket
//

#define EventEnabledChatIncomingChatUserRemovedPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatIncomingChatUserRemovedPacket
//
#define TraceChatIncomingChatUserRemovedPacket(DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        EventEnabledChatIncomingChatUserRemovedPacket() ?\
        Template_qzq(Xbox_GameChat_APIHandle, &ChatIncomingChatUserRemovedPacket, DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatIncomingChatInvalidPacket
//

#define EventEnabledChatIncomingChatInvalidPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000004) != 0)

//
// Event Macro for ChatIncomingChatInvalidPacket
//
#define TraceChatIncomingChatInvalidPacket(DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        EventEnabledChatIncomingChatInvalidPacket() ?\
        Template_qzq(Xbox_GameChat_APIHandle, &ChatIncomingChatInvalidPacket, DiagnosticConsoleId, ChatPacketBase64, ChatPacketLength)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatOutgoingChatVoiceDataPacket
//

#define EventEnabledChatOutgoingChatVoiceDataPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000002) != 0)

//
// Event Macro for ChatOutgoingChatVoiceDataPacket
//
#define TraceChatOutgoingChatVoiceDataPacket(ChatUserXboxUserId, ChatPacketBase64, ChatPacketLength, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder, AudioDeviceID)\
        EventEnabledChatOutgoingChatVoiceDataPacket() ?\
        Template_zzqtttq(Xbox_GameChat_APIHandle, &ChatOutgoingChatVoiceDataPacket, ChatUserXboxUserId, ChatPacketBase64, ChatPacketLength, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder, AudioDeviceID)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatOutgoingChatUserAddedPacket
//

#define EventEnabledChatOutgoingChatUserAddedPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatOutgoingChatUserAddedPacket
//
#define TraceChatOutgoingChatUserAddedPacket(ChatUserXboxUserId, ChatPacketBase64, ChatPacketLength, DiagnosticConsoleId, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder)\
        EventEnabledChatOutgoingChatUserAddedPacket() ?\
        Template_zzqqttt(Xbox_GameChat_APIHandle, &ChatOutgoingChatUserAddedPacket, ChatUserXboxUserId, ChatPacketBase64, ChatPacketLength, DiagnosticConsoleId, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder)\
        : ERROR_SUCCESS\

//
// Enablement check macro for ChatOutgoingChatUserRemovedPacket
//

#define EventEnabledChatOutgoingChatUserRemovedPacket() ((Xbox_GameChat_APIEnableBits[0] & 0x00000001) != 0)

//
// Event Macro for ChatOutgoingChatUserRemovedPacket
//
#define TraceChatOutgoingChatUserRemovedPacket(ChatPacketBase64, ChatPacketLength, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder, ChatUserXboxUserId)\
        EventEnabledChatOutgoingChatUserRemovedPacket() ?\
        Template_zqtttz(Xbox_GameChat_APIHandle, &ChatOutgoingChatUserRemovedPacket, ChatPacketBase64, ChatPacketLength, SendReliable, SendPacketToAllConnectedConsoles, SendInOrder, ChatUserXboxUserId)\
        : ERROR_SUCCESS\

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION


//
// Allow Diasabling of code generation
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions 
//
//
//Template from manifest : ChatManagerSettingsAudioThread
//
#ifndef Template_qqd_def
#define Template_qqd_def
ETW_INLINE
ULONG
Template_qqd(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  AudioThreadPeriodInMilliseconds,
    _In_ const unsigned int  AudioThreadAffinityMask,
    _In_ const signed int  AudioThreadPriority
    )
{
#define ARGUMENT_COUNT_qqd 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqd];

    EventDataDescCreate(&EventData[0], &AudioThreadPeriodInMilliseconds, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &AudioThreadAffinityMask, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &AudioThreadPriority, sizeof(const signed int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqd, EventData);
}
#endif

//
//Template from manifest : ChatManagerSettingsAudioEncodingQuality
//
#ifndef Template_q_def
#define Template_q_def
ETW_INLINE
ULONG
Template_q(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  AudioEncodingQuality
    )
{
#define ARGUMENT_COUNT_q 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_q];

    EventDataDescCreate(&EventData[0], &AudioEncodingQuality, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_q, EventData);
}
#endif

//
//Template from manifest : ChatManagerSettingsJitterBuffer
//
#ifndef Template_qqq_def
#define Template_qqq_def
ETW_INLINE
ULONG
Template_qqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  JitterBufferMaxPackets,
    _In_ const unsigned int  JitterBufferLowestNeededPacketCount,
    _In_ const unsigned int  JitterBufferPacketsBeforeRelaxingNeeded
    )
{
#define ARGUMENT_COUNT_qqq 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qqq];

    EventDataDescCreate(&EventData[0], &JitterBufferMaxPackets, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], &JitterBufferLowestNeededPacketCount, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &JitterBufferPacketsBeforeRelaxingNeeded, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qqq, EventData);
}
#endif

//
//Template from manifest : ChatManagerSettingsMisc
//
#ifndef Template_tttq_def
#define Template_tttq_def
ETW_INLINE
ULONG
Template_tttq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const BOOL  PerformanceCountersEnabled,
    _In_ const BOOL  CombineCaptureBuffersIntoSinglePacket,
    _In_ const BOOL  UseKinectAsCaptureSource,
    _In_ const unsigned int  DiagnosticsTraceLevel_
    )
{
#define ARGUMENT_COUNT_tttq 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_tttq];

    EventDataDescCreate(&EventData[0], &PerformanceCountersEnabled, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[1], &CombineCaptureBuffersIntoSinglePacket, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[2], &UseKinectAsCaptureSource, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &DiagnosticsTraceLevel_, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_tttq, EventData);
}
#endif

//
//Template from manifest : ChatManagerSettingsEffects
//
#ifndef Template_tt_def
#define Template_tt_def
ETW_INLINE
ULONG
Template_tt(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const BOOL  PreEncodeCallbackEnabled,
    _In_ const BOOL  PostDecodeCallbackEnabled
    )
{
#define ARGUMENT_COUNT_tt 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_tt];

    EventDataDescCreate(&EventData[0], &PreEncodeCallbackEnabled, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[1], &PostDecodeCallbackEnabled, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_tt, EventData);
}
#endif

//
//Template from manifest : ChatAddLocalUserToChatChannel
//
#ifndef Template_zq_def
#define Template_zq_def
ETW_INLINE
ULONG
Template_zq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  XboxUserId,
    _In_ const unsigned int  ChannelIndex
    )
{
#define ARGUMENT_COUNT_zq 2

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zq];

    EventDataDescCreate(&EventData[0], 
                        (XboxUserId != NULL) ? XboxUserId : L"NULL",
                        (XboxUserId != NULL) ? (ULONG)((wcslen(XboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &ChannelIndex, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zq, EventData);
}
#endif

//
//Template from manifest : ChatMuteUserFromAllChannels
//
#ifndef Template_z_def
#define Template_z_def
ETW_INLINE
ULONG
Template_z(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  xboxUserId
    )
{
#define ARGUMENT_COUNT_z 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_z];

    EventDataDescCreate(&EventData[0], 
                        (xboxUserId != NULL) ? xboxUserId : L"NULL",
                        (xboxUserId != NULL) ? (ULONG)((wcslen(xboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_z, EventData);
}
#endif

//
//Template from manifest : ChatMuteAllUsersFromAllChannels
//
#ifndef TemplateEventDescriptor_def
#define TemplateEventDescriptor_def


ETW_INLINE
ULONG
TemplateEventDescriptor(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor
    )
{
    return EventWrite(RegHandle, Descriptor, 0, NULL);
}
#endif

//
//Template from manifest : ChatUserInfo
//
#ifndef Template_zqtttqq_def
#define Template_zqtttqq_def
ETW_INLINE
ULONG
Template_zqtttqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  XboxUserId,
    _In_ const unsigned int  UserId,
    _In_ const BOOL  IsGuest,
    _In_ const BOOL  IsSignedIn,
    _In_ const BOOL  HasSponsor,
    _In_ const unsigned int  NumControllers,
    _In_ const unsigned int  NumAudioDevices
    )
{
#define ARGUMENT_COUNT_zqtttqq 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zqtttqq];

    EventDataDescCreate(&EventData[0], 
                        (XboxUserId != NULL) ? XboxUserId : L"NULL",
                        (XboxUserId != NULL) ? (ULONG)((wcslen(XboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &UserId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &IsGuest, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &IsSignedIn, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &HasSponsor, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &NumControllers, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6], &NumAudioDevices, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zqtttqq, EventData);
}
#endif

//
//Template from manifest : ChatUserAudioDevice
//
#ifndef Template_zzzztz_def
#define Template_zzzztz_def
ETW_INLINE
ULONG
Template_zzzztz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  XboxUserId,
    _In_opt_ PCWSTR  Id,
    _In_opt_ PCWSTR  DeviceCategory,
    _In_opt_ PCWSTR  DeviceType,
    _In_ const BOOL  IsMicrophoneMuted,
    _In_opt_ PCWSTR  Sharing
    )
{
#define ARGUMENT_COUNT_zzzztz 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzzztz];

    EventDataDescCreate(&EventData[0], 
                        (XboxUserId != NULL) ? XboxUserId : L"NULL",
                        (XboxUserId != NULL) ? (ULONG)((wcslen(XboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (Id != NULL) ? Id : L"NULL",
                        (Id != NULL) ? (ULONG)((wcslen(Id) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], 
                        (DeviceCategory != NULL) ? DeviceCategory : L"NULL",
                        (DeviceCategory != NULL) ? (ULONG)((wcslen(DeviceCategory) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[3], 
                        (DeviceType != NULL) ? DeviceType : L"NULL",
                        (DeviceType != NULL) ? (ULONG)((wcslen(DeviceType) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[4], &IsMicrophoneMuted, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], 
                        (Sharing != NULL) ? Sharing : L"NULL",
                        (Sharing != NULL) ? (ULONG)((wcslen(Sharing) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzzztz, EventData);
}
#endif

//
//Template from manifest : ChatMicFocus
//
#ifndef Template_t_def
#define Template_t_def
ETW_INLINE
ULONG
Template_t(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const BOOL  HasMicFocus
    )
{
#define ARGUMENT_COUNT_t 1

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_t];

    EventDataDescCreate(&EventData[0], &HasMicFocus, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_t, EventData);
}
#endif

//
//Template from manifest : ChatLocalCaptureSource
//
#ifndef Template_zzqz_def
#define Template_zzqz_def
ETW_INLINE
ULONG
Template_zzqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  XboxUserId,
    _In_opt_ PCWSTR  AudioCaptureSourceId,
    _In_ const unsigned int  CaptureSourceDeviceId,
    _In_opt_ PCWSTR  TalkingMode
    )
{
#define ARGUMENT_COUNT_zzqz 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqz];

    EventDataDescCreate(&EventData[0], 
                        (XboxUserId != NULL) ? XboxUserId : L"NULL",
                        (XboxUserId != NULL) ? (ULONG)((wcslen(XboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (AudioCaptureSourceId != NULL) ? AudioCaptureSourceId : L"NULL",
                        (AudioCaptureSourceId != NULL) ? (ULONG)((wcslen(AudioCaptureSourceId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &CaptureSourceDeviceId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], 
                        (TalkingMode != NULL) ? TalkingMode : L"NULL",
                        (TalkingMode != NULL) ? (ULONG)((wcslen(TalkingMode) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqz, EventData);
}
#endif

//
//Template from manifest : ChatRemoteCaptureSource
//
#ifndef Template_zzqq_def
#define Template_zzqq_def
ETW_INLINE
ULONG
Template_zzqq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  XboxUserId,
    _In_opt_ PCWSTR  AudioCaptureSourceId,
    _In_ const unsigned int  LookupId,
    _In_ const unsigned int  NumberOfChatUsers
    )
{
#define ARGUMENT_COUNT_zzqq 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqq];

    EventDataDescCreate(&EventData[0], 
                        (XboxUserId != NULL) ? XboxUserId : L"NULL",
                        (XboxUserId != NULL) ? (ULONG)((wcslen(XboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (AudioCaptureSourceId != NULL) ? AudioCaptureSourceId : L"NULL",
                        (AudioCaptureSourceId != NULL) ? (ULONG)((wcslen(AudioCaptureSourceId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &LookupId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &NumberOfChatUsers, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqq, EventData);
}
#endif

//
//Template from manifest : ChatCorrelateAudioDeviceToUser
//
#ifndef Template_zqtt_def
#define Template_zqtt_def
ETW_INLINE
ULONG
Template_zqtt(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  AudioCaptureSourceId,
    _In_ const unsigned int  UserId,
    _In_ const BOOL  IsSharedDevice,
    _In_ const BOOL  IsRemove
    )
{
#define ARGUMENT_COUNT_zqtt 4

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zqtt];

    EventDataDescCreate(&EventData[0], 
                        (AudioCaptureSourceId != NULL) ? AudioCaptureSourceId : L"NULL",
                        (AudioCaptureSourceId != NULL) ? (ULONG)((wcslen(AudioCaptureSourceId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &UserId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &IsSharedDevice, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &IsRemove, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zqtt, EventData);
}
#endif

//
//Template from manifest : ChatIncomingChatVoiceDataPacket
//
#ifndef Template_qzqqqz_def
#define Template_qzqqqz_def
ETW_INLINE
ULONG
Template_qzqqqz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  DiagnosticConsoleId,
    _In_opt_ PCWSTR  ChatPacketBase64,
    _In_ const unsigned int  ChatPacketLength,
    _In_ const unsigned int  LocalNameOfRemoteConsole,
    _In_ const unsigned int  AudioDeviceID,
    _In_opt_ PCWSTR  AudioCaptureSourceId
    )
{
#define ARGUMENT_COUNT_qzqqqz 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzqqqz];

    EventDataDescCreate(&EventData[0], &DiagnosticConsoleId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (ChatPacketBase64 != NULL) ? ChatPacketBase64 : L"NULL",
                        (ChatPacketBase64 != NULL) ? (ULONG)((wcslen(ChatPacketBase64) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &ChatPacketLength, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &LocalNameOfRemoteConsole, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &AudioDeviceID, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5], 
                        (AudioCaptureSourceId != NULL) ? AudioCaptureSourceId : L"NULL",
                        (AudioCaptureSourceId != NULL) ? (ULONG)((wcslen(AudioCaptureSourceId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzqqqz, EventData);
}
#endif

//
//Template from manifest : ChatIncomingChatUserAddedPacket
//
#ifndef Template_qzq_def
#define Template_qzq_def
ETW_INLINE
ULONG
Template_qzq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_ const unsigned int  DiagnosticConsoleId,
    _In_opt_ PCWSTR  ChatPacketBase64,
    _In_ const unsigned int  ChatPacketLength
    )
{
#define ARGUMENT_COUNT_qzq 3

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_qzq];

    EventDataDescCreate(&EventData[0], &DiagnosticConsoleId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[1], 
                        (ChatPacketBase64 != NULL) ? ChatPacketBase64 : L"NULL",
                        (ChatPacketBase64 != NULL) ? (ULONG)((wcslen(ChatPacketBase64) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &ChatPacketLength, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_qzq, EventData);
}
#endif

//
//Template from manifest : ChatOutgoingChatVoiceDataPacket
//
#ifndef Template_zzqtttq_def
#define Template_zzqtttq_def
ETW_INLINE
ULONG
Template_zzqtttq(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  ChatUserXboxUserId,
    _In_opt_ PCWSTR  ChatPacketBase64,
    _In_ const unsigned int  ChatPacketLength,
    _In_ const BOOL  SendReliable,
    _In_ const BOOL  SendPacketToAllConnectedConsoles,
    _In_ const BOOL  SendInOrder,
    _In_ const unsigned int  AudioDeviceID
    )
{
#define ARGUMENT_COUNT_zzqtttq 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqtttq];

    EventDataDescCreate(&EventData[0], 
                        (ChatUserXboxUserId != NULL) ? ChatUserXboxUserId : L"NULL",
                        (ChatUserXboxUserId != NULL) ? (ULONG)((wcslen(ChatUserXboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (ChatPacketBase64 != NULL) ? ChatPacketBase64 : L"NULL",
                        (ChatPacketBase64 != NULL) ? (ULONG)((wcslen(ChatPacketBase64) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &ChatPacketLength, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &SendReliable, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &SendPacketToAllConnectedConsoles, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &SendInOrder, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[6], &AudioDeviceID, sizeof(const unsigned int)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqtttq, EventData);
}
#endif

//
//Template from manifest : ChatOutgoingChatUserAddedPacket
//
#ifndef Template_zzqqttt_def
#define Template_zzqqttt_def
ETW_INLINE
ULONG
Template_zzqqttt(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  ChatUserXboxUserId,
    _In_opt_ PCWSTR  ChatPacketBase64,
    _In_ const unsigned int  ChatPacketLength,
    _In_ const unsigned int  DiagnosticConsoleId,
    _In_ const BOOL  SendReliable,
    _In_ const BOOL  SendPacketToAllConnectedConsoles,
    _In_ const BOOL  SendInOrder
    )
{
#define ARGUMENT_COUNT_zzqqttt 7

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zzqqttt];

    EventDataDescCreate(&EventData[0], 
                        (ChatUserXboxUserId != NULL) ? ChatUserXboxUserId : L"NULL",
                        (ChatUserXboxUserId != NULL) ? (ULONG)((wcslen(ChatUserXboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], 
                        (ChatPacketBase64 != NULL) ? ChatPacketBase64 : L"NULL",
                        (ChatPacketBase64 != NULL) ? (ULONG)((wcslen(ChatPacketBase64) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2], &ChatPacketLength, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3], &DiagnosticConsoleId, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4], &SendReliable, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], &SendPacketToAllConnectedConsoles, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[6], &SendInOrder, sizeof(const BOOL)  );

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zzqqttt, EventData);
}
#endif

//
//Template from manifest : ChatOutgoingChatUserRemovedPacket
//
#ifndef Template_zqtttz_def
#define Template_zqtttz_def
ETW_INLINE
ULONG
Template_zqtttz(
    _In_ REGHANDLE RegHandle,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ PCWSTR  ChatPacketBase64,
    _In_ const unsigned int  ChatPacketLength,
    _In_ const BOOL  SendReliable,
    _In_ const BOOL  SendPacketToAllConnectedConsoles,
    _In_ const BOOL  SendInOrder,
    _In_opt_ PCWSTR  ChatUserXboxUserId
    )
{
#define ARGUMENT_COUNT_zqtttz 6

    EVENT_DATA_DESCRIPTOR EventData[ARGUMENT_COUNT_zqtttz];

    EventDataDescCreate(&EventData[0], 
                        (ChatPacketBase64 != NULL) ? ChatPacketBase64 : L"NULL",
                        (ChatPacketBase64 != NULL) ? (ULONG)((wcslen(ChatPacketBase64) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[1], &ChatPacketLength, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2], &SendReliable, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[3], &SendPacketToAllConnectedConsoles, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[4], &SendInOrder, sizeof(const BOOL)  );

    EventDataDescCreate(&EventData[5], 
                        (ChatUserXboxUserId != NULL) ? ChatUserXboxUserId : L"NULL",
                        (ChatUserXboxUserId != NULL) ? (ULONG)((wcslen(ChatUserXboxUserId) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    return EventWrite(RegHandle, Descriptor, ARGUMENT_COUNT_zqtttz, EventData);
}
#endif

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
};
#endif

