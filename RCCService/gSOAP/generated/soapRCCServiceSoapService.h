/* soapRCCServiceSoapService.h
   Generated by gSOAP 2.7.10 from generated/prototypes.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapRCCServiceSoapService_H
#define soapRCCServiceSoapService_H
#include "soapH.h"
class SOAP_CMAC RCCServiceSoapService : public soap
{ public:
	/// Constructor
	RCCServiceSoapService();
	/// Constructor with copy of another engine state
	RCCServiceSoapService(const struct soap&);
	/// Constructor with engine input+output mode control
	RCCServiceSoapService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	RCCServiceSoapService(soap_mode imode, soap_mode omode);
	/// Destructor frees all data
	virtual ~RCCServiceSoapService();
	/// Initializer used by constructor
	virtual	void RCCServiceSoapService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	RCCServiceSoapService *copy();
	/// Force close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	///

	/// Web service operation 'HelloWorld' (returns error code or SOAP_OK)
	virtual	int HelloWorld(_ns1__HelloWorld *ns1__HelloWorld, _ns1__HelloWorldResponse *ns1__HelloWorldResponse);

	/// Web service operation 'GetVersion' (returns error code or SOAP_OK)
	virtual	int GetVersion(_ns1__GetVersion *ns1__GetVersion, _ns1__GetVersionResponse *ns1__GetVersionResponse);

	/// Web service operation 'GetStatus' (returns error code or SOAP_OK)
	virtual	int GetStatus(_ns1__GetStatus *ns1__GetStatus, _ns1__GetStatusResponse *ns1__GetStatusResponse);

	/// Web service operation 'OpenJob' (returns error code or SOAP_OK)
	virtual	int OpenJob(_ns1__OpenJob *ns1__OpenJob, _ns1__OpenJobResponse *ns1__OpenJobResponse);

	/// Web service operation 'OpenJobEx' (returns error code or SOAP_OK)
	virtual	int OpenJobEx(_ns1__OpenJobEx *ns1__OpenJobEx, _ns1__OpenJobExResponse *ns1__OpenJobExResponse);

	/// Web service operation 'RenewLease' (returns error code or SOAP_OK)
	virtual	int RenewLease(_ns1__RenewLease *ns1__RenewLease, _ns1__RenewLeaseResponse *ns1__RenewLeaseResponse);

	/// Web service operation 'Execute' (returns error code or SOAP_OK)
	virtual	int Execute(_ns1__Execute *ns1__Execute, _ns1__ExecuteResponse *ns1__ExecuteResponse);

	/// Web service operation 'ExecuteEx' (returns error code or SOAP_OK)
	virtual	int ExecuteEx(_ns1__ExecuteEx *ns1__ExecuteEx, _ns1__ExecuteExResponse *ns1__ExecuteExResponse);

	/// Web service operation 'CloseJob' (returns error code or SOAP_OK)
	virtual	int CloseJob(_ns1__CloseJob *ns1__CloseJob, _ns1__CloseJobResponse *ns1__CloseJobResponse);

	/// Web service operation 'BatchJob' (returns error code or SOAP_OK)
	virtual	int BatchJob(_ns1__BatchJob *ns1__BatchJob, _ns1__BatchJobResponse *ns1__BatchJobResponse);

	/// Web service operation 'BatchJobEx' (returns error code or SOAP_OK)
	virtual	int BatchJobEx(_ns1__BatchJobEx *ns1__BatchJobEx, _ns1__BatchJobExResponse *ns1__BatchJobExResponse);

	/// Web service operation 'GetExpiration' (returns error code or SOAP_OK)
	virtual	int GetExpiration(_ns1__GetExpiration *ns1__GetExpiration, _ns1__GetExpirationResponse *ns1__GetExpirationResponse);

	/// Web service operation 'GetAllJobs' (returns error code or SOAP_OK)
	virtual	int GetAllJobs(_ns1__GetAllJobs *ns1__GetAllJobs, _ns1__GetAllJobsResponse *ns1__GetAllJobsResponse);

	/// Web service operation 'GetAllJobsEx' (returns error code or SOAP_OK)
	virtual	int GetAllJobsEx(_ns1__GetAllJobsEx *ns1__GetAllJobsEx, _ns1__GetAllJobsExResponse *ns1__GetAllJobsExResponse);

	/// Web service operation 'CloseExpiredJobs' (returns error code or SOAP_OK)
	virtual	int CloseExpiredJobs(_ns1__CloseExpiredJobs *ns1__CloseExpiredJobs, _ns1__CloseExpiredJobsResponse *ns1__CloseExpiredJobsResponse);

	/// Web service operation 'CloseAllJobs' (returns error code or SOAP_OK)
	virtual	int CloseAllJobs(_ns1__CloseAllJobs *ns1__CloseAllJobs, _ns1__CloseAllJobsResponse *ns1__CloseAllJobsResponse);

	/// Web service operation 'Diag' (returns error code or SOAP_OK)
	virtual	int Diag(_ns1__Diag *ns1__Diag, _ns1__DiagResponse *ns1__DiagResponse);

	/// Web service operation 'DiagEx' (returns error code or SOAP_OK)
	virtual	int DiagEx(_ns1__DiagEx *ns1__DiagEx, _ns1__DiagExResponse *ns1__DiagExResponse);
};
#endif
