/* soapC.cpp
   Generated by gSOAP 2.7.10 from generated/prototypes.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2010-02-18 00:17:51 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_ns1__LuaType:
		return soap_in_ns1__LuaType(soap, NULL, NULL, "ns1:LuaType");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__LuaValue:
		return soap_in_ns1__LuaValue(soap, NULL, NULL, "ns1:LuaValue");
	case SOAP_TYPE_ns1__ArrayOfJob:
		return soap_in_ns1__ArrayOfJob(soap, NULL, NULL, "ns1:ArrayOfJob");
	case SOAP_TYPE_ns1__ArrayOfLuaValue:
		return soap_in_ns1__ArrayOfLuaValue(soap, NULL, NULL, "ns1:ArrayOfLuaValue");
	case SOAP_TYPE_ns1__ScriptExecution:
		return soap_in_ns1__ScriptExecution(soap, NULL, NULL, "ns1:ScriptExecution");
	case SOAP_TYPE_ns1__Job:
		return soap_in_ns1__Job(soap, NULL, NULL, "ns1:Job");
	case SOAP_TYPE_ns1__Status:
		return soap_in_ns1__Status(soap, NULL, NULL, "ns1:Status");
	case SOAP_TYPE_PointerTo_ns1__DiagExResponse:
		return soap_in_PointerTo_ns1__DiagExResponse(soap, NULL, NULL, "ns1:DiagExResponse");
	case SOAP_TYPE_PointerTo_ns1__DiagEx:
		return soap_in_PointerTo_ns1__DiagEx(soap, NULL, NULL, "ns1:DiagEx");
	case SOAP_TYPE_PointerTo_ns1__DiagResponse:
		return soap_in_PointerTo_ns1__DiagResponse(soap, NULL, NULL, "ns1:DiagResponse");
	case SOAP_TYPE_PointerTo_ns1__Diag:
		return soap_in_PointerTo_ns1__Diag(soap, NULL, NULL, "ns1:Diag");
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobsResponse:
		return soap_in_PointerTo_ns1__CloseAllJobsResponse(soap, NULL, NULL, "ns1:CloseAllJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobs:
		return soap_in_PointerTo_ns1__CloseAllJobs(soap, NULL, NULL, "ns1:CloseAllJobs");
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobsResponse:
		return soap_in_PointerTo_ns1__CloseExpiredJobsResponse(soap, NULL, NULL, "ns1:CloseExpiredJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs:
		return soap_in_PointerTo_ns1__CloseExpiredJobs(soap, NULL, NULL, "ns1:CloseExpiredJobs");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsExResponse:
		return soap_in_PointerTo_ns1__GetAllJobsExResponse(soap, NULL, NULL, "ns1:GetAllJobsExResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsEx:
		return soap_in_PointerTo_ns1__GetAllJobsEx(soap, NULL, NULL, "ns1:GetAllJobsEx");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsResponse:
		return soap_in_PointerTo_ns1__GetAllJobsResponse(soap, NULL, NULL, "ns1:GetAllJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobs:
		return soap_in_PointerTo_ns1__GetAllJobs(soap, NULL, NULL, "ns1:GetAllJobs");
	case SOAP_TYPE_PointerTo_ns1__GetExpirationResponse:
		return soap_in_PointerTo_ns1__GetExpirationResponse(soap, NULL, NULL, "ns1:GetExpirationResponse");
	case SOAP_TYPE_PointerTo_ns1__GetExpiration:
		return soap_in_PointerTo_ns1__GetExpiration(soap, NULL, NULL, "ns1:GetExpiration");
	case SOAP_TYPE_PointerTo_ns1__BatchJobExResponse:
		return soap_in_PointerTo_ns1__BatchJobExResponse(soap, NULL, NULL, "ns1:BatchJobExResponse");
	case SOAP_TYPE_PointerTo_ns1__BatchJobEx:
		return soap_in_PointerTo_ns1__BatchJobEx(soap, NULL, NULL, "ns1:BatchJobEx");
	case SOAP_TYPE_PointerTo_ns1__BatchJobResponse:
		return soap_in_PointerTo_ns1__BatchJobResponse(soap, NULL, NULL, "ns1:BatchJobResponse");
	case SOAP_TYPE_PointerTo_ns1__BatchJob:
		return soap_in_PointerTo_ns1__BatchJob(soap, NULL, NULL, "ns1:BatchJob");
	case SOAP_TYPE_PointerTo_ns1__CloseJobResponse:
		return soap_in_PointerTo_ns1__CloseJobResponse(soap, NULL, NULL, "ns1:CloseJobResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseJob:
		return soap_in_PointerTo_ns1__CloseJob(soap, NULL, NULL, "ns1:CloseJob");
	case SOAP_TYPE_PointerTo_ns1__ExecuteExResponse:
		return soap_in_PointerTo_ns1__ExecuteExResponse(soap, NULL, NULL, "ns1:ExecuteExResponse");
	case SOAP_TYPE_PointerTo_ns1__ExecuteEx:
		return soap_in_PointerTo_ns1__ExecuteEx(soap, NULL, NULL, "ns1:ExecuteEx");
	case SOAP_TYPE_PointerTo_ns1__ExecuteResponse:
		return soap_in_PointerTo_ns1__ExecuteResponse(soap, NULL, NULL, "ns1:ExecuteResponse");
	case SOAP_TYPE_PointerTo_ns1__Execute:
		return soap_in_PointerTo_ns1__Execute(soap, NULL, NULL, "ns1:Execute");
	case SOAP_TYPE_PointerTo_ns1__RenewLeaseResponse:
		return soap_in_PointerTo_ns1__RenewLeaseResponse(soap, NULL, NULL, "ns1:RenewLeaseResponse");
	case SOAP_TYPE_PointerTo_ns1__RenewLease:
		return soap_in_PointerTo_ns1__RenewLease(soap, NULL, NULL, "ns1:RenewLease");
	case SOAP_TYPE_PointerTo_ns1__OpenJobExResponse:
		return soap_in_PointerTo_ns1__OpenJobExResponse(soap, NULL, NULL, "ns1:OpenJobExResponse");
	case SOAP_TYPE_PointerTo_ns1__OpenJobEx:
		return soap_in_PointerTo_ns1__OpenJobEx(soap, NULL, NULL, "ns1:OpenJobEx");
	case SOAP_TYPE_PointerTo_ns1__OpenJobResponse:
		return soap_in_PointerTo_ns1__OpenJobResponse(soap, NULL, NULL, "ns1:OpenJobResponse");
	case SOAP_TYPE_PointerTo_ns1__OpenJob:
		return soap_in_PointerTo_ns1__OpenJob(soap, NULL, NULL, "ns1:OpenJob");
	case SOAP_TYPE_PointerTo_ns1__GetStatusResponse:
		return soap_in_PointerTo_ns1__GetStatusResponse(soap, NULL, NULL, "ns1:GetStatusResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStatus:
		return soap_in_PointerTo_ns1__GetStatus(soap, NULL, NULL, "ns1:GetStatus");
	case SOAP_TYPE_PointerTo_ns1__GetVersionResponse:
		return soap_in_PointerTo_ns1__GetVersionResponse(soap, NULL, NULL, "ns1:GetVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetVersion:
		return soap_in_PointerTo_ns1__GetVersion(soap, NULL, NULL, "ns1:GetVersion");
	case SOAP_TYPE_PointerTo_ns1__HelloWorldResponse:
		return soap_in_PointerTo_ns1__HelloWorldResponse(soap, NULL, NULL, "ns1:HelloWorldResponse");
	case SOAP_TYPE_PointerTo_ns1__HelloWorld:
		return soap_in_PointerTo_ns1__HelloWorld(soap, NULL, NULL, "ns1:HelloWorld");
	case SOAP_TYPE_PointerTons1__ArrayOfJob:
		return soap_in_PointerTons1__ArrayOfJob(soap, NULL, NULL, "ns1:ArrayOfJob");
	case SOAP_TYPE_PointerTons1__ScriptExecution:
		return soap_in_PointerTons1__ScriptExecution(soap, NULL, NULL, "ns1:ScriptExecution");
	case SOAP_TYPE_PointerTons1__Status:
		return soap_in_PointerTons1__Status(soap, NULL, NULL, "ns1:Status");
	case SOAP_TYPE_PointerTons1__Job:
		return soap_in_PointerTons1__Job(soap, NULL, NULL, "ns1:Job");
	case SOAP_TYPE_PointerTons1__LuaValue:
		return soap_in_PointerTons1__LuaValue(soap, NULL, NULL, "ns1:LuaValue");
	case SOAP_TYPE_PointerTons1__ArrayOfLuaValue:
		return soap_in_PointerTons1__ArrayOfLuaValue(soap, NULL, NULL, "ns1:ArrayOfLuaValue");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LuaValue"))
		{	*type = SOAP_TYPE_ns1__LuaValue;
			return soap_in_ns1__LuaValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfJob"))
		{	*type = SOAP_TYPE_ns1__ArrayOfJob;
			return soap_in_ns1__ArrayOfJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfLuaValue"))
		{	*type = SOAP_TYPE_ns1__ArrayOfLuaValue;
			return soap_in_ns1__ArrayOfLuaValue(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ScriptExecution"))
		{	*type = SOAP_TYPE_ns1__ScriptExecution;
			return soap_in_ns1__ScriptExecution(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Job"))
		{	*type = SOAP_TYPE_ns1__Job;
			return soap_in_ns1__Job(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Status"))
		{	*type = SOAP_TYPE_ns1__Status;
			return soap_in_ns1__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LuaType"))
		{	*type = SOAP_TYPE_ns1__LuaType;
			return soap_in_ns1__LuaType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:DiagExResponse"))
		{	*type = SOAP_TYPE__ns1__DiagExResponse;
			return soap_in__ns1__DiagExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DiagEx"))
		{	*type = SOAP_TYPE__ns1__DiagEx;
			return soap_in__ns1__DiagEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DiagResponse"))
		{	*type = SOAP_TYPE__ns1__DiagResponse;
			return soap_in__ns1__DiagResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Diag"))
		{	*type = SOAP_TYPE__ns1__Diag;
			return soap_in__ns1__Diag(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseAllJobsResponse"))
		{	*type = SOAP_TYPE__ns1__CloseAllJobsResponse;
			return soap_in__ns1__CloseAllJobsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseAllJobs"))
		{	*type = SOAP_TYPE__ns1__CloseAllJobs;
			return soap_in__ns1__CloseAllJobs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseExpiredJobsResponse"))
		{	*type = SOAP_TYPE__ns1__CloseExpiredJobsResponse;
			return soap_in__ns1__CloseExpiredJobsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseExpiredJobs"))
		{	*type = SOAP_TYPE__ns1__CloseExpiredJobs;
			return soap_in__ns1__CloseExpiredJobs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAllJobsExResponse"))
		{	*type = SOAP_TYPE__ns1__GetAllJobsExResponse;
			return soap_in__ns1__GetAllJobsExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAllJobsEx"))
		{	*type = SOAP_TYPE__ns1__GetAllJobsEx;
			return soap_in__ns1__GetAllJobsEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAllJobsResponse"))
		{	*type = SOAP_TYPE__ns1__GetAllJobsResponse;
			return soap_in__ns1__GetAllJobsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAllJobs"))
		{	*type = SOAP_TYPE__ns1__GetAllJobs;
			return soap_in__ns1__GetAllJobs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetExpirationResponse"))
		{	*type = SOAP_TYPE__ns1__GetExpirationResponse;
			return soap_in__ns1__GetExpirationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetExpiration"))
		{	*type = SOAP_TYPE__ns1__GetExpiration;
			return soap_in__ns1__GetExpiration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BatchJobExResponse"))
		{	*type = SOAP_TYPE__ns1__BatchJobExResponse;
			return soap_in__ns1__BatchJobExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BatchJobEx"))
		{	*type = SOAP_TYPE__ns1__BatchJobEx;
			return soap_in__ns1__BatchJobEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BatchJobResponse"))
		{	*type = SOAP_TYPE__ns1__BatchJobResponse;
			return soap_in__ns1__BatchJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:BatchJob"))
		{	*type = SOAP_TYPE__ns1__BatchJob;
			return soap_in__ns1__BatchJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseJobResponse"))
		{	*type = SOAP_TYPE__ns1__CloseJobResponse;
			return soap_in__ns1__CloseJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CloseJob"))
		{	*type = SOAP_TYPE__ns1__CloseJob;
			return soap_in__ns1__CloseJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ExecuteExResponse"))
		{	*type = SOAP_TYPE__ns1__ExecuteExResponse;
			return soap_in__ns1__ExecuteExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ExecuteEx"))
		{	*type = SOAP_TYPE__ns1__ExecuteEx;
			return soap_in__ns1__ExecuteEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ExecuteResponse"))
		{	*type = SOAP_TYPE__ns1__ExecuteResponse;
			return soap_in__ns1__ExecuteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Execute"))
		{	*type = SOAP_TYPE__ns1__Execute;
			return soap_in__ns1__Execute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RenewLeaseResponse"))
		{	*type = SOAP_TYPE__ns1__RenewLeaseResponse;
			return soap_in__ns1__RenewLeaseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RenewLease"))
		{	*type = SOAP_TYPE__ns1__RenewLease;
			return soap_in__ns1__RenewLease(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenJobExResponse"))
		{	*type = SOAP_TYPE__ns1__OpenJobExResponse;
			return soap_in__ns1__OpenJobExResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenJobResponse"))
		{	*type = SOAP_TYPE__ns1__OpenJobResponse;
			return soap_in__ns1__OpenJobResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenJobEx"))
		{	*type = SOAP_TYPE__ns1__OpenJobEx;
			return soap_in__ns1__OpenJobEx(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:OpenJob"))
		{	*type = SOAP_TYPE__ns1__OpenJob;
			return soap_in__ns1__OpenJob(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStatusResponse"))
		{	*type = SOAP_TYPE__ns1__GetStatusResponse;
			return soap_in__ns1__GetStatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStatus"))
		{	*type = SOAP_TYPE__ns1__GetStatus;
			return soap_in__ns1__GetStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersionResponse"))
		{	*type = SOAP_TYPE__ns1__GetVersionResponse;
			return soap_in__ns1__GetVersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetVersion"))
		{	*type = SOAP_TYPE__ns1__GetVersion;
			return soap_in__ns1__GetVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:HelloWorldResponse"))
		{	*type = SOAP_TYPE__ns1__HelloWorldResponse;
			return soap_in__ns1__HelloWorldResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:HelloWorld"))
		{	*type = SOAP_TYPE__ns1__HelloWorld;
			return soap_in__ns1__HelloWorld(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_ns1__LuaType:
		return soap_out_ns1__LuaType(soap, tag, id, (const enum ns1__LuaType *)ptr, "ns1:LuaType");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__DiagExResponse:
		return ((_ns1__DiagExResponse *)ptr)->soap_out(soap, "ns1:DiagExResponse", id, NULL);
	case SOAP_TYPE__ns1__DiagEx:
		return ((_ns1__DiagEx *)ptr)->soap_out(soap, "ns1:DiagEx", id, NULL);
	case SOAP_TYPE__ns1__DiagResponse:
		return ((_ns1__DiagResponse *)ptr)->soap_out(soap, "ns1:DiagResponse", id, NULL);
	case SOAP_TYPE__ns1__Diag:
		return ((_ns1__Diag *)ptr)->soap_out(soap, "ns1:Diag", id, NULL);
	case SOAP_TYPE__ns1__CloseAllJobsResponse:
		return ((_ns1__CloseAllJobsResponse *)ptr)->soap_out(soap, "ns1:CloseAllJobsResponse", id, NULL);
	case SOAP_TYPE__ns1__CloseAllJobs:
		return ((_ns1__CloseAllJobs *)ptr)->soap_out(soap, "ns1:CloseAllJobs", id, NULL);
	case SOAP_TYPE__ns1__CloseExpiredJobsResponse:
		return ((_ns1__CloseExpiredJobsResponse *)ptr)->soap_out(soap, "ns1:CloseExpiredJobsResponse", id, NULL);
	case SOAP_TYPE__ns1__CloseExpiredJobs:
		return ((_ns1__CloseExpiredJobs *)ptr)->soap_out(soap, "ns1:CloseExpiredJobs", id, NULL);
	case SOAP_TYPE__ns1__GetAllJobsExResponse:
		return ((_ns1__GetAllJobsExResponse *)ptr)->soap_out(soap, "ns1:GetAllJobsExResponse", id, NULL);
	case SOAP_TYPE__ns1__GetAllJobsEx:
		return ((_ns1__GetAllJobsEx *)ptr)->soap_out(soap, "ns1:GetAllJobsEx", id, NULL);
	case SOAP_TYPE__ns1__GetAllJobsResponse:
		return ((_ns1__GetAllJobsResponse *)ptr)->soap_out(soap, "ns1:GetAllJobsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetAllJobs:
		return ((_ns1__GetAllJobs *)ptr)->soap_out(soap, "ns1:GetAllJobs", id, NULL);
	case SOAP_TYPE__ns1__GetExpirationResponse:
		return ((_ns1__GetExpirationResponse *)ptr)->soap_out(soap, "ns1:GetExpirationResponse", id, NULL);
	case SOAP_TYPE__ns1__GetExpiration:
		return ((_ns1__GetExpiration *)ptr)->soap_out(soap, "ns1:GetExpiration", id, NULL);
	case SOAP_TYPE__ns1__BatchJobExResponse:
		return ((_ns1__BatchJobExResponse *)ptr)->soap_out(soap, "ns1:BatchJobExResponse", id, NULL);
	case SOAP_TYPE__ns1__BatchJobEx:
		return ((_ns1__BatchJobEx *)ptr)->soap_out(soap, "ns1:BatchJobEx", id, NULL);
	case SOAP_TYPE__ns1__BatchJobResponse:
		return ((_ns1__BatchJobResponse *)ptr)->soap_out(soap, "ns1:BatchJobResponse", id, NULL);
	case SOAP_TYPE__ns1__BatchJob:
		return ((_ns1__BatchJob *)ptr)->soap_out(soap, "ns1:BatchJob", id, NULL);
	case SOAP_TYPE__ns1__CloseJobResponse:
		return ((_ns1__CloseJobResponse *)ptr)->soap_out(soap, "ns1:CloseJobResponse", id, NULL);
	case SOAP_TYPE__ns1__CloseJob:
		return ((_ns1__CloseJob *)ptr)->soap_out(soap, "ns1:CloseJob", id, NULL);
	case SOAP_TYPE__ns1__ExecuteExResponse:
		return ((_ns1__ExecuteExResponse *)ptr)->soap_out(soap, "ns1:ExecuteExResponse", id, NULL);
	case SOAP_TYPE__ns1__ExecuteEx:
		return ((_ns1__ExecuteEx *)ptr)->soap_out(soap, "ns1:ExecuteEx", id, NULL);
	case SOAP_TYPE__ns1__ExecuteResponse:
		return ((_ns1__ExecuteResponse *)ptr)->soap_out(soap, "ns1:ExecuteResponse", id, NULL);
	case SOAP_TYPE__ns1__Execute:
		return ((_ns1__Execute *)ptr)->soap_out(soap, "ns1:Execute", id, NULL);
	case SOAP_TYPE__ns1__RenewLeaseResponse:
		return ((_ns1__RenewLeaseResponse *)ptr)->soap_out(soap, "ns1:RenewLeaseResponse", id, NULL);
	case SOAP_TYPE__ns1__RenewLease:
		return ((_ns1__RenewLease *)ptr)->soap_out(soap, "ns1:RenewLease", id, NULL);
	case SOAP_TYPE__ns1__OpenJobExResponse:
		return ((_ns1__OpenJobExResponse *)ptr)->soap_out(soap, "ns1:OpenJobExResponse", id, NULL);
	case SOAP_TYPE__ns1__OpenJobResponse:
		return ((_ns1__OpenJobResponse *)ptr)->soap_out(soap, "ns1:OpenJobResponse", id, NULL);
	case SOAP_TYPE__ns1__OpenJobEx:
		return ((_ns1__OpenJobEx *)ptr)->soap_out(soap, "ns1:OpenJobEx", id, NULL);
	case SOAP_TYPE__ns1__OpenJob:
		return ((_ns1__OpenJob *)ptr)->soap_out(soap, "ns1:OpenJob", id, NULL);
	case SOAP_TYPE__ns1__GetStatusResponse:
		return ((_ns1__GetStatusResponse *)ptr)->soap_out(soap, "ns1:GetStatusResponse", id, NULL);
	case SOAP_TYPE__ns1__GetStatus:
		return ((_ns1__GetStatus *)ptr)->soap_out(soap, "ns1:GetStatus", id, NULL);
	case SOAP_TYPE__ns1__GetVersionResponse:
		return ((_ns1__GetVersionResponse *)ptr)->soap_out(soap, "ns1:GetVersionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetVersion:
		return ((_ns1__GetVersion *)ptr)->soap_out(soap, "ns1:GetVersion", id, NULL);
	case SOAP_TYPE__ns1__HelloWorldResponse:
		return ((_ns1__HelloWorldResponse *)ptr)->soap_out(soap, "ns1:HelloWorldResponse", id, NULL);
	case SOAP_TYPE__ns1__HelloWorld:
		return ((_ns1__HelloWorld *)ptr)->soap_out(soap, "ns1:HelloWorld", id, NULL);
	case SOAP_TYPE_ns1__LuaValue:
		return ((ns1__LuaValue *)ptr)->soap_out(soap, tag, id, "ns1:LuaValue");
	case SOAP_TYPE_ns1__ArrayOfJob:
		return ((ns1__ArrayOfJob *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfJob");
	case SOAP_TYPE_ns1__ArrayOfLuaValue:
		return ((ns1__ArrayOfLuaValue *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfLuaValue");
	case SOAP_TYPE_ns1__ScriptExecution:
		return ((ns1__ScriptExecution *)ptr)->soap_out(soap, tag, id, "ns1:ScriptExecution");
	case SOAP_TYPE_ns1__Job:
		return ((ns1__Job *)ptr)->soap_out(soap, tag, id, "ns1:Job");
	case SOAP_TYPE_ns1__Status:
		return ((ns1__Status *)ptr)->soap_out(soap, tag, id, "ns1:Status");
	case SOAP_TYPE_PointerTo_ns1__DiagExResponse:
		return soap_out_PointerTo_ns1__DiagExResponse(soap, tag, id, (_ns1__DiagExResponse *const*)ptr, "ns1:DiagExResponse");
	case SOAP_TYPE_PointerTo_ns1__DiagEx:
		return soap_out_PointerTo_ns1__DiagEx(soap, tag, id, (_ns1__DiagEx *const*)ptr, "ns1:DiagEx");
	case SOAP_TYPE_PointerTo_ns1__DiagResponse:
		return soap_out_PointerTo_ns1__DiagResponse(soap, tag, id, (_ns1__DiagResponse *const*)ptr, "ns1:DiagResponse");
	case SOAP_TYPE_PointerTo_ns1__Diag:
		return soap_out_PointerTo_ns1__Diag(soap, tag, id, (_ns1__Diag *const*)ptr, "ns1:Diag");
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobsResponse:
		return soap_out_PointerTo_ns1__CloseAllJobsResponse(soap, tag, id, (_ns1__CloseAllJobsResponse *const*)ptr, "ns1:CloseAllJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobs:
		return soap_out_PointerTo_ns1__CloseAllJobs(soap, tag, id, (_ns1__CloseAllJobs *const*)ptr, "ns1:CloseAllJobs");
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobsResponse:
		return soap_out_PointerTo_ns1__CloseExpiredJobsResponse(soap, tag, id, (_ns1__CloseExpiredJobsResponse *const*)ptr, "ns1:CloseExpiredJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs:
		return soap_out_PointerTo_ns1__CloseExpiredJobs(soap, tag, id, (_ns1__CloseExpiredJobs *const*)ptr, "ns1:CloseExpiredJobs");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsExResponse:
		return soap_out_PointerTo_ns1__GetAllJobsExResponse(soap, tag, id, (_ns1__GetAllJobsExResponse *const*)ptr, "ns1:GetAllJobsExResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsEx:
		return soap_out_PointerTo_ns1__GetAllJobsEx(soap, tag, id, (_ns1__GetAllJobsEx *const*)ptr, "ns1:GetAllJobsEx");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsResponse:
		return soap_out_PointerTo_ns1__GetAllJobsResponse(soap, tag, id, (_ns1__GetAllJobsResponse *const*)ptr, "ns1:GetAllJobsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAllJobs:
		return soap_out_PointerTo_ns1__GetAllJobs(soap, tag, id, (_ns1__GetAllJobs *const*)ptr, "ns1:GetAllJobs");
	case SOAP_TYPE_PointerTo_ns1__GetExpirationResponse:
		return soap_out_PointerTo_ns1__GetExpirationResponse(soap, tag, id, (_ns1__GetExpirationResponse *const*)ptr, "ns1:GetExpirationResponse");
	case SOAP_TYPE_PointerTo_ns1__GetExpiration:
		return soap_out_PointerTo_ns1__GetExpiration(soap, tag, id, (_ns1__GetExpiration *const*)ptr, "ns1:GetExpiration");
	case SOAP_TYPE_PointerTo_ns1__BatchJobExResponse:
		return soap_out_PointerTo_ns1__BatchJobExResponse(soap, tag, id, (_ns1__BatchJobExResponse *const*)ptr, "ns1:BatchJobExResponse");
	case SOAP_TYPE_PointerTo_ns1__BatchJobEx:
		return soap_out_PointerTo_ns1__BatchJobEx(soap, tag, id, (_ns1__BatchJobEx *const*)ptr, "ns1:BatchJobEx");
	case SOAP_TYPE_PointerTo_ns1__BatchJobResponse:
		return soap_out_PointerTo_ns1__BatchJobResponse(soap, tag, id, (_ns1__BatchJobResponse *const*)ptr, "ns1:BatchJobResponse");
	case SOAP_TYPE_PointerTo_ns1__BatchJob:
		return soap_out_PointerTo_ns1__BatchJob(soap, tag, id, (_ns1__BatchJob *const*)ptr, "ns1:BatchJob");
	case SOAP_TYPE_PointerTo_ns1__CloseJobResponse:
		return soap_out_PointerTo_ns1__CloseJobResponse(soap, tag, id, (_ns1__CloseJobResponse *const*)ptr, "ns1:CloseJobResponse");
	case SOAP_TYPE_PointerTo_ns1__CloseJob:
		return soap_out_PointerTo_ns1__CloseJob(soap, tag, id, (_ns1__CloseJob *const*)ptr, "ns1:CloseJob");
	case SOAP_TYPE_PointerTo_ns1__ExecuteExResponse:
		return soap_out_PointerTo_ns1__ExecuteExResponse(soap, tag, id, (_ns1__ExecuteExResponse *const*)ptr, "ns1:ExecuteExResponse");
	case SOAP_TYPE_PointerTo_ns1__ExecuteEx:
		return soap_out_PointerTo_ns1__ExecuteEx(soap, tag, id, (_ns1__ExecuteEx *const*)ptr, "ns1:ExecuteEx");
	case SOAP_TYPE_PointerTo_ns1__ExecuteResponse:
		return soap_out_PointerTo_ns1__ExecuteResponse(soap, tag, id, (_ns1__ExecuteResponse *const*)ptr, "ns1:ExecuteResponse");
	case SOAP_TYPE_PointerTo_ns1__Execute:
		return soap_out_PointerTo_ns1__Execute(soap, tag, id, (_ns1__Execute *const*)ptr, "ns1:Execute");
	case SOAP_TYPE_PointerTo_ns1__RenewLeaseResponse:
		return soap_out_PointerTo_ns1__RenewLeaseResponse(soap, tag, id, (_ns1__RenewLeaseResponse *const*)ptr, "ns1:RenewLeaseResponse");
	case SOAP_TYPE_PointerTo_ns1__RenewLease:
		return soap_out_PointerTo_ns1__RenewLease(soap, tag, id, (_ns1__RenewLease *const*)ptr, "ns1:RenewLease");
	case SOAP_TYPE_PointerTo_ns1__OpenJobExResponse:
		return soap_out_PointerTo_ns1__OpenJobExResponse(soap, tag, id, (_ns1__OpenJobExResponse *const*)ptr, "ns1:OpenJobExResponse");
	case SOAP_TYPE_PointerTo_ns1__OpenJobEx:
		return soap_out_PointerTo_ns1__OpenJobEx(soap, tag, id, (_ns1__OpenJobEx *const*)ptr, "ns1:OpenJobEx");
	case SOAP_TYPE_PointerTo_ns1__OpenJobResponse:
		return soap_out_PointerTo_ns1__OpenJobResponse(soap, tag, id, (_ns1__OpenJobResponse *const*)ptr, "ns1:OpenJobResponse");
	case SOAP_TYPE_PointerTo_ns1__OpenJob:
		return soap_out_PointerTo_ns1__OpenJob(soap, tag, id, (_ns1__OpenJob *const*)ptr, "ns1:OpenJob");
	case SOAP_TYPE_PointerTo_ns1__GetStatusResponse:
		return soap_out_PointerTo_ns1__GetStatusResponse(soap, tag, id, (_ns1__GetStatusResponse *const*)ptr, "ns1:GetStatusResponse");
	case SOAP_TYPE_PointerTo_ns1__GetStatus:
		return soap_out_PointerTo_ns1__GetStatus(soap, tag, id, (_ns1__GetStatus *const*)ptr, "ns1:GetStatus");
	case SOAP_TYPE_PointerTo_ns1__GetVersionResponse:
		return soap_out_PointerTo_ns1__GetVersionResponse(soap, tag, id, (_ns1__GetVersionResponse *const*)ptr, "ns1:GetVersionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetVersion:
		return soap_out_PointerTo_ns1__GetVersion(soap, tag, id, (_ns1__GetVersion *const*)ptr, "ns1:GetVersion");
	case SOAP_TYPE_PointerTo_ns1__HelloWorldResponse:
		return soap_out_PointerTo_ns1__HelloWorldResponse(soap, tag, id, (_ns1__HelloWorldResponse *const*)ptr, "ns1:HelloWorldResponse");
	case SOAP_TYPE_PointerTo_ns1__HelloWorld:
		return soap_out_PointerTo_ns1__HelloWorld(soap, tag, id, (_ns1__HelloWorld *const*)ptr, "ns1:HelloWorld");
	case SOAP_TYPE_PointerTons1__ArrayOfJob:
		return soap_out_PointerTons1__ArrayOfJob(soap, tag, id, (ns1__ArrayOfJob *const*)ptr, "ns1:ArrayOfJob");
	case SOAP_TYPE_PointerTons1__ScriptExecution:
		return soap_out_PointerTons1__ScriptExecution(soap, tag, id, (ns1__ScriptExecution *const*)ptr, "ns1:ScriptExecution");
	case SOAP_TYPE_PointerTons1__Status:
		return soap_out_PointerTons1__Status(soap, tag, id, (ns1__Status *const*)ptr, "ns1:Status");
	case SOAP_TYPE_PointerTons1__Job:
		return soap_out_PointerTons1__Job(soap, tag, id, (ns1__Job *const*)ptr, "ns1:Job");
	case SOAP_TYPE_PointerTons1__LuaValue:
		return soap_out_PointerTons1__LuaValue(soap, tag, id, (ns1__LuaValue *const*)ptr, "ns1:LuaValue");
	case SOAP_TYPE_PointerTons1__ArrayOfLuaValue:
		return soap_out_PointerTons1__ArrayOfLuaValue(soap, tag, id, (ns1__ArrayOfLuaValue *const*)ptr, "ns1:ArrayOfLuaValue");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__DiagExResponse:
		((_ns1__DiagExResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DiagEx:
		((_ns1__DiagEx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DiagResponse:
		((_ns1__DiagResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Diag:
		((_ns1__Diag *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseAllJobsResponse:
		((_ns1__CloseAllJobsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseAllJobs:
		((_ns1__CloseAllJobs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseExpiredJobsResponse:
		((_ns1__CloseExpiredJobsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseExpiredJobs:
		((_ns1__CloseExpiredJobs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAllJobsExResponse:
		((_ns1__GetAllJobsExResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAllJobsEx:
		((_ns1__GetAllJobsEx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAllJobsResponse:
		((_ns1__GetAllJobsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAllJobs:
		((_ns1__GetAllJobs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetExpirationResponse:
		((_ns1__GetExpirationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetExpiration:
		((_ns1__GetExpiration *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__BatchJobExResponse:
		((_ns1__BatchJobExResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__BatchJobEx:
		((_ns1__BatchJobEx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__BatchJobResponse:
		((_ns1__BatchJobResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__BatchJob:
		((_ns1__BatchJob *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseJobResponse:
		((_ns1__CloseJobResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CloseJob:
		((_ns1__CloseJob *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ExecuteExResponse:
		((_ns1__ExecuteExResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ExecuteEx:
		((_ns1__ExecuteEx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ExecuteResponse:
		((_ns1__ExecuteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Execute:
		((_ns1__Execute *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RenewLeaseResponse:
		((_ns1__RenewLeaseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RenewLease:
		((_ns1__RenewLease *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenJobExResponse:
		((_ns1__OpenJobExResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenJobResponse:
		((_ns1__OpenJobResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenJobEx:
		((_ns1__OpenJobEx *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__OpenJob:
		((_ns1__OpenJob *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStatusResponse:
		((_ns1__GetStatusResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStatus:
		((_ns1__GetStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersionResponse:
		((_ns1__GetVersionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetVersion:
		((_ns1__GetVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__HelloWorldResponse:
		((_ns1__HelloWorldResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__HelloWorld:
		((_ns1__HelloWorld *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__LuaValue:
		((ns1__LuaValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfJob:
		((ns1__ArrayOfJob *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfLuaValue:
		((ns1__ArrayOfLuaValue *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ScriptExecution:
		((ns1__ScriptExecution *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Job:
		((ns1__Job *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Status:
		((ns1__Status *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__DiagEx:
		soap_serialize___ns3__DiagEx(soap, (const struct __ns3__DiagEx *)ptr);
		break;
	case SOAP_TYPE___ns3__Diag:
		soap_serialize___ns3__Diag(soap, (const struct __ns3__Diag *)ptr);
		break;
	case SOAP_TYPE___ns3__CloseAllJobs:
		soap_serialize___ns3__CloseAllJobs(soap, (const struct __ns3__CloseAllJobs *)ptr);
		break;
	case SOAP_TYPE___ns3__CloseExpiredJobs:
		soap_serialize___ns3__CloseExpiredJobs(soap, (const struct __ns3__CloseExpiredJobs *)ptr);
		break;
	case SOAP_TYPE___ns3__GetAllJobsEx:
		soap_serialize___ns3__GetAllJobsEx(soap, (const struct __ns3__GetAllJobsEx *)ptr);
		break;
	case SOAP_TYPE___ns3__GetAllJobs:
		soap_serialize___ns3__GetAllJobs(soap, (const struct __ns3__GetAllJobs *)ptr);
		break;
	case SOAP_TYPE___ns3__GetExpiration:
		soap_serialize___ns3__GetExpiration(soap, (const struct __ns3__GetExpiration *)ptr);
		break;
	case SOAP_TYPE___ns3__BatchJobEx:
		soap_serialize___ns3__BatchJobEx(soap, (const struct __ns3__BatchJobEx *)ptr);
		break;
	case SOAP_TYPE___ns3__BatchJob:
		soap_serialize___ns3__BatchJob(soap, (const struct __ns3__BatchJob *)ptr);
		break;
	case SOAP_TYPE___ns3__CloseJob:
		soap_serialize___ns3__CloseJob(soap, (const struct __ns3__CloseJob *)ptr);
		break;
	case SOAP_TYPE___ns3__ExecuteEx:
		soap_serialize___ns3__ExecuteEx(soap, (const struct __ns3__ExecuteEx *)ptr);
		break;
	case SOAP_TYPE___ns3__Execute:
		soap_serialize___ns3__Execute(soap, (const struct __ns3__Execute *)ptr);
		break;
	case SOAP_TYPE___ns3__RenewLease:
		soap_serialize___ns3__RenewLease(soap, (const struct __ns3__RenewLease *)ptr);
		break;
	case SOAP_TYPE___ns3__OpenJobEx:
		soap_serialize___ns3__OpenJobEx(soap, (const struct __ns3__OpenJobEx *)ptr);
		break;
	case SOAP_TYPE___ns3__OpenJob:
		soap_serialize___ns3__OpenJob(soap, (const struct __ns3__OpenJob *)ptr);
		break;
	case SOAP_TYPE___ns3__GetStatus:
		soap_serialize___ns3__GetStatus(soap, (const struct __ns3__GetStatus *)ptr);
		break;
	case SOAP_TYPE___ns3__GetVersion:
		soap_serialize___ns3__GetVersion(soap, (const struct __ns3__GetVersion *)ptr);
		break;
	case SOAP_TYPE___ns3__HelloWorld:
		soap_serialize___ns3__HelloWorld(soap, (const struct __ns3__HelloWorld *)ptr);
		break;
	case SOAP_TYPE___ns2__DiagEx:
		soap_serialize___ns2__DiagEx(soap, (const struct __ns2__DiagEx *)ptr);
		break;
	case SOAP_TYPE___ns2__Diag:
		soap_serialize___ns2__Diag(soap, (const struct __ns2__Diag *)ptr);
		break;
	case SOAP_TYPE___ns2__CloseAllJobs:
		soap_serialize___ns2__CloseAllJobs(soap, (const struct __ns2__CloseAllJobs *)ptr);
		break;
	case SOAP_TYPE___ns2__CloseExpiredJobs:
		soap_serialize___ns2__CloseExpiredJobs(soap, (const struct __ns2__CloseExpiredJobs *)ptr);
		break;
	case SOAP_TYPE___ns2__GetAllJobsEx:
		soap_serialize___ns2__GetAllJobsEx(soap, (const struct __ns2__GetAllJobsEx *)ptr);
		break;
	case SOAP_TYPE___ns2__GetAllJobs:
		soap_serialize___ns2__GetAllJobs(soap, (const struct __ns2__GetAllJobs *)ptr);
		break;
	case SOAP_TYPE___ns2__GetExpiration:
		soap_serialize___ns2__GetExpiration(soap, (const struct __ns2__GetExpiration *)ptr);
		break;
	case SOAP_TYPE___ns2__BatchJobEx:
		soap_serialize___ns2__BatchJobEx(soap, (const struct __ns2__BatchJobEx *)ptr);
		break;
	case SOAP_TYPE___ns2__BatchJob:
		soap_serialize___ns2__BatchJob(soap, (const struct __ns2__BatchJob *)ptr);
		break;
	case SOAP_TYPE___ns2__CloseJob:
		soap_serialize___ns2__CloseJob(soap, (const struct __ns2__CloseJob *)ptr);
		break;
	case SOAP_TYPE___ns2__ExecuteEx:
		soap_serialize___ns2__ExecuteEx(soap, (const struct __ns2__ExecuteEx *)ptr);
		break;
	case SOAP_TYPE___ns2__Execute:
		soap_serialize___ns2__Execute(soap, (const struct __ns2__Execute *)ptr);
		break;
	case SOAP_TYPE___ns2__RenewLease:
		soap_serialize___ns2__RenewLease(soap, (const struct __ns2__RenewLease *)ptr);
		break;
	case SOAP_TYPE___ns2__OpenJobEx:
		soap_serialize___ns2__OpenJobEx(soap, (const struct __ns2__OpenJobEx *)ptr);
		break;
	case SOAP_TYPE___ns2__OpenJob:
		soap_serialize___ns2__OpenJob(soap, (const struct __ns2__OpenJob *)ptr);
		break;
	case SOAP_TYPE___ns2__GetStatus:
		soap_serialize___ns2__GetStatus(soap, (const struct __ns2__GetStatus *)ptr);
		break;
	case SOAP_TYPE___ns2__GetVersion:
		soap_serialize___ns2__GetVersion(soap, (const struct __ns2__GetVersion *)ptr);
		break;
	case SOAP_TYPE___ns2__HelloWorld:
		soap_serialize___ns2__HelloWorld(soap, (const struct __ns2__HelloWorld *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DiagExResponse:
		soap_serialize_PointerTo_ns1__DiagExResponse(soap, (_ns1__DiagExResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DiagEx:
		soap_serialize_PointerTo_ns1__DiagEx(soap, (_ns1__DiagEx *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DiagResponse:
		soap_serialize_PointerTo_ns1__DiagResponse(soap, (_ns1__DiagResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Diag:
		soap_serialize_PointerTo_ns1__Diag(soap, (_ns1__Diag *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobsResponse:
		soap_serialize_PointerTo_ns1__CloseAllJobsResponse(soap, (_ns1__CloseAllJobsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseAllJobs:
		soap_serialize_PointerTo_ns1__CloseAllJobs(soap, (_ns1__CloseAllJobs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobsResponse:
		soap_serialize_PointerTo_ns1__CloseExpiredJobsResponse(soap, (_ns1__CloseExpiredJobsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs:
		soap_serialize_PointerTo_ns1__CloseExpiredJobs(soap, (_ns1__CloseExpiredJobs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsExResponse:
		soap_serialize_PointerTo_ns1__GetAllJobsExResponse(soap, (_ns1__GetAllJobsExResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsEx:
		soap_serialize_PointerTo_ns1__GetAllJobsEx(soap, (_ns1__GetAllJobsEx *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAllJobsResponse:
		soap_serialize_PointerTo_ns1__GetAllJobsResponse(soap, (_ns1__GetAllJobsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAllJobs:
		soap_serialize_PointerTo_ns1__GetAllJobs(soap, (_ns1__GetAllJobs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetExpirationResponse:
		soap_serialize_PointerTo_ns1__GetExpirationResponse(soap, (_ns1__GetExpirationResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetExpiration:
		soap_serialize_PointerTo_ns1__GetExpiration(soap, (_ns1__GetExpiration *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__BatchJobExResponse:
		soap_serialize_PointerTo_ns1__BatchJobExResponse(soap, (_ns1__BatchJobExResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__BatchJobEx:
		soap_serialize_PointerTo_ns1__BatchJobEx(soap, (_ns1__BatchJobEx *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__BatchJobResponse:
		soap_serialize_PointerTo_ns1__BatchJobResponse(soap, (_ns1__BatchJobResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__BatchJob:
		soap_serialize_PointerTo_ns1__BatchJob(soap, (_ns1__BatchJob *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseJobResponse:
		soap_serialize_PointerTo_ns1__CloseJobResponse(soap, (_ns1__CloseJobResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CloseJob:
		soap_serialize_PointerTo_ns1__CloseJob(soap, (_ns1__CloseJob *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ExecuteExResponse:
		soap_serialize_PointerTo_ns1__ExecuteExResponse(soap, (_ns1__ExecuteExResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ExecuteEx:
		soap_serialize_PointerTo_ns1__ExecuteEx(soap, (_ns1__ExecuteEx *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ExecuteResponse:
		soap_serialize_PointerTo_ns1__ExecuteResponse(soap, (_ns1__ExecuteResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Execute:
		soap_serialize_PointerTo_ns1__Execute(soap, (_ns1__Execute *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RenewLeaseResponse:
		soap_serialize_PointerTo_ns1__RenewLeaseResponse(soap, (_ns1__RenewLeaseResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RenewLease:
		soap_serialize_PointerTo_ns1__RenewLease(soap, (_ns1__RenewLease *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenJobExResponse:
		soap_serialize_PointerTo_ns1__OpenJobExResponse(soap, (_ns1__OpenJobExResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenJobEx:
		soap_serialize_PointerTo_ns1__OpenJobEx(soap, (_ns1__OpenJobEx *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenJobResponse:
		soap_serialize_PointerTo_ns1__OpenJobResponse(soap, (_ns1__OpenJobResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__OpenJob:
		soap_serialize_PointerTo_ns1__OpenJob(soap, (_ns1__OpenJob *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStatusResponse:
		soap_serialize_PointerTo_ns1__GetStatusResponse(soap, (_ns1__GetStatusResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetStatus:
		soap_serialize_PointerTo_ns1__GetStatus(soap, (_ns1__GetStatus *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVersionResponse:
		soap_serialize_PointerTo_ns1__GetVersionResponse(soap, (_ns1__GetVersionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetVersion:
		soap_serialize_PointerTo_ns1__GetVersion(soap, (_ns1__GetVersion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__HelloWorldResponse:
		soap_serialize_PointerTo_ns1__HelloWorldResponse(soap, (_ns1__HelloWorldResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__HelloWorld:
		soap_serialize_PointerTo_ns1__HelloWorld(soap, (_ns1__HelloWorld *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfJob:
		soap_serialize_PointerTons1__ArrayOfJob(soap, (ns1__ArrayOfJob *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ScriptExecution:
		soap_serialize_PointerTons1__ScriptExecution(soap, (ns1__ScriptExecution *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Status:
		soap_serialize_PointerTons1__Status(soap, (ns1__Status *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Job:
		soap_serialize_PointerTons1__Job(soap, (ns1__Job *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__LuaValue:
		soap_serialize_PointerTons1__LuaValue(soap, (ns1__LuaValue *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfLuaValue:
		soap_serialize_PointerTons1__ArrayOfLuaValue(soap, (ns1__ArrayOfLuaValue *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Status:
		return (void*)soap_instantiate_ns1__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Job:
		return (void*)soap_instantiate_ns1__Job(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ScriptExecution:
		return (void*)soap_instantiate_ns1__ScriptExecution(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfLuaValue:
		return (void*)soap_instantiate_ns1__ArrayOfLuaValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfJob:
		return (void*)soap_instantiate_ns1__ArrayOfJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__LuaValue:
		return (void*)soap_instantiate_ns1__LuaValue(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__HelloWorld:
		return (void*)soap_instantiate__ns1__HelloWorld(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__HelloWorldResponse:
		return (void*)soap_instantiate__ns1__HelloWorldResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersion:
		return (void*)soap_instantiate__ns1__GetVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetVersionResponse:
		return (void*)soap_instantiate__ns1__GetVersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStatus:
		return (void*)soap_instantiate__ns1__GetStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStatusResponse:
		return (void*)soap_instantiate__ns1__GetStatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenJob:
		return (void*)soap_instantiate__ns1__OpenJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenJobEx:
		return (void*)soap_instantiate__ns1__OpenJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenJobResponse:
		return (void*)soap_instantiate__ns1__OpenJobResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__OpenJobExResponse:
		return (void*)soap_instantiate__ns1__OpenJobExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RenewLease:
		return (void*)soap_instantiate__ns1__RenewLease(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RenewLeaseResponse:
		return (void*)soap_instantiate__ns1__RenewLeaseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Execute:
		return (void*)soap_instantiate__ns1__Execute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ExecuteResponse:
		return (void*)soap_instantiate__ns1__ExecuteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ExecuteEx:
		return (void*)soap_instantiate__ns1__ExecuteEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ExecuteExResponse:
		return (void*)soap_instantiate__ns1__ExecuteExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseJob:
		return (void*)soap_instantiate__ns1__CloseJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseJobResponse:
		return (void*)soap_instantiate__ns1__CloseJobResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__BatchJob:
		return (void*)soap_instantiate__ns1__BatchJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__BatchJobResponse:
		return (void*)soap_instantiate__ns1__BatchJobResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__BatchJobEx:
		return (void*)soap_instantiate__ns1__BatchJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__BatchJobExResponse:
		return (void*)soap_instantiate__ns1__BatchJobExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetExpiration:
		return (void*)soap_instantiate__ns1__GetExpiration(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetExpirationResponse:
		return (void*)soap_instantiate__ns1__GetExpirationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAllJobs:
		return (void*)soap_instantiate__ns1__GetAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAllJobsResponse:
		return (void*)soap_instantiate__ns1__GetAllJobsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAllJobsEx:
		return (void*)soap_instantiate__ns1__GetAllJobsEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAllJobsExResponse:
		return (void*)soap_instantiate__ns1__GetAllJobsExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseExpiredJobs:
		return (void*)soap_instantiate__ns1__CloseExpiredJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseExpiredJobsResponse:
		return (void*)soap_instantiate__ns1__CloseExpiredJobsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseAllJobs:
		return (void*)soap_instantiate__ns1__CloseAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CloseAllJobsResponse:
		return (void*)soap_instantiate__ns1__CloseAllJobsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Diag:
		return (void*)soap_instantiate__ns1__Diag(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DiagResponse:
		return (void*)soap_instantiate__ns1__DiagResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DiagEx:
		return (void*)soap_instantiate__ns1__DiagEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DiagExResponse:
		return (void*)soap_instantiate__ns1__DiagExResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__HelloWorld:
		return (void*)soap_instantiate___ns2__HelloWorld(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetVersion:
		return (void*)soap_instantiate___ns2__GetVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetStatus:
		return (void*)soap_instantiate___ns2__GetStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__OpenJob:
		return (void*)soap_instantiate___ns2__OpenJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__OpenJobEx:
		return (void*)soap_instantiate___ns2__OpenJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__RenewLease:
		return (void*)soap_instantiate___ns2__RenewLease(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__Execute:
		return (void*)soap_instantiate___ns2__Execute(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__ExecuteEx:
		return (void*)soap_instantiate___ns2__ExecuteEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CloseJob:
		return (void*)soap_instantiate___ns2__CloseJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__BatchJob:
		return (void*)soap_instantiate___ns2__BatchJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__BatchJobEx:
		return (void*)soap_instantiate___ns2__BatchJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetExpiration:
		return (void*)soap_instantiate___ns2__GetExpiration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetAllJobs:
		return (void*)soap_instantiate___ns2__GetAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetAllJobsEx:
		return (void*)soap_instantiate___ns2__GetAllJobsEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CloseExpiredJobs:
		return (void*)soap_instantiate___ns2__CloseExpiredJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CloseAllJobs:
		return (void*)soap_instantiate___ns2__CloseAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__Diag:
		return (void*)soap_instantiate___ns2__Diag(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__DiagEx:
		return (void*)soap_instantiate___ns2__DiagEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__HelloWorld:
		return (void*)soap_instantiate___ns3__HelloWorld(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetVersion:
		return (void*)soap_instantiate___ns3__GetVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetStatus:
		return (void*)soap_instantiate___ns3__GetStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__OpenJob:
		return (void*)soap_instantiate___ns3__OpenJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__OpenJobEx:
		return (void*)soap_instantiate___ns3__OpenJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__RenewLease:
		return (void*)soap_instantiate___ns3__RenewLease(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__Execute:
		return (void*)soap_instantiate___ns3__Execute(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__ExecuteEx:
		return (void*)soap_instantiate___ns3__ExecuteEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CloseJob:
		return (void*)soap_instantiate___ns3__CloseJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__BatchJob:
		return (void*)soap_instantiate___ns3__BatchJob(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__BatchJobEx:
		return (void*)soap_instantiate___ns3__BatchJobEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetExpiration:
		return (void*)soap_instantiate___ns3__GetExpiration(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetAllJobs:
		return (void*)soap_instantiate___ns3__GetAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetAllJobsEx:
		return (void*)soap_instantiate___ns3__GetAllJobsEx(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CloseExpiredJobs:
		return (void*)soap_instantiate___ns3__CloseExpiredJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CloseAllJobs:
		return (void*)soap_instantiate___ns3__CloseAllJobs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__Diag:
		return (void*)soap_instantiate___ns3__Diag(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DiagEx:
		return (void*)soap_instantiate___ns3__DiagEx(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__Job(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Status:
		if (p->size < 0)
			delete (ns1__Status*)p->ptr;
		else
			delete[] (ns1__Status*)p->ptr;
		break;
	case SOAP_TYPE_ns1__Job:
		if (p->size < 0)
			delete (ns1__Job*)p->ptr;
		else
			delete[] (ns1__Job*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ScriptExecution:
		if (p->size < 0)
			delete (ns1__ScriptExecution*)p->ptr;
		else
			delete[] (ns1__ScriptExecution*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfLuaValue:
		if (p->size < 0)
			delete (ns1__ArrayOfLuaValue*)p->ptr;
		else
			delete[] (ns1__ArrayOfLuaValue*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfJob:
		if (p->size < 0)
			delete (ns1__ArrayOfJob*)p->ptr;
		else
			delete[] (ns1__ArrayOfJob*)p->ptr;
		break;
	case SOAP_TYPE_ns1__LuaValue:
		if (p->size < 0)
			delete (ns1__LuaValue*)p->ptr;
		else
			delete[] (ns1__LuaValue*)p->ptr;
		break;
	case SOAP_TYPE__ns1__HelloWorld:
		if (p->size < 0)
			delete (_ns1__HelloWorld*)p->ptr;
		else
			delete[] (_ns1__HelloWorld*)p->ptr;
		break;
	case SOAP_TYPE__ns1__HelloWorldResponse:
		if (p->size < 0)
			delete (_ns1__HelloWorldResponse*)p->ptr;
		else
			delete[] (_ns1__HelloWorldResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetVersion:
		if (p->size < 0)
			delete (_ns1__GetVersion*)p->ptr;
		else
			delete[] (_ns1__GetVersion*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetVersionResponse:
		if (p->size < 0)
			delete (_ns1__GetVersionResponse*)p->ptr;
		else
			delete[] (_ns1__GetVersionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetStatus:
		if (p->size < 0)
			delete (_ns1__GetStatus*)p->ptr;
		else
			delete[] (_ns1__GetStatus*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetStatusResponse:
		if (p->size < 0)
			delete (_ns1__GetStatusResponse*)p->ptr;
		else
			delete[] (_ns1__GetStatusResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__OpenJob:
		if (p->size < 0)
			delete (_ns1__OpenJob*)p->ptr;
		else
			delete[] (_ns1__OpenJob*)p->ptr;
		break;
	case SOAP_TYPE__ns1__OpenJobEx:
		if (p->size < 0)
			delete (_ns1__OpenJobEx*)p->ptr;
		else
			delete[] (_ns1__OpenJobEx*)p->ptr;
		break;
	case SOAP_TYPE__ns1__OpenJobResponse:
		if (p->size < 0)
			delete (_ns1__OpenJobResponse*)p->ptr;
		else
			delete[] (_ns1__OpenJobResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__OpenJobExResponse:
		if (p->size < 0)
			delete (_ns1__OpenJobExResponse*)p->ptr;
		else
			delete[] (_ns1__OpenJobExResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RenewLease:
		if (p->size < 0)
			delete (_ns1__RenewLease*)p->ptr;
		else
			delete[] (_ns1__RenewLease*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RenewLeaseResponse:
		if (p->size < 0)
			delete (_ns1__RenewLeaseResponse*)p->ptr;
		else
			delete[] (_ns1__RenewLeaseResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Execute:
		if (p->size < 0)
			delete (_ns1__Execute*)p->ptr;
		else
			delete[] (_ns1__Execute*)p->ptr;
		break;
	case SOAP_TYPE__ns1__ExecuteResponse:
		if (p->size < 0)
			delete (_ns1__ExecuteResponse*)p->ptr;
		else
			delete[] (_ns1__ExecuteResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__ExecuteEx:
		if (p->size < 0)
			delete (_ns1__ExecuteEx*)p->ptr;
		else
			delete[] (_ns1__ExecuteEx*)p->ptr;
		break;
	case SOAP_TYPE__ns1__ExecuteExResponse:
		if (p->size < 0)
			delete (_ns1__ExecuteExResponse*)p->ptr;
		else
			delete[] (_ns1__ExecuteExResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseJob:
		if (p->size < 0)
			delete (_ns1__CloseJob*)p->ptr;
		else
			delete[] (_ns1__CloseJob*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseJobResponse:
		if (p->size < 0)
			delete (_ns1__CloseJobResponse*)p->ptr;
		else
			delete[] (_ns1__CloseJobResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__BatchJob:
		if (p->size < 0)
			delete (_ns1__BatchJob*)p->ptr;
		else
			delete[] (_ns1__BatchJob*)p->ptr;
		break;
	case SOAP_TYPE__ns1__BatchJobResponse:
		if (p->size < 0)
			delete (_ns1__BatchJobResponse*)p->ptr;
		else
			delete[] (_ns1__BatchJobResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__BatchJobEx:
		if (p->size < 0)
			delete (_ns1__BatchJobEx*)p->ptr;
		else
			delete[] (_ns1__BatchJobEx*)p->ptr;
		break;
	case SOAP_TYPE__ns1__BatchJobExResponse:
		if (p->size < 0)
			delete (_ns1__BatchJobExResponse*)p->ptr;
		else
			delete[] (_ns1__BatchJobExResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetExpiration:
		if (p->size < 0)
			delete (_ns1__GetExpiration*)p->ptr;
		else
			delete[] (_ns1__GetExpiration*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetExpirationResponse:
		if (p->size < 0)
			delete (_ns1__GetExpirationResponse*)p->ptr;
		else
			delete[] (_ns1__GetExpirationResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAllJobs:
		if (p->size < 0)
			delete (_ns1__GetAllJobs*)p->ptr;
		else
			delete[] (_ns1__GetAllJobs*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAllJobsResponse:
		if (p->size < 0)
			delete (_ns1__GetAllJobsResponse*)p->ptr;
		else
			delete[] (_ns1__GetAllJobsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAllJobsEx:
		if (p->size < 0)
			delete (_ns1__GetAllJobsEx*)p->ptr;
		else
			delete[] (_ns1__GetAllJobsEx*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAllJobsExResponse:
		if (p->size < 0)
			delete (_ns1__GetAllJobsExResponse*)p->ptr;
		else
			delete[] (_ns1__GetAllJobsExResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseExpiredJobs:
		if (p->size < 0)
			delete (_ns1__CloseExpiredJobs*)p->ptr;
		else
			delete[] (_ns1__CloseExpiredJobs*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseExpiredJobsResponse:
		if (p->size < 0)
			delete (_ns1__CloseExpiredJobsResponse*)p->ptr;
		else
			delete[] (_ns1__CloseExpiredJobsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseAllJobs:
		if (p->size < 0)
			delete (_ns1__CloseAllJobs*)p->ptr;
		else
			delete[] (_ns1__CloseAllJobs*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CloseAllJobsResponse:
		if (p->size < 0)
			delete (_ns1__CloseAllJobsResponse*)p->ptr;
		else
			delete[] (_ns1__CloseAllJobsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Diag:
		if (p->size < 0)
			delete (_ns1__Diag*)p->ptr;
		else
			delete[] (_ns1__Diag*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DiagResponse:
		if (p->size < 0)
			delete (_ns1__DiagResponse*)p->ptr;
		else
			delete[] (_ns1__DiagResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DiagEx:
		if (p->size < 0)
			delete (_ns1__DiagEx*)p->ptr;
		else
			delete[] (_ns1__DiagEx*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DiagExResponse:
		if (p->size < 0)
			delete (_ns1__DiagExResponse*)p->ptr;
		else
			delete[] (_ns1__DiagExResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns2__HelloWorld:
		if (p->size < 0)
			delete (struct __ns2__HelloWorld*)p->ptr;
		else
			delete[] (struct __ns2__HelloWorld*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetVersion:
		if (p->size < 0)
			delete (struct __ns2__GetVersion*)p->ptr;
		else
			delete[] (struct __ns2__GetVersion*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetStatus:
		if (p->size < 0)
			delete (struct __ns2__GetStatus*)p->ptr;
		else
			delete[] (struct __ns2__GetStatus*)p->ptr;
		break;
	case SOAP_TYPE___ns2__OpenJob:
		if (p->size < 0)
			delete (struct __ns2__OpenJob*)p->ptr;
		else
			delete[] (struct __ns2__OpenJob*)p->ptr;
		break;
	case SOAP_TYPE___ns2__OpenJobEx:
		if (p->size < 0)
			delete (struct __ns2__OpenJobEx*)p->ptr;
		else
			delete[] (struct __ns2__OpenJobEx*)p->ptr;
		break;
	case SOAP_TYPE___ns2__RenewLease:
		if (p->size < 0)
			delete (struct __ns2__RenewLease*)p->ptr;
		else
			delete[] (struct __ns2__RenewLease*)p->ptr;
		break;
	case SOAP_TYPE___ns2__Execute:
		if (p->size < 0)
			delete (struct __ns2__Execute*)p->ptr;
		else
			delete[] (struct __ns2__Execute*)p->ptr;
		break;
	case SOAP_TYPE___ns2__ExecuteEx:
		if (p->size < 0)
			delete (struct __ns2__ExecuteEx*)p->ptr;
		else
			delete[] (struct __ns2__ExecuteEx*)p->ptr;
		break;
	case SOAP_TYPE___ns2__CloseJob:
		if (p->size < 0)
			delete (struct __ns2__CloseJob*)p->ptr;
		else
			delete[] (struct __ns2__CloseJob*)p->ptr;
		break;
	case SOAP_TYPE___ns2__BatchJob:
		if (p->size < 0)
			delete (struct __ns2__BatchJob*)p->ptr;
		else
			delete[] (struct __ns2__BatchJob*)p->ptr;
		break;
	case SOAP_TYPE___ns2__BatchJobEx:
		if (p->size < 0)
			delete (struct __ns2__BatchJobEx*)p->ptr;
		else
			delete[] (struct __ns2__BatchJobEx*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetExpiration:
		if (p->size < 0)
			delete (struct __ns2__GetExpiration*)p->ptr;
		else
			delete[] (struct __ns2__GetExpiration*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetAllJobs:
		if (p->size < 0)
			delete (struct __ns2__GetAllJobs*)p->ptr;
		else
			delete[] (struct __ns2__GetAllJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetAllJobsEx:
		if (p->size < 0)
			delete (struct __ns2__GetAllJobsEx*)p->ptr;
		else
			delete[] (struct __ns2__GetAllJobsEx*)p->ptr;
		break;
	case SOAP_TYPE___ns2__CloseExpiredJobs:
		if (p->size < 0)
			delete (struct __ns2__CloseExpiredJobs*)p->ptr;
		else
			delete[] (struct __ns2__CloseExpiredJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns2__CloseAllJobs:
		if (p->size < 0)
			delete (struct __ns2__CloseAllJobs*)p->ptr;
		else
			delete[] (struct __ns2__CloseAllJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns2__Diag:
		if (p->size < 0)
			delete (struct __ns2__Diag*)p->ptr;
		else
			delete[] (struct __ns2__Diag*)p->ptr;
		break;
	case SOAP_TYPE___ns2__DiagEx:
		if (p->size < 0)
			delete (struct __ns2__DiagEx*)p->ptr;
		else
			delete[] (struct __ns2__DiagEx*)p->ptr;
		break;
	case SOAP_TYPE___ns3__HelloWorld:
		if (p->size < 0)
			delete (struct __ns3__HelloWorld*)p->ptr;
		else
			delete[] (struct __ns3__HelloWorld*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetVersion:
		if (p->size < 0)
			delete (struct __ns3__GetVersion*)p->ptr;
		else
			delete[] (struct __ns3__GetVersion*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetStatus:
		if (p->size < 0)
			delete (struct __ns3__GetStatus*)p->ptr;
		else
			delete[] (struct __ns3__GetStatus*)p->ptr;
		break;
	case SOAP_TYPE___ns3__OpenJob:
		if (p->size < 0)
			delete (struct __ns3__OpenJob*)p->ptr;
		else
			delete[] (struct __ns3__OpenJob*)p->ptr;
		break;
	case SOAP_TYPE___ns3__OpenJobEx:
		if (p->size < 0)
			delete (struct __ns3__OpenJobEx*)p->ptr;
		else
			delete[] (struct __ns3__OpenJobEx*)p->ptr;
		break;
	case SOAP_TYPE___ns3__RenewLease:
		if (p->size < 0)
			delete (struct __ns3__RenewLease*)p->ptr;
		else
			delete[] (struct __ns3__RenewLease*)p->ptr;
		break;
	case SOAP_TYPE___ns3__Execute:
		if (p->size < 0)
			delete (struct __ns3__Execute*)p->ptr;
		else
			delete[] (struct __ns3__Execute*)p->ptr;
		break;
	case SOAP_TYPE___ns3__ExecuteEx:
		if (p->size < 0)
			delete (struct __ns3__ExecuteEx*)p->ptr;
		else
			delete[] (struct __ns3__ExecuteEx*)p->ptr;
		break;
	case SOAP_TYPE___ns3__CloseJob:
		if (p->size < 0)
			delete (struct __ns3__CloseJob*)p->ptr;
		else
			delete[] (struct __ns3__CloseJob*)p->ptr;
		break;
	case SOAP_TYPE___ns3__BatchJob:
		if (p->size < 0)
			delete (struct __ns3__BatchJob*)p->ptr;
		else
			delete[] (struct __ns3__BatchJob*)p->ptr;
		break;
	case SOAP_TYPE___ns3__BatchJobEx:
		if (p->size < 0)
			delete (struct __ns3__BatchJobEx*)p->ptr;
		else
			delete[] (struct __ns3__BatchJobEx*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetExpiration:
		if (p->size < 0)
			delete (struct __ns3__GetExpiration*)p->ptr;
		else
			delete[] (struct __ns3__GetExpiration*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetAllJobs:
		if (p->size < 0)
			delete (struct __ns3__GetAllJobs*)p->ptr;
		else
			delete[] (struct __ns3__GetAllJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetAllJobsEx:
		if (p->size < 0)
			delete (struct __ns3__GetAllJobsEx*)p->ptr;
		else
			delete[] (struct __ns3__GetAllJobsEx*)p->ptr;
		break;
	case SOAP_TYPE___ns3__CloseExpiredJobs:
		if (p->size < 0)
			delete (struct __ns3__CloseExpiredJobs*)p->ptr;
		else
			delete[] (struct __ns3__CloseExpiredJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns3__CloseAllJobs:
		if (p->size < 0)
			delete (struct __ns3__CloseAllJobs*)p->ptr;
		else
			delete[] (struct __ns3__CloseAllJobs*)p->ptr;
		break;
	case SOAP_TYPE___ns3__Diag:
		if (p->size < 0)
			delete (struct __ns3__Diag*)p->ptr;
		else
			delete[] (struct __ns3__Diag*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DiagEx:
		if (p->size < 0)
			delete (struct __ns3__DiagEx*)p->ptr;
		else
			delete[] (struct __ns3__DiagEx*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job:
		if (p->size < 0)
			delete (std::vector<ns1__Job * >*)p->ptr;
		else
			delete[] (std::vector<ns1__Job * >*)p->ptr;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue:
		if (p->size < 0)
			delete (std::vector<ns1__LuaValue * >*)p->ptr;
		else
			delete[] (std::vector<ns1__LuaValue * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__Job * >*)p)[len] = *(ns1__Job **)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__LuaValue * >*)p)[len] = *(ns1__LuaValue **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__LuaType(struct soap *soap, enum ns1__LuaType *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__LuaType
	*a = SOAP_DEFAULT_ns1__LuaType;
#else
	*a = (enum ns1__LuaType)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__LuaType(struct soap *soap, const enum ns1__LuaType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns1__LuaType);
	if (soap_out_ns1__LuaType(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_ns1__LuaType[] =
{	{ (long)ns1__LuaType__LUA_USCORETNIL, "LUA_TNIL" },
	{ (long)ns1__LuaType__LUA_USCORETBOOLEAN, "LUA_TBOOLEAN" },
	{ (long)ns1__LuaType__LUA_USCORETNUMBER, "LUA_TNUMBER" },
	{ (long)ns1__LuaType__LUA_USCORETSTRING, "LUA_TSTRING" },
	{ (long)ns1__LuaType__LUA_USCORETTABLE, "LUA_TTABLE" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__LuaType2s(struct soap *soap, enum ns1__LuaType n)
{	const char *s = soap_code_str(soap_codes_ns1__LuaType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LuaType(struct soap *soap, const char *tag, int id, const enum ns1__LuaType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LuaType), type) || soap_send(soap, soap_ns1__LuaType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 enum ns1__LuaType * SOAP_FMAC4 soap_get_ns1__LuaType(struct soap *soap, enum ns1__LuaType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LuaType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__LuaType(struct soap *soap, const char *s, enum ns1__LuaType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_ns1__LuaType, s);
	if (map)
		*a = (enum ns1__LuaType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 4)))
			return soap->error = SOAP_TYPE;
		*a = (enum ns1__LuaType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum ns1__LuaType * SOAP_FMAC4 soap_in_ns1__LuaType(struct soap *soap, const char *tag, enum ns1__LuaType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum ns1__LuaType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LuaType, sizeof(enum ns1__LuaType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2ns1__LuaType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum ns1__LuaType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LuaType, 0, sizeof(enum ns1__LuaType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__DiagExResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DiagExResponse::DiagExResult = NULL;
	/* transient soap skipped */
}

void _ns1__DiagExResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->_ns1__DiagExResponse::DiagExResult);
	/* transient soap skipped */
}

int _ns1__DiagExResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DiagExResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DiagExResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DiagExResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagExResponse(struct soap *soap, const char *tag, int id, const _ns1__DiagExResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DiagExResponse), type))
		return soap->error;
	if (a->DiagExResult)
		soap_element_result(soap, "ns1:DiagExResult");
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:DiagExResult", -1, &(a->_ns1__DiagExResponse::DiagExResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DiagExResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DiagExResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DiagExResponse * SOAP_FMAC4 soap_get__ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DiagExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DiagExResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DiagExResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DiagExResponse * SOAP_FMAC4 soap_in__ns1__DiagExResponse(struct soap *soap, const char *tag, _ns1__DiagExResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DiagExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DiagExResponse, sizeof(_ns1__DiagExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DiagExResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DiagExResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_DiagExResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DiagExResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:DiagExResult", &(a->_ns1__DiagExResponse::DiagExResult), "ns1:ArrayOfLuaValue"))
				{	soap_flag_DiagExResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DiagExResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DiagExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DiagExResponse, 0, sizeof(_ns1__DiagExResponse), 0, soap_copy__ns1__DiagExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DiagExResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DiagExResponse * SOAP_FMAC6 soap_new__ns1__DiagExResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DiagExResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DiagExResponse * SOAP_FMAC4 soap_instantiate__ns1__DiagExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DiagExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DiagExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DiagExResponse;
		if (size)
			*size = sizeof(_ns1__DiagExResponse);
		((_ns1__DiagExResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DiagExResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DiagExResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DiagExResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DiagExResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DiagExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DiagExResponse %p -> %p\n", q, p));
	*(_ns1__DiagExResponse*)p = *(_ns1__DiagExResponse*)q;
}

void _ns1__DiagEx::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DiagEx::type);
	this->_ns1__DiagEx::jobID = NULL;
	/* transient soap skipped */
}

void _ns1__DiagEx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DiagEx::jobID);
	/* transient soap skipped */
}

int _ns1__DiagEx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DiagEx);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DiagEx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DiagEx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagEx(struct soap *soap, const char *tag, int id, const _ns1__DiagEx *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DiagEx), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:type", -1, &(a->_ns1__DiagEx::type), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:jobID", -1, &(a->_ns1__DiagEx::jobID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DiagEx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DiagEx(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DiagEx * SOAP_FMAC4 soap_get__ns1__DiagEx(struct soap *soap, _ns1__DiagEx *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DiagEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DiagEx::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DiagEx(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DiagEx * SOAP_FMAC4 soap_in__ns1__DiagEx(struct soap *soap, const char *tag, _ns1__DiagEx *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DiagEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DiagEx, sizeof(_ns1__DiagEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DiagEx)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DiagEx *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_type1 = 1, soap_flag_jobID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:type", &(a->_ns1__DiagEx::type), "xsd:int"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:jobID", &(a->_ns1__DiagEx::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DiagEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DiagEx, 0, sizeof(_ns1__DiagEx), 0, soap_copy__ns1__DiagEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DiagEx * SOAP_FMAC6 soap_new__ns1__DiagEx(struct soap *soap, int n)
{	return soap_instantiate__ns1__DiagEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DiagEx(struct soap *soap, _ns1__DiagEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DiagEx * SOAP_FMAC4 soap_instantiate__ns1__DiagEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DiagEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DiagEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DiagEx;
		if (size)
			*size = sizeof(_ns1__DiagEx);
		((_ns1__DiagEx*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DiagEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DiagEx);
		for (int i = 0; i < n; i++)
			((_ns1__DiagEx*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DiagEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DiagEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DiagEx %p -> %p\n", q, p));
	*(_ns1__DiagEx*)p = *(_ns1__DiagEx*)q;
}

void _ns1__DiagResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__DiagResponse::DiagResult);
	/* transient soap skipped */
}

void _ns1__DiagResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__DiagResponse::DiagResult);
	/* transient soap skipped */
}

int _ns1__DiagResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DiagResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DiagResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DiagResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiagResponse(struct soap *soap, const char *tag, int id, const _ns1__DiagResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DiagResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:DiagResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:DiagResult", -1, &(a->_ns1__DiagResponse::DiagResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DiagResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DiagResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DiagResponse * SOAP_FMAC4 soap_get__ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DiagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DiagResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DiagResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DiagResponse * SOAP_FMAC4 soap_in__ns1__DiagResponse(struct soap *soap, const char *tag, _ns1__DiagResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DiagResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DiagResponse, sizeof(_ns1__DiagResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DiagResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DiagResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:DiagResult", &(a->_ns1__DiagResponse::DiagResult), "ns1:LuaValue"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:DiagResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DiagResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DiagResponse, 0, sizeof(_ns1__DiagResponse), 0, soap_copy__ns1__DiagResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DiagResponse * SOAP_FMAC6 soap_new__ns1__DiagResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DiagResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DiagResponse * SOAP_FMAC4 soap_instantiate__ns1__DiagResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DiagResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DiagResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DiagResponse;
		if (size)
			*size = sizeof(_ns1__DiagResponse);
		((_ns1__DiagResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DiagResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DiagResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DiagResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DiagResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DiagResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DiagResponse %p -> %p\n", q, p));
	*(_ns1__DiagResponse*)p = *(_ns1__DiagResponse*)q;
}

void _ns1__Diag::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__Diag::type);
	this->_ns1__Diag::jobID = NULL;
	/* transient soap skipped */
}

void _ns1__Diag::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Diag::jobID);
	/* transient soap skipped */
}

int _ns1__Diag::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Diag);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Diag::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Diag(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Diag(struct soap *soap, const char *tag, int id, const _ns1__Diag *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Diag), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:type", -1, &(a->_ns1__Diag::type), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:jobID", -1, &(a->_ns1__Diag::jobID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Diag::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Diag(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Diag * SOAP_FMAC4 soap_get__ns1__Diag(struct soap *soap, _ns1__Diag *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Diag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__Diag::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Diag(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Diag * SOAP_FMAC4 soap_in__ns1__Diag(struct soap *soap, const char *tag, _ns1__Diag *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Diag *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Diag, sizeof(_ns1__Diag), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Diag)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Diag *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_type1 = 1, soap_flag_jobID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:type", &(a->_ns1__Diag::type), "xsd:int"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:jobID", &(a->_ns1__Diag::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Diag *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Diag, 0, sizeof(_ns1__Diag), 0, soap_copy__ns1__Diag);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__Diag * SOAP_FMAC6 soap_new__ns1__Diag(struct soap *soap, int n)
{	return soap_instantiate__ns1__Diag(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__Diag(struct soap *soap, _ns1__Diag *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__Diag * SOAP_FMAC4 soap_instantiate__ns1__Diag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Diag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Diag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Diag;
		if (size)
			*size = sizeof(_ns1__Diag);
		((_ns1__Diag*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Diag[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Diag);
		for (int i = 0; i < n; i++)
			((_ns1__Diag*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Diag*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Diag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Diag %p -> %p\n", q, p));
	*(_ns1__Diag*)p = *(_ns1__Diag*)q;
}

void _ns1__CloseAllJobsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CloseAllJobsResponse::CloseAllJobsResult);
	/* transient soap skipped */
}

void _ns1__CloseAllJobsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CloseAllJobsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseAllJobsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseAllJobsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseAllJobsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseAllJobsResponse(struct soap *soap, const char *tag, int id, const _ns1__CloseAllJobsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseAllJobsResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:CloseAllJobsResult");
	if (soap_out_int(soap, "ns1:CloseAllJobsResult", -1, &(a->_ns1__CloseAllJobsResponse::CloseAllJobsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseAllJobsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseAllJobsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseAllJobsResponse * SOAP_FMAC4 soap_get__ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseAllJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseAllJobsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseAllJobsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseAllJobsResponse * SOAP_FMAC4 soap_in__ns1__CloseAllJobsResponse(struct soap *soap, const char *tag, _ns1__CloseAllJobsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseAllJobsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseAllJobsResponse, sizeof(_ns1__CloseAllJobsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseAllJobsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseAllJobsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CloseAllJobsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CloseAllJobsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:CloseAllJobsResult", &(a->_ns1__CloseAllJobsResponse::CloseAllJobsResult), "xsd:int"))
				{	soap_flag_CloseAllJobsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CloseAllJobsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseAllJobsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseAllJobsResponse, 0, sizeof(_ns1__CloseAllJobsResponse), 0, soap_copy__ns1__CloseAllJobsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CloseAllJobsResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseAllJobsResponse * SOAP_FMAC6 soap_new__ns1__CloseAllJobsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseAllJobsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseAllJobsResponse * SOAP_FMAC4 soap_instantiate__ns1__CloseAllJobsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseAllJobsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseAllJobsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseAllJobsResponse;
		if (size)
			*size = sizeof(_ns1__CloseAllJobsResponse);
		((_ns1__CloseAllJobsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseAllJobsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseAllJobsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CloseAllJobsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseAllJobsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseAllJobsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseAllJobsResponse %p -> %p\n", q, p));
	*(_ns1__CloseAllJobsResponse*)p = *(_ns1__CloseAllJobsResponse*)q;
}

void _ns1__CloseAllJobs::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__CloseAllJobs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CloseAllJobs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseAllJobs);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseAllJobs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseAllJobs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseAllJobs(struct soap *soap, const char *tag, int id, const _ns1__CloseAllJobs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseAllJobs), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseAllJobs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseAllJobs(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseAllJobs * SOAP_FMAC4 soap_get__ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseAllJobs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseAllJobs(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseAllJobs * SOAP_FMAC4 soap_in__ns1__CloseAllJobs(struct soap *soap, const char *tag, _ns1__CloseAllJobs *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseAllJobs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseAllJobs, sizeof(_ns1__CloseAllJobs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseAllJobs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseAllJobs *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseAllJobs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseAllJobs, 0, sizeof(_ns1__CloseAllJobs), 0, soap_copy__ns1__CloseAllJobs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseAllJobs * SOAP_FMAC6 soap_new__ns1__CloseAllJobs(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseAllJobs * SOAP_FMAC4 soap_instantiate__ns1__CloseAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseAllJobs;
		if (size)
			*size = sizeof(_ns1__CloseAllJobs);
		((_ns1__CloseAllJobs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseAllJobs);
		for (int i = 0; i < n; i++)
			((_ns1__CloseAllJobs*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseAllJobs %p -> %p\n", q, p));
	*(_ns1__CloseAllJobs*)p = *(_ns1__CloseAllJobs*)q;
}

void _ns1__CloseExpiredJobsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__CloseExpiredJobsResponse::CloseExpiredJobsResult);
	/* transient soap skipped */
}

void _ns1__CloseExpiredJobsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CloseExpiredJobsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseExpiredJobsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseExpiredJobsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseExpiredJobsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseExpiredJobsResponse(struct soap *soap, const char *tag, int id, const _ns1__CloseExpiredJobsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseExpiredJobsResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:CloseExpiredJobsResult");
	if (soap_out_int(soap, "ns1:CloseExpiredJobsResult", -1, &(a->_ns1__CloseExpiredJobsResponse::CloseExpiredJobsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseExpiredJobsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseExpiredJobsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobsResponse * SOAP_FMAC4 soap_get__ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseExpiredJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseExpiredJobsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseExpiredJobsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobsResponse * SOAP_FMAC4 soap_in__ns1__CloseExpiredJobsResponse(struct soap *soap, const char *tag, _ns1__CloseExpiredJobsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseExpiredJobsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseExpiredJobsResponse, sizeof(_ns1__CloseExpiredJobsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseExpiredJobsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseExpiredJobsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CloseExpiredJobsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CloseExpiredJobsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:CloseExpiredJobsResult", &(a->_ns1__CloseExpiredJobsResponse::CloseExpiredJobsResult), "xsd:int"))
				{	soap_flag_CloseExpiredJobsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CloseExpiredJobsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseExpiredJobsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseExpiredJobsResponse, 0, sizeof(_ns1__CloseExpiredJobsResponse), 0, soap_copy__ns1__CloseExpiredJobsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CloseExpiredJobsResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseExpiredJobsResponse * SOAP_FMAC6 soap_new__ns1__CloseExpiredJobsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseExpiredJobsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseExpiredJobsResponse * SOAP_FMAC4 soap_instantiate__ns1__CloseExpiredJobsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseExpiredJobsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseExpiredJobsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseExpiredJobsResponse;
		if (size)
			*size = sizeof(_ns1__CloseExpiredJobsResponse);
		((_ns1__CloseExpiredJobsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseExpiredJobsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseExpiredJobsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CloseExpiredJobsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseExpiredJobsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseExpiredJobsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseExpiredJobsResponse %p -> %p\n", q, p));
	*(_ns1__CloseExpiredJobsResponse*)p = *(_ns1__CloseExpiredJobsResponse*)q;
}

void _ns1__CloseExpiredJobs::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__CloseExpiredJobs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CloseExpiredJobs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseExpiredJobs);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseExpiredJobs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseExpiredJobs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseExpiredJobs(struct soap *soap, const char *tag, int id, const _ns1__CloseExpiredJobs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseExpiredJobs), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseExpiredJobs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseExpiredJobs(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobs * SOAP_FMAC4 soap_get__ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseExpiredJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseExpiredJobs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseExpiredJobs(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobs * SOAP_FMAC4 soap_in__ns1__CloseExpiredJobs(struct soap *soap, const char *tag, _ns1__CloseExpiredJobs *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseExpiredJobs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseExpiredJobs, sizeof(_ns1__CloseExpiredJobs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseExpiredJobs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseExpiredJobs *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseExpiredJobs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseExpiredJobs, 0, sizeof(_ns1__CloseExpiredJobs), 0, soap_copy__ns1__CloseExpiredJobs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseExpiredJobs * SOAP_FMAC6 soap_new__ns1__CloseExpiredJobs(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseExpiredJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseExpiredJobs * SOAP_FMAC4 soap_instantiate__ns1__CloseExpiredJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseExpiredJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseExpiredJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseExpiredJobs;
		if (size)
			*size = sizeof(_ns1__CloseExpiredJobs);
		((_ns1__CloseExpiredJobs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseExpiredJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseExpiredJobs);
		for (int i = 0; i < n; i++)
			((_ns1__CloseExpiredJobs*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseExpiredJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseExpiredJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseExpiredJobs %p -> %p\n", q, p));
	*(_ns1__CloseExpiredJobs*)p = *(_ns1__CloseExpiredJobs*)q;
}

void _ns1__GetAllJobsExResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetAllJobsExResponse::GetAllJobsExResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetAllJobsExResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfJob(soap, &this->_ns1__GetAllJobsExResponse::GetAllJobsExResult);
	/* transient soap skipped */
}

int _ns1__GetAllJobsExResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAllJobsExResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAllJobsExResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAllJobsExResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsExResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAllJobsExResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAllJobsExResponse), type))
		return soap->error;
	if (a->GetAllJobsExResult)
		soap_element_result(soap, "ns1:GetAllJobsExResult");
	if (soap_out_PointerTons1__ArrayOfJob(soap, "ns1:GetAllJobsExResult", -1, &(a->_ns1__GetAllJobsExResponse::GetAllJobsExResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAllJobsExResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAllJobsExResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAllJobsExResponse * SOAP_FMAC4 soap_get__ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAllJobsExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAllJobsExResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAllJobsExResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAllJobsExResponse * SOAP_FMAC4 soap_in__ns1__GetAllJobsExResponse(struct soap *soap, const char *tag, _ns1__GetAllJobsExResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAllJobsExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAllJobsExResponse, sizeof(_ns1__GetAllJobsExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAllJobsExResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAllJobsExResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetAllJobsExResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllJobsExResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfJob(soap, "ns1:GetAllJobsExResult", &(a->_ns1__GetAllJobsExResponse::GetAllJobsExResult), "ns1:ArrayOfJob"))
				{	soap_flag_GetAllJobsExResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetAllJobsExResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAllJobsExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAllJobsExResponse, 0, sizeof(_ns1__GetAllJobsExResponse), 0, soap_copy__ns1__GetAllJobsExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetAllJobsExResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAllJobsExResponse * SOAP_FMAC6 soap_new__ns1__GetAllJobsExResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAllJobsExResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAllJobsExResponse * SOAP_FMAC4 soap_instantiate__ns1__GetAllJobsExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAllJobsExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAllJobsExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAllJobsExResponse;
		if (size)
			*size = sizeof(_ns1__GetAllJobsExResponse);
		((_ns1__GetAllJobsExResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAllJobsExResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAllJobsExResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetAllJobsExResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAllJobsExResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAllJobsExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAllJobsExResponse %p -> %p\n", q, p));
	*(_ns1__GetAllJobsExResponse*)p = *(_ns1__GetAllJobsExResponse*)q;
}

void _ns1__GetAllJobsEx::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetAllJobsEx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetAllJobsEx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAllJobsEx);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAllJobsEx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAllJobsEx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsEx(struct soap *soap, const char *tag, int id, const _ns1__GetAllJobsEx *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAllJobsEx), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAllJobsEx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAllJobsEx(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAllJobsEx * SOAP_FMAC4 soap_get__ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAllJobsEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAllJobsEx::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAllJobsEx(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAllJobsEx * SOAP_FMAC4 soap_in__ns1__GetAllJobsEx(struct soap *soap, const char *tag, _ns1__GetAllJobsEx *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAllJobsEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAllJobsEx, sizeof(_ns1__GetAllJobsEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAllJobsEx)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAllJobsEx *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAllJobsEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAllJobsEx, 0, sizeof(_ns1__GetAllJobsEx), 0, soap_copy__ns1__GetAllJobsEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAllJobsEx * SOAP_FMAC6 soap_new__ns1__GetAllJobsEx(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAllJobsEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAllJobsEx * SOAP_FMAC4 soap_instantiate__ns1__GetAllJobsEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAllJobsEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAllJobsEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAllJobsEx;
		if (size)
			*size = sizeof(_ns1__GetAllJobsEx);
		((_ns1__GetAllJobsEx*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAllJobsEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAllJobsEx);
		for (int i = 0; i < n; i++)
			((_ns1__GetAllJobsEx*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAllJobsEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAllJobsEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAllJobsEx %p -> %p\n", q, p));
	*(_ns1__GetAllJobsEx*)p = *(_ns1__GetAllJobsEx*)q;
}

void _ns1__GetAllJobsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__Job(soap, &this->_ns1__GetAllJobsResponse::GetAllJobsResult);
	/* transient soap skipped */
}

void _ns1__GetAllJobsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__Job(soap, &this->_ns1__GetAllJobsResponse::GetAllJobsResult);
	/* transient soap skipped */
}

int _ns1__GetAllJobsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAllJobsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAllJobsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAllJobsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAllJobsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAllJobsResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetAllJobsResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__Job(soap, "ns1:GetAllJobsResult", -1, &(a->_ns1__GetAllJobsResponse::GetAllJobsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAllJobsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAllJobsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAllJobsResponse * SOAP_FMAC4 soap_get__ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAllJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAllJobsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAllJobsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAllJobsResponse * SOAP_FMAC4 soap_in__ns1__GetAllJobsResponse(struct soap *soap, const char *tag, _ns1__GetAllJobsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAllJobsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAllJobsResponse, sizeof(_ns1__GetAllJobsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAllJobsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAllJobsResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__Job(soap, "ns1:GetAllJobsResult", &(a->_ns1__GetAllJobsResponse::GetAllJobsResult), "ns1:Job"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetAllJobsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAllJobsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAllJobsResponse, 0, sizeof(_ns1__GetAllJobsResponse), 0, soap_copy__ns1__GetAllJobsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAllJobsResponse * SOAP_FMAC6 soap_new__ns1__GetAllJobsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAllJobsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAllJobsResponse * SOAP_FMAC4 soap_instantiate__ns1__GetAllJobsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAllJobsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAllJobsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAllJobsResponse;
		if (size)
			*size = sizeof(_ns1__GetAllJobsResponse);
		((_ns1__GetAllJobsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAllJobsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAllJobsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetAllJobsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAllJobsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAllJobsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAllJobsResponse %p -> %p\n", q, p));
	*(_ns1__GetAllJobsResponse*)p = *(_ns1__GetAllJobsResponse*)q;
}

void _ns1__GetAllJobs::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetAllJobs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetAllJobs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAllJobs);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAllJobs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAllJobs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAllJobs(struct soap *soap, const char *tag, int id, const _ns1__GetAllJobs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAllJobs), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAllJobs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAllJobs(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAllJobs * SOAP_FMAC4 soap_get__ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAllJobs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAllJobs(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAllJobs * SOAP_FMAC4 soap_in__ns1__GetAllJobs(struct soap *soap, const char *tag, _ns1__GetAllJobs *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAllJobs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAllJobs, sizeof(_ns1__GetAllJobs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAllJobs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAllJobs *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAllJobs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAllJobs, 0, sizeof(_ns1__GetAllJobs), 0, soap_copy__ns1__GetAllJobs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAllJobs * SOAP_FMAC6 soap_new__ns1__GetAllJobs(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAllJobs * SOAP_FMAC4 soap_instantiate__ns1__GetAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAllJobs;
		if (size)
			*size = sizeof(_ns1__GetAllJobs);
		((_ns1__GetAllJobs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAllJobs);
		for (int i = 0; i < n; i++)
			((_ns1__GetAllJobs*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAllJobs %p -> %p\n", q, p));
	*(_ns1__GetAllJobs*)p = *(_ns1__GetAllJobs*)q;
}

void _ns1__GetExpirationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->_ns1__GetExpirationResponse::GetExpirationResult);
	/* transient soap skipped */
}

void _ns1__GetExpirationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetExpirationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetExpirationResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetExpirationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetExpirationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExpirationResponse(struct soap *soap, const char *tag, int id, const _ns1__GetExpirationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetExpirationResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetExpirationResult");
	if (soap_out_double(soap, "ns1:GetExpirationResult", -1, &(a->_ns1__GetExpirationResponse::GetExpirationResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetExpirationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetExpirationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetExpirationResponse * SOAP_FMAC4 soap_get__ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetExpirationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetExpirationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetExpirationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetExpirationResponse * SOAP_FMAC4 soap_in__ns1__GetExpirationResponse(struct soap *soap, const char *tag, _ns1__GetExpirationResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetExpirationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetExpirationResponse, sizeof(_ns1__GetExpirationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetExpirationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetExpirationResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetExpirationResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetExpirationResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:GetExpirationResult", &(a->_ns1__GetExpirationResponse::GetExpirationResult), "xsd:double"))
				{	soap_flag_GetExpirationResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetExpirationResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetExpirationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetExpirationResponse, 0, sizeof(_ns1__GetExpirationResponse), 0, soap_copy__ns1__GetExpirationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetExpirationResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetExpirationResponse * SOAP_FMAC6 soap_new__ns1__GetExpirationResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetExpirationResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetExpirationResponse * SOAP_FMAC4 soap_instantiate__ns1__GetExpirationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetExpirationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetExpirationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetExpirationResponse;
		if (size)
			*size = sizeof(_ns1__GetExpirationResponse);
		((_ns1__GetExpirationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetExpirationResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetExpirationResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetExpirationResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetExpirationResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetExpirationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetExpirationResponse %p -> %p\n", q, p));
	*(_ns1__GetExpirationResponse*)p = *(_ns1__GetExpirationResponse*)q;
}

void _ns1__GetExpiration::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__GetExpiration::jobID);
	/* transient soap skipped */
}

void _ns1__GetExpiration::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__GetExpiration::jobID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__GetExpiration::jobID);
	/* transient soap skipped */
}

int _ns1__GetExpiration::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetExpiration);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetExpiration::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetExpiration(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetExpiration(struct soap *soap, const char *tag, int id, const _ns1__GetExpiration *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetExpiration), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:jobID", -1, &(a->_ns1__GetExpiration::jobID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetExpiration::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetExpiration(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetExpiration * SOAP_FMAC4 soap_get__ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetExpiration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetExpiration::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetExpiration(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetExpiration * SOAP_FMAC4 soap_in__ns1__GetExpiration(struct soap *soap, const char *tag, _ns1__GetExpiration *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetExpiration *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetExpiration, sizeof(_ns1__GetExpiration), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetExpiration)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetExpiration *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_jobID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:jobID", &(a->_ns1__GetExpiration::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetExpiration *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetExpiration, 0, sizeof(_ns1__GetExpiration), 0, soap_copy__ns1__GetExpiration);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetExpiration * SOAP_FMAC6 soap_new__ns1__GetExpiration(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetExpiration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetExpiration * SOAP_FMAC4 soap_instantiate__ns1__GetExpiration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetExpiration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetExpiration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetExpiration;
		if (size)
			*size = sizeof(_ns1__GetExpiration);
		((_ns1__GetExpiration*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetExpiration[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetExpiration);
		for (int i = 0; i < n; i++)
			((_ns1__GetExpiration*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetExpiration*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetExpiration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetExpiration %p -> %p\n", q, p));
	*(_ns1__GetExpiration*)p = *(_ns1__GetExpiration*)q;
}

void _ns1__BatchJobExResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__BatchJobExResponse::BatchJobExResult = NULL;
	/* transient soap skipped */
}

void _ns1__BatchJobExResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->_ns1__BatchJobExResponse::BatchJobExResult);
	/* transient soap skipped */
}

int _ns1__BatchJobExResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__BatchJobExResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__BatchJobExResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__BatchJobExResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobExResponse(struct soap *soap, const char *tag, int id, const _ns1__BatchJobExResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__BatchJobExResponse), type))
		return soap->error;
	if (a->BatchJobExResult)
		soap_element_result(soap, "ns1:BatchJobExResult");
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:BatchJobExResult", -1, &(a->_ns1__BatchJobExResponse::BatchJobExResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__BatchJobExResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__BatchJobExResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__BatchJobExResponse * SOAP_FMAC4 soap_get__ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__BatchJobExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__BatchJobExResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__BatchJobExResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__BatchJobExResponse * SOAP_FMAC4 soap_in__ns1__BatchJobExResponse(struct soap *soap, const char *tag, _ns1__BatchJobExResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__BatchJobExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__BatchJobExResponse, sizeof(_ns1__BatchJobExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__BatchJobExResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__BatchJobExResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_BatchJobExResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BatchJobExResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:BatchJobExResult", &(a->_ns1__BatchJobExResponse::BatchJobExResult), "ns1:ArrayOfLuaValue"))
				{	soap_flag_BatchJobExResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:BatchJobExResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__BatchJobExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__BatchJobExResponse, 0, sizeof(_ns1__BatchJobExResponse), 0, soap_copy__ns1__BatchJobExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_BatchJobExResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__BatchJobExResponse * SOAP_FMAC6 soap_new__ns1__BatchJobExResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__BatchJobExResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__BatchJobExResponse * SOAP_FMAC4 soap_instantiate__ns1__BatchJobExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__BatchJobExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__BatchJobExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__BatchJobExResponse;
		if (size)
			*size = sizeof(_ns1__BatchJobExResponse);
		((_ns1__BatchJobExResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__BatchJobExResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__BatchJobExResponse);
		for (int i = 0; i < n; i++)
			((_ns1__BatchJobExResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__BatchJobExResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BatchJobExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__BatchJobExResponse %p -> %p\n", q, p));
	*(_ns1__BatchJobExResponse*)p = *(_ns1__BatchJobExResponse*)q;
}

void _ns1__BatchJobEx::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__BatchJobEx::job = NULL;
	this->_ns1__BatchJobEx::script = NULL;
	/* transient soap skipped */
}

void _ns1__BatchJobEx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Job(soap, &this->_ns1__BatchJobEx::job);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__BatchJobEx::script);
	/* transient soap skipped */
}

int _ns1__BatchJobEx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__BatchJobEx);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__BatchJobEx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__BatchJobEx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobEx(struct soap *soap, const char *tag, int id, const _ns1__BatchJobEx *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__BatchJobEx), type))
		return soap->error;
	if (soap_out_PointerTons1__Job(soap, "ns1:job", -1, &(a->_ns1__BatchJobEx::job), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__BatchJobEx::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__BatchJobEx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__BatchJobEx(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__BatchJobEx * SOAP_FMAC4 soap_get__ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__BatchJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__BatchJobEx::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__BatchJobEx(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__BatchJobEx * SOAP_FMAC4 soap_in__ns1__BatchJobEx(struct soap *soap, const char *tag, _ns1__BatchJobEx *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__BatchJobEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__BatchJobEx, sizeof(_ns1__BatchJobEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__BatchJobEx)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__BatchJobEx *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_job1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_job1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Job(soap, "ns1:job", &(a->_ns1__BatchJobEx::job), "ns1:Job"))
				{	soap_flag_job1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__BatchJobEx::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__BatchJobEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__BatchJobEx, 0, sizeof(_ns1__BatchJobEx), 0, soap_copy__ns1__BatchJobEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_job1 > 0 || soap_flag_script1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__BatchJobEx * SOAP_FMAC6 soap_new__ns1__BatchJobEx(struct soap *soap, int n)
{	return soap_instantiate__ns1__BatchJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__BatchJobEx * SOAP_FMAC4 soap_instantiate__ns1__BatchJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__BatchJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__BatchJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__BatchJobEx;
		if (size)
			*size = sizeof(_ns1__BatchJobEx);
		((_ns1__BatchJobEx*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__BatchJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__BatchJobEx);
		for (int i = 0; i < n; i++)
			((_ns1__BatchJobEx*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__BatchJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BatchJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__BatchJobEx %p -> %p\n", q, p));
	*(_ns1__BatchJobEx*)p = *(_ns1__BatchJobEx*)q;
}

void _ns1__BatchJobResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__BatchJobResponse::BatchJobResult);
	/* transient soap skipped */
}

void _ns1__BatchJobResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__BatchJobResponse::BatchJobResult);
	/* transient soap skipped */
}

int _ns1__BatchJobResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__BatchJobResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__BatchJobResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__BatchJobResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJobResponse(struct soap *soap, const char *tag, int id, const _ns1__BatchJobResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__BatchJobResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:BatchJobResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:BatchJobResult", -1, &(a->_ns1__BatchJobResponse::BatchJobResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__BatchJobResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__BatchJobResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__BatchJobResponse * SOAP_FMAC4 soap_get__ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__BatchJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__BatchJobResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__BatchJobResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__BatchJobResponse * SOAP_FMAC4 soap_in__ns1__BatchJobResponse(struct soap *soap, const char *tag, _ns1__BatchJobResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__BatchJobResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__BatchJobResponse, sizeof(_ns1__BatchJobResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__BatchJobResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__BatchJobResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:BatchJobResult", &(a->_ns1__BatchJobResponse::BatchJobResult), "ns1:LuaValue"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:BatchJobResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__BatchJobResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__BatchJobResponse, 0, sizeof(_ns1__BatchJobResponse), 0, soap_copy__ns1__BatchJobResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__BatchJobResponse * SOAP_FMAC6 soap_new__ns1__BatchJobResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__BatchJobResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__BatchJobResponse * SOAP_FMAC4 soap_instantiate__ns1__BatchJobResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__BatchJobResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__BatchJobResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__BatchJobResponse;
		if (size)
			*size = sizeof(_ns1__BatchJobResponse);
		((_ns1__BatchJobResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__BatchJobResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__BatchJobResponse);
		for (int i = 0; i < n; i++)
			((_ns1__BatchJobResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__BatchJobResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BatchJobResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__BatchJobResponse %p -> %p\n", q, p));
	*(_ns1__BatchJobResponse*)p = *(_ns1__BatchJobResponse*)q;
}

void _ns1__BatchJob::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__BatchJob::job = NULL;
	this->_ns1__BatchJob::script = NULL;
	/* transient soap skipped */
}

void _ns1__BatchJob::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Job(soap, &this->_ns1__BatchJob::job);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__BatchJob::script);
	/* transient soap skipped */
}

int _ns1__BatchJob::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__BatchJob);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__BatchJob::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__BatchJob(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BatchJob(struct soap *soap, const char *tag, int id, const _ns1__BatchJob *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__BatchJob), type))
		return soap->error;
	if (soap_out_PointerTons1__Job(soap, "ns1:job", -1, &(a->_ns1__BatchJob::job), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__BatchJob::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__BatchJob::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__BatchJob(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__BatchJob * SOAP_FMAC4 soap_get__ns1__BatchJob(struct soap *soap, _ns1__BatchJob *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__BatchJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__BatchJob::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__BatchJob(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__BatchJob * SOAP_FMAC4 soap_in__ns1__BatchJob(struct soap *soap, const char *tag, _ns1__BatchJob *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__BatchJob *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__BatchJob, sizeof(_ns1__BatchJob), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__BatchJob)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__BatchJob *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_job1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_job1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Job(soap, "ns1:job", &(a->_ns1__BatchJob::job), "ns1:Job"))
				{	soap_flag_job1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__BatchJob::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__BatchJob *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__BatchJob, 0, sizeof(_ns1__BatchJob), 0, soap_copy__ns1__BatchJob);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_job1 > 0 || soap_flag_script1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__BatchJob * SOAP_FMAC6 soap_new__ns1__BatchJob(struct soap *soap, int n)
{	return soap_instantiate__ns1__BatchJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__BatchJob(struct soap *soap, _ns1__BatchJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__BatchJob * SOAP_FMAC4 soap_instantiate__ns1__BatchJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__BatchJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__BatchJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__BatchJob;
		if (size)
			*size = sizeof(_ns1__BatchJob);
		((_ns1__BatchJob*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__BatchJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__BatchJob);
		for (int i = 0; i < n; i++)
			((_ns1__BatchJob*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__BatchJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BatchJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__BatchJob %p -> %p\n", q, p));
	*(_ns1__BatchJob*)p = *(_ns1__BatchJob*)q;
}

void _ns1__CloseJobResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__CloseJobResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CloseJobResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseJobResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseJobResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseJobResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseJobResponse(struct soap *soap, const char *tag, int id, const _ns1__CloseJobResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseJobResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseJobResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseJobResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseJobResponse * SOAP_FMAC4 soap_get__ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseJobResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseJobResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseJobResponse * SOAP_FMAC4 soap_in__ns1__CloseJobResponse(struct soap *soap, const char *tag, _ns1__CloseJobResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseJobResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseJobResponse, sizeof(_ns1__CloseJobResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseJobResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseJobResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseJobResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseJobResponse, 0, sizeof(_ns1__CloseJobResponse), 0, soap_copy__ns1__CloseJobResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseJobResponse * SOAP_FMAC6 soap_new__ns1__CloseJobResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseJobResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseJobResponse * SOAP_FMAC4 soap_instantiate__ns1__CloseJobResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseJobResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseJobResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseJobResponse;
		if (size)
			*size = sizeof(_ns1__CloseJobResponse);
		((_ns1__CloseJobResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseJobResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseJobResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CloseJobResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseJobResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseJobResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseJobResponse %p -> %p\n", q, p));
	*(_ns1__CloseJobResponse*)p = *(_ns1__CloseJobResponse*)q;
}

void _ns1__CloseJob::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__CloseJob::jobID);
	/* transient soap skipped */
}

void _ns1__CloseJob::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__CloseJob::jobID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__CloseJob::jobID);
	/* transient soap skipped */
}

int _ns1__CloseJob::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CloseJob);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CloseJob::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CloseJob(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CloseJob(struct soap *soap, const char *tag, int id, const _ns1__CloseJob *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CloseJob), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:jobID", -1, &(a->_ns1__CloseJob::jobID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CloseJob::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CloseJob(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CloseJob * SOAP_FMAC4 soap_get__ns1__CloseJob(struct soap *soap, _ns1__CloseJob *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CloseJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CloseJob::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CloseJob(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CloseJob * SOAP_FMAC4 soap_in__ns1__CloseJob(struct soap *soap, const char *tag, _ns1__CloseJob *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CloseJob *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CloseJob, sizeof(_ns1__CloseJob), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CloseJob)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CloseJob *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_jobID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:jobID", &(a->_ns1__CloseJob::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CloseJob *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CloseJob, 0, sizeof(_ns1__CloseJob), 0, soap_copy__ns1__CloseJob);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CloseJob * SOAP_FMAC6 soap_new__ns1__CloseJob(struct soap *soap, int n)
{	return soap_instantiate__ns1__CloseJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CloseJob(struct soap *soap, _ns1__CloseJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CloseJob * SOAP_FMAC4 soap_instantiate__ns1__CloseJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CloseJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CloseJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CloseJob;
		if (size)
			*size = sizeof(_ns1__CloseJob);
		((_ns1__CloseJob*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CloseJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CloseJob);
		for (int i = 0; i < n; i++)
			((_ns1__CloseJob*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CloseJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CloseJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CloseJob %p -> %p\n", q, p));
	*(_ns1__CloseJob*)p = *(_ns1__CloseJob*)q;
}

void _ns1__ExecuteExResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ExecuteExResponse::ExecuteExResult = NULL;
	/* transient soap skipped */
}

void _ns1__ExecuteExResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->_ns1__ExecuteExResponse::ExecuteExResult);
	/* transient soap skipped */
}

int _ns1__ExecuteExResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ExecuteExResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__ExecuteExResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ExecuteExResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteExResponse(struct soap *soap, const char *tag, int id, const _ns1__ExecuteExResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ExecuteExResponse), type))
		return soap->error;
	if (a->ExecuteExResult)
		soap_element_result(soap, "ns1:ExecuteExResult");
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:ExecuteExResult", -1, &(a->_ns1__ExecuteExResponse::ExecuteExResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ExecuteExResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ExecuteExResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ExecuteExResponse * SOAP_FMAC4 soap_get__ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ExecuteExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__ExecuteExResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ExecuteExResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ExecuteExResponse * SOAP_FMAC4 soap_in__ns1__ExecuteExResponse(struct soap *soap, const char *tag, _ns1__ExecuteExResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ExecuteExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ExecuteExResponse, sizeof(_ns1__ExecuteExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ExecuteExResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ExecuteExResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_ExecuteExResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExecuteExResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:ExecuteExResult", &(a->_ns1__ExecuteExResponse::ExecuteExResult), "ns1:ArrayOfLuaValue"))
				{	soap_flag_ExecuteExResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ExecuteExResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ExecuteExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ExecuteExResponse, 0, sizeof(_ns1__ExecuteExResponse), 0, soap_copy__ns1__ExecuteExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ExecuteExResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__ExecuteExResponse * SOAP_FMAC6 soap_new__ns1__ExecuteExResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__ExecuteExResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__ExecuteExResponse * SOAP_FMAC4 soap_instantiate__ns1__ExecuteExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ExecuteExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ExecuteExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__ExecuteExResponse;
		if (size)
			*size = sizeof(_ns1__ExecuteExResponse);
		((_ns1__ExecuteExResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__ExecuteExResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__ExecuteExResponse);
		for (int i = 0; i < n; i++)
			((_ns1__ExecuteExResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__ExecuteExResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ExecuteExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ExecuteExResponse %p -> %p\n", q, p));
	*(_ns1__ExecuteExResponse*)p = *(_ns1__ExecuteExResponse*)q;
}

void _ns1__ExecuteEx::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__ExecuteEx::jobID);
	this->_ns1__ExecuteEx::script = NULL;
	/* transient soap skipped */
}

void _ns1__ExecuteEx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__ExecuteEx::jobID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__ExecuteEx::jobID);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__ExecuteEx::script);
	/* transient soap skipped */
}

int _ns1__ExecuteEx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ExecuteEx);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__ExecuteEx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ExecuteEx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteEx(struct soap *soap, const char *tag, int id, const _ns1__ExecuteEx *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ExecuteEx), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:jobID", -1, &(a->_ns1__ExecuteEx::jobID), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__ExecuteEx::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ExecuteEx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ExecuteEx(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ExecuteEx * SOAP_FMAC4 soap_get__ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ExecuteEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__ExecuteEx::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ExecuteEx(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ExecuteEx * SOAP_FMAC4 soap_in__ns1__ExecuteEx(struct soap *soap, const char *tag, _ns1__ExecuteEx *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ExecuteEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ExecuteEx, sizeof(_ns1__ExecuteEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ExecuteEx)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ExecuteEx *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_jobID1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:jobID", &(a->_ns1__ExecuteEx::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__ExecuteEx::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ExecuteEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ExecuteEx, 0, sizeof(_ns1__ExecuteEx), 0, soap_copy__ns1__ExecuteEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobID1 > 0 || soap_flag_script1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__ExecuteEx * SOAP_FMAC6 soap_new__ns1__ExecuteEx(struct soap *soap, int n)
{	return soap_instantiate__ns1__ExecuteEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__ExecuteEx * SOAP_FMAC4 soap_instantiate__ns1__ExecuteEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ExecuteEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ExecuteEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__ExecuteEx;
		if (size)
			*size = sizeof(_ns1__ExecuteEx);
		((_ns1__ExecuteEx*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__ExecuteEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__ExecuteEx);
		for (int i = 0; i < n; i++)
			((_ns1__ExecuteEx*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__ExecuteEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ExecuteEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ExecuteEx %p -> %p\n", q, p));
	*(_ns1__ExecuteEx*)p = *(_ns1__ExecuteEx*)q;
}

void _ns1__ExecuteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__ExecuteResponse::ExecuteResult);
	/* transient soap skipped */
}

void _ns1__ExecuteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__ExecuteResponse::ExecuteResult);
	/* transient soap skipped */
}

int _ns1__ExecuteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ExecuteResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__ExecuteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ExecuteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteResponse(struct soap *soap, const char *tag, int id, const _ns1__ExecuteResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ExecuteResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:ExecuteResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:ExecuteResult", -1, &(a->_ns1__ExecuteResponse::ExecuteResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ExecuteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ExecuteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_get__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ExecuteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__ExecuteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ExecuteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_in__ns1__ExecuteResponse(struct soap *soap, const char *tag, _ns1__ExecuteResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ExecuteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ExecuteResponse, sizeof(_ns1__ExecuteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ExecuteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ExecuteResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:ExecuteResult", &(a->_ns1__ExecuteResponse::ExecuteResult), "ns1:LuaValue"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ExecuteResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ExecuteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ExecuteResponse, 0, sizeof(_ns1__ExecuteResponse), 0, soap_copy__ns1__ExecuteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__ExecuteResponse * SOAP_FMAC6 soap_new__ns1__ExecuteResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__ExecuteResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_instantiate__ns1__ExecuteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ExecuteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ExecuteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__ExecuteResponse;
		if (size)
			*size = sizeof(_ns1__ExecuteResponse);
		((_ns1__ExecuteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__ExecuteResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__ExecuteResponse);
		for (int i = 0; i < n; i++)
			((_ns1__ExecuteResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__ExecuteResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ExecuteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ExecuteResponse %p -> %p\n", q, p));
	*(_ns1__ExecuteResponse*)p = *(_ns1__ExecuteResponse*)q;
}

void _ns1__Execute::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__Execute::jobID);
	this->_ns1__Execute::script = NULL;
	/* transient soap skipped */
}

void _ns1__Execute::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__Execute::jobID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__Execute::jobID);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__Execute::script);
	/* transient soap skipped */
}

int _ns1__Execute::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Execute);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Execute::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Execute(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Execute(struct soap *soap, const char *tag, int id, const _ns1__Execute *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Execute), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:jobID", -1, &(a->_ns1__Execute::jobID), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__Execute::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Execute::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Execute(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_get__ns1__Execute(struct soap *soap, _ns1__Execute *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Execute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__Execute::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Execute(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_in__ns1__Execute(struct soap *soap, const char *tag, _ns1__Execute *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Execute *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Execute, sizeof(_ns1__Execute), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Execute)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Execute *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_jobID1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:jobID", &(a->_ns1__Execute::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__Execute::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Execute *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Execute, 0, sizeof(_ns1__Execute), 0, soap_copy__ns1__Execute);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobID1 > 0 || soap_flag_script1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__Execute * SOAP_FMAC6 soap_new__ns1__Execute(struct soap *soap, int n)
{	return soap_instantiate__ns1__Execute(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__Execute(struct soap *soap, _ns1__Execute *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_instantiate__ns1__Execute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Execute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Execute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Execute;
		if (size)
			*size = sizeof(_ns1__Execute);
		((_ns1__Execute*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Execute[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Execute);
		for (int i = 0; i < n; i++)
			((_ns1__Execute*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Execute*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Execute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Execute %p -> %p\n", q, p));
	*(_ns1__Execute*)p = *(_ns1__Execute*)q;
}

void _ns1__RenewLeaseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->_ns1__RenewLeaseResponse::RenewLeaseResult);
	/* transient soap skipped */
}

void _ns1__RenewLeaseResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__RenewLeaseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RenewLeaseResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RenewLeaseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RenewLeaseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenewLeaseResponse(struct soap *soap, const char *tag, int id, const _ns1__RenewLeaseResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RenewLeaseResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:RenewLeaseResult");
	if (soap_out_double(soap, "ns1:RenewLeaseResult", -1, &(a->_ns1__RenewLeaseResponse::RenewLeaseResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RenewLeaseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RenewLeaseResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RenewLeaseResponse * SOAP_FMAC4 soap_get__ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RenewLeaseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RenewLeaseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RenewLeaseResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RenewLeaseResponse * SOAP_FMAC4 soap_in__ns1__RenewLeaseResponse(struct soap *soap, const char *tag, _ns1__RenewLeaseResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RenewLeaseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RenewLeaseResponse, sizeof(_ns1__RenewLeaseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RenewLeaseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RenewLeaseResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_RenewLeaseResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RenewLeaseResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:RenewLeaseResult", &(a->_ns1__RenewLeaseResponse::RenewLeaseResult), "xsd:double"))
				{	soap_flag_RenewLeaseResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:RenewLeaseResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RenewLeaseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RenewLeaseResponse, 0, sizeof(_ns1__RenewLeaseResponse), 0, soap_copy__ns1__RenewLeaseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RenewLeaseResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RenewLeaseResponse * SOAP_FMAC6 soap_new__ns1__RenewLeaseResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__RenewLeaseResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RenewLeaseResponse * SOAP_FMAC4 soap_instantiate__ns1__RenewLeaseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RenewLeaseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RenewLeaseResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RenewLeaseResponse;
		if (size)
			*size = sizeof(_ns1__RenewLeaseResponse);
		((_ns1__RenewLeaseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RenewLeaseResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RenewLeaseResponse);
		for (int i = 0; i < n; i++)
			((_ns1__RenewLeaseResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RenewLeaseResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RenewLeaseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RenewLeaseResponse %p -> %p\n", q, p));
	*(_ns1__RenewLeaseResponse*)p = *(_ns1__RenewLeaseResponse*)q;
}

void _ns1__RenewLease::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__RenewLease::jobID);
	soap_default_double(soap, &this->_ns1__RenewLease::expirationInSeconds);
	/* transient soap skipped */
}

void _ns1__RenewLease::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__RenewLease::jobID, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__RenewLease::jobID);
	/* transient soap skipped */
}

int _ns1__RenewLease::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RenewLease);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RenewLease::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RenewLease(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenewLease(struct soap *soap, const char *tag, int id, const _ns1__RenewLease *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RenewLease), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:jobID", -1, &(a->_ns1__RenewLease::jobID), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:expirationInSeconds", -1, &(a->_ns1__RenewLease::expirationInSeconds), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RenewLease::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RenewLease(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RenewLease * SOAP_FMAC4 soap_get__ns1__RenewLease(struct soap *soap, _ns1__RenewLease *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RenewLease(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RenewLease::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RenewLease(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RenewLease * SOAP_FMAC4 soap_in__ns1__RenewLease(struct soap *soap, const char *tag, _ns1__RenewLease *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RenewLease *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RenewLease, sizeof(_ns1__RenewLease), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RenewLease)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RenewLease *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_jobID1 = 1, soap_flag_expirationInSeconds1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jobID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:jobID", &(a->_ns1__RenewLease::jobID), "xsd:string"))
				{	soap_flag_jobID1--;
					continue;
				}
			if (soap_flag_expirationInSeconds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:expirationInSeconds", &(a->_ns1__RenewLease::expirationInSeconds), "xsd:double"))
				{	soap_flag_expirationInSeconds1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RenewLease *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RenewLease, 0, sizeof(_ns1__RenewLease), 0, soap_copy__ns1__RenewLease);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_jobID1 > 0 || soap_flag_expirationInSeconds1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RenewLease * SOAP_FMAC6 soap_new__ns1__RenewLease(struct soap *soap, int n)
{	return soap_instantiate__ns1__RenewLease(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RenewLease(struct soap *soap, _ns1__RenewLease *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RenewLease * SOAP_FMAC4 soap_instantiate__ns1__RenewLease(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RenewLease(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RenewLease, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RenewLease;
		if (size)
			*size = sizeof(_ns1__RenewLease);
		((_ns1__RenewLease*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RenewLease[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RenewLease);
		for (int i = 0; i < n; i++)
			((_ns1__RenewLease*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RenewLease*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RenewLease(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RenewLease %p -> %p\n", q, p));
	*(_ns1__RenewLease*)p = *(_ns1__RenewLease*)q;
}

void _ns1__OpenJobExResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OpenJobExResponse::OpenJobExResult = NULL;
	/* transient soap skipped */
}

void _ns1__OpenJobExResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->_ns1__OpenJobExResponse::OpenJobExResult);
	/* transient soap skipped */
}

int _ns1__OpenJobExResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenJobExResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__OpenJobExResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenJobExResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobExResponse(struct soap *soap, const char *tag, int id, const _ns1__OpenJobExResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenJobExResponse), type))
		return soap->error;
	if (a->OpenJobExResult)
		soap_element_result(soap, "ns1:OpenJobExResult");
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:OpenJobExResult", -1, &(a->_ns1__OpenJobExResponse::OpenJobExResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenJobExResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenJobExResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenJobExResponse * SOAP_FMAC4 soap_get__ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenJobExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__OpenJobExResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenJobExResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenJobExResponse * SOAP_FMAC4 soap_in__ns1__OpenJobExResponse(struct soap *soap, const char *tag, _ns1__OpenJobExResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenJobExResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenJobExResponse, sizeof(_ns1__OpenJobExResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenJobExResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenJobExResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_OpenJobExResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_OpenJobExResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:OpenJobExResult", &(a->_ns1__OpenJobExResponse::OpenJobExResult), "ns1:ArrayOfLuaValue"))
				{	soap_flag_OpenJobExResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OpenJobExResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenJobExResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenJobExResponse, 0, sizeof(_ns1__OpenJobExResponse), 0, soap_copy__ns1__OpenJobExResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_OpenJobExResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__OpenJobExResponse * SOAP_FMAC6 soap_new__ns1__OpenJobExResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__OpenJobExResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__OpenJobExResponse * SOAP_FMAC4 soap_instantiate__ns1__OpenJobExResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenJobExResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenJobExResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__OpenJobExResponse;
		if (size)
			*size = sizeof(_ns1__OpenJobExResponse);
		((_ns1__OpenJobExResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__OpenJobExResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__OpenJobExResponse);
		for (int i = 0; i < n; i++)
			((_ns1__OpenJobExResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__OpenJobExResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenJobExResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenJobExResponse %p -> %p\n", q, p));
	*(_ns1__OpenJobExResponse*)p = *(_ns1__OpenJobExResponse*)q;
}

void _ns1__OpenJobResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__OpenJobResponse::OpenJobResult);
	/* transient soap skipped */
}

void _ns1__OpenJobResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->_ns1__OpenJobResponse::OpenJobResult);
	/* transient soap skipped */
}

int _ns1__OpenJobResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenJobResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__OpenJobResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenJobResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobResponse(struct soap *soap, const char *tag, int id, const _ns1__OpenJobResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenJobResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:OpenJobResult");
	if (soap_out_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:OpenJobResult", -1, &(a->_ns1__OpenJobResponse::OpenJobResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenJobResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenJobResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenJobResponse * SOAP_FMAC4 soap_get__ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__OpenJobResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenJobResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenJobResponse * SOAP_FMAC4 soap_in__ns1__OpenJobResponse(struct soap *soap, const char *tag, _ns1__OpenJobResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenJobResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenJobResponse, sizeof(_ns1__OpenJobResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenJobResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenJobResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:OpenJobResult", &(a->_ns1__OpenJobResponse::OpenJobResult), "ns1:LuaValue"))
					continue;
			/* transient soap skipped */
			soap_check_result(soap, "ns1:OpenJobResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenJobResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenJobResponse, 0, sizeof(_ns1__OpenJobResponse), 0, soap_copy__ns1__OpenJobResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__OpenJobResponse * SOAP_FMAC6 soap_new__ns1__OpenJobResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__OpenJobResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__OpenJobResponse * SOAP_FMAC4 soap_instantiate__ns1__OpenJobResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenJobResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenJobResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__OpenJobResponse;
		if (size)
			*size = sizeof(_ns1__OpenJobResponse);
		((_ns1__OpenJobResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__OpenJobResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__OpenJobResponse);
		for (int i = 0; i < n; i++)
			((_ns1__OpenJobResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__OpenJobResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenJobResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenJobResponse %p -> %p\n", q, p));
	*(_ns1__OpenJobResponse*)p = *(_ns1__OpenJobResponse*)q;
}

void _ns1__OpenJobEx::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OpenJobEx::job = NULL;
	this->_ns1__OpenJobEx::script = NULL;
	/* transient soap skipped */
}

void _ns1__OpenJobEx::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Job(soap, &this->_ns1__OpenJobEx::job);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__OpenJobEx::script);
	/* transient soap skipped */
}

int _ns1__OpenJobEx::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenJobEx);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__OpenJobEx::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenJobEx(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJobEx(struct soap *soap, const char *tag, int id, const _ns1__OpenJobEx *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenJobEx), type))
		return soap->error;
	if (soap_out_PointerTons1__Job(soap, "ns1:job", -1, &(a->_ns1__OpenJobEx::job), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__OpenJobEx::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenJobEx::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenJobEx(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenJobEx * SOAP_FMAC4 soap_get__ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__OpenJobEx::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenJobEx(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenJobEx * SOAP_FMAC4 soap_in__ns1__OpenJobEx(struct soap *soap, const char *tag, _ns1__OpenJobEx *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenJobEx *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenJobEx, sizeof(_ns1__OpenJobEx), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenJobEx)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenJobEx *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_job1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_job1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Job(soap, "ns1:job", &(a->_ns1__OpenJobEx::job), "ns1:Job"))
				{	soap_flag_job1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__OpenJobEx::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenJobEx *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenJobEx, 0, sizeof(_ns1__OpenJobEx), 0, soap_copy__ns1__OpenJobEx);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_job1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__OpenJobEx * SOAP_FMAC6 soap_new__ns1__OpenJobEx(struct soap *soap, int n)
{	return soap_instantiate__ns1__OpenJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__OpenJobEx * SOAP_FMAC4 soap_instantiate__ns1__OpenJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__OpenJobEx;
		if (size)
			*size = sizeof(_ns1__OpenJobEx);
		((_ns1__OpenJobEx*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__OpenJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__OpenJobEx);
		for (int i = 0; i < n; i++)
			((_ns1__OpenJobEx*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__OpenJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenJobEx %p -> %p\n", q, p));
	*(_ns1__OpenJobEx*)p = *(_ns1__OpenJobEx*)q;
}

void _ns1__OpenJob::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__OpenJob::job = NULL;
	this->_ns1__OpenJob::script = NULL;
	/* transient soap skipped */
}

void _ns1__OpenJob::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Job(soap, &this->_ns1__OpenJob::job);
	soap_serialize_PointerTons1__ScriptExecution(soap, &this->_ns1__OpenJob::script);
	/* transient soap skipped */
}

int _ns1__OpenJob::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__OpenJob);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__OpenJob::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__OpenJob(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__OpenJob(struct soap *soap, const char *tag, int id, const _ns1__OpenJob *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__OpenJob), type))
		return soap->error;
	if (soap_out_PointerTons1__Job(soap, "ns1:job", -1, &(a->_ns1__OpenJob::job), ""))
		return soap->error;
	if (soap_out_PointerTons1__ScriptExecution(soap, "ns1:script", -1, &(a->_ns1__OpenJob::script), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__OpenJob::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__OpenJob(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__OpenJob * SOAP_FMAC4 soap_get__ns1__OpenJob(struct soap *soap, _ns1__OpenJob *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__OpenJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__OpenJob::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__OpenJob(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__OpenJob * SOAP_FMAC4 soap_in__ns1__OpenJob(struct soap *soap, const char *tag, _ns1__OpenJob *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__OpenJob *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__OpenJob, sizeof(_ns1__OpenJob), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__OpenJob)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__OpenJob *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_job1 = 1, soap_flag_script1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_job1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Job(soap, "ns1:job", &(a->_ns1__OpenJob::job), "ns1:Job"))
				{	soap_flag_job1--;
					continue;
				}
			if (soap_flag_script1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ScriptExecution(soap, "ns1:script", &(a->_ns1__OpenJob::script), "ns1:ScriptExecution"))
				{	soap_flag_script1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__OpenJob *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__OpenJob, 0, sizeof(_ns1__OpenJob), 0, soap_copy__ns1__OpenJob);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_job1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__OpenJob * SOAP_FMAC6 soap_new__ns1__OpenJob(struct soap *soap, int n)
{	return soap_instantiate__ns1__OpenJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__OpenJob(struct soap *soap, _ns1__OpenJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__OpenJob * SOAP_FMAC4 soap_instantiate__ns1__OpenJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__OpenJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__OpenJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__OpenJob;
		if (size)
			*size = sizeof(_ns1__OpenJob);
		((_ns1__OpenJob*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__OpenJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__OpenJob);
		for (int i = 0; i < n; i++)
			((_ns1__OpenJob*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__OpenJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__OpenJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__OpenJob %p -> %p\n", q, p));
	*(_ns1__OpenJob*)p = *(_ns1__OpenJob*)q;
}

void _ns1__GetStatusResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetStatusResponse::GetStatusResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetStatusResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Status(soap, &this->_ns1__GetStatusResponse::GetStatusResult);
	/* transient soap skipped */
}

int _ns1__GetStatusResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStatusResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetStatusResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStatusResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatusResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStatusResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStatusResponse), type))
		return soap->error;
	if (a->GetStatusResult)
		soap_element_result(soap, "ns1:GetStatusResult");
	if (soap_out_PointerTons1__Status(soap, "ns1:GetStatusResult", -1, &(a->_ns1__GetStatusResponse::GetStatusResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStatusResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStatusResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStatusResponse * SOAP_FMAC4 soap_get__ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetStatusResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStatusResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStatusResponse * SOAP_FMAC4 soap_in__ns1__GetStatusResponse(struct soap *soap, const char *tag, _ns1__GetStatusResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStatusResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStatusResponse, sizeof(_ns1__GetStatusResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStatusResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStatusResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetStatusResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStatusResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Status(soap, "ns1:GetStatusResult", &(a->_ns1__GetStatusResponse::GetStatusResult), "ns1:Status"))
				{	soap_flag_GetStatusResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetStatusResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStatusResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStatusResponse, 0, sizeof(_ns1__GetStatusResponse), 0, soap_copy__ns1__GetStatusResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetStatusResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetStatusResponse * SOAP_FMAC6 soap_new__ns1__GetStatusResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetStatusResponse * SOAP_FMAC4 soap_instantiate__ns1__GetStatusResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStatusResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStatusResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetStatusResponse;
		if (size)
			*size = sizeof(_ns1__GetStatusResponse);
		((_ns1__GetStatusResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetStatusResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStatusResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetStatusResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStatusResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStatusResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStatusResponse %p -> %p\n", q, p));
	*(_ns1__GetStatusResponse*)p = *(_ns1__GetStatusResponse*)q;
}

void _ns1__GetStatus::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetStatus);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStatus(struct soap *soap, const char *tag, int id, const _ns1__GetStatus *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStatus), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStatus(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStatus * SOAP_FMAC4 soap_get__ns1__GetStatus(struct soap *soap, _ns1__GetStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetStatus(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStatus * SOAP_FMAC4 soap_in__ns1__GetStatus(struct soap *soap, const char *tag, _ns1__GetStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStatus, sizeof(_ns1__GetStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetStatus *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStatus, 0, sizeof(_ns1__GetStatus), 0, soap_copy__ns1__GetStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetStatus * SOAP_FMAC6 soap_new__ns1__GetStatus(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetStatus(struct soap *soap, _ns1__GetStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetStatus * SOAP_FMAC4 soap_instantiate__ns1__GetStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetStatus;
		if (size)
			*size = sizeof(_ns1__GetStatus);
		((_ns1__GetStatus*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetStatus);
		for (int i = 0; i < n; i++)
			((_ns1__GetStatus*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetStatus %p -> %p\n", q, p));
	*(_ns1__GetStatus*)p = *(_ns1__GetStatus*)q;
}

void _ns1__GetVersionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__GetVersionResponse::GetVersionResult);
	/* transient soap skipped */
}

void _ns1__GetVersionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__GetVersionResponse::GetVersionResult, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__GetVersionResponse::GetVersionResult);
	/* transient soap skipped */
}

int _ns1__GetVersionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetVersionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetVersionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetVersionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersionResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:GetVersionResult");
	if (soap_out_std__string(soap, "ns1:GetVersionResult", -1, &(a->_ns1__GetVersionResponse::GetVersionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersionResponse * SOAP_FMAC4 soap_get__ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetVersionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVersionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersionResponse * SOAP_FMAC4 soap_in__ns1__GetVersionResponse(struct soap *soap, const char *tag, _ns1__GetVersionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersionResponse, sizeof(_ns1__GetVersionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVersionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVersionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetVersionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetVersionResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:GetVersionResult", &(a->_ns1__GetVersionResponse::GetVersionResult), "xsd:string"))
				{	soap_flag_GetVersionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetVersionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersionResponse, 0, sizeof(_ns1__GetVersionResponse), 0, soap_copy__ns1__GetVersionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetVersionResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetVersionResponse * SOAP_FMAC6 soap_new__ns1__GetVersionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetVersionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetVersionResponse * SOAP_FMAC4 soap_instantiate__ns1__GetVersionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVersionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetVersionResponse;
		if (size)
			*size = sizeof(_ns1__GetVersionResponse);
		((_ns1__GetVersionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetVersionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetVersionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetVersionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetVersionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVersionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVersionResponse %p -> %p\n", q, p));
	*(_ns1__GetVersionResponse*)p = *(_ns1__GetVersionResponse*)q;
}

void _ns1__GetVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetVersion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetVersion(struct soap *soap, const char *tag, int id, const _ns1__GetVersion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetVersion), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetVersion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetVersion * SOAP_FMAC4 soap_get__ns1__GetVersion(struct soap *soap, _ns1__GetVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetVersion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetVersion * SOAP_FMAC4 soap_in__ns1__GetVersion(struct soap *soap, const char *tag, _ns1__GetVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetVersion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetVersion, sizeof(_ns1__GetVersion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetVersion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetVersion *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetVersion, 0, sizeof(_ns1__GetVersion), 0, soap_copy__ns1__GetVersion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetVersion * SOAP_FMAC6 soap_new__ns1__GetVersion(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetVersion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetVersion(struct soap *soap, _ns1__GetVersion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetVersion * SOAP_FMAC4 soap_instantiate__ns1__GetVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetVersion;
		if (size)
			*size = sizeof(_ns1__GetVersion);
		((_ns1__GetVersion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetVersion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetVersion);
		for (int i = 0; i < n; i++)
			((_ns1__GetVersion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetVersion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetVersion %p -> %p\n", q, p));
	*(_ns1__GetVersion*)p = *(_ns1__GetVersion*)q;
}

void _ns1__HelloWorldResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__HelloWorldResponse::HelloWorldResult = NULL;
	/* transient soap skipped */
}

void _ns1__HelloWorldResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__HelloWorldResponse::HelloWorldResult);
	/* transient soap skipped */
}

int _ns1__HelloWorldResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__HelloWorldResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__HelloWorldResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__HelloWorldResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HelloWorldResponse(struct soap *soap, const char *tag, int id, const _ns1__HelloWorldResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__HelloWorldResponse), type))
		return soap->error;
	if (a->HelloWorldResult)
		soap_element_result(soap, "ns1:HelloWorldResult");
	if (soap_out_PointerTostd__string(soap, "ns1:HelloWorldResult", -1, &(a->_ns1__HelloWorldResponse::HelloWorldResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__HelloWorldResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__HelloWorldResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__HelloWorldResponse * SOAP_FMAC4 soap_get__ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__HelloWorldResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__HelloWorldResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__HelloWorldResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__HelloWorldResponse * SOAP_FMAC4 soap_in__ns1__HelloWorldResponse(struct soap *soap, const char *tag, _ns1__HelloWorldResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__HelloWorldResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__HelloWorldResponse, sizeof(_ns1__HelloWorldResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__HelloWorldResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__HelloWorldResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_HelloWorldResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_HelloWorldResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:HelloWorldResult", &(a->_ns1__HelloWorldResponse::HelloWorldResult), "xsd:string"))
				{	soap_flag_HelloWorldResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:HelloWorldResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__HelloWorldResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__HelloWorldResponse, 0, sizeof(_ns1__HelloWorldResponse), 0, soap_copy__ns1__HelloWorldResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__HelloWorldResponse * SOAP_FMAC6 soap_new__ns1__HelloWorldResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__HelloWorldResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__HelloWorldResponse * SOAP_FMAC4 soap_instantiate__ns1__HelloWorldResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__HelloWorldResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__HelloWorldResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__HelloWorldResponse;
		if (size)
			*size = sizeof(_ns1__HelloWorldResponse);
		((_ns1__HelloWorldResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__HelloWorldResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__HelloWorldResponse);
		for (int i = 0; i < n; i++)
			((_ns1__HelloWorldResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__HelloWorldResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__HelloWorldResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__HelloWorldResponse %p -> %p\n", q, p));
	*(_ns1__HelloWorldResponse*)p = *(_ns1__HelloWorldResponse*)q;
}

void _ns1__HelloWorld::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__HelloWorld::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__HelloWorld::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__HelloWorld);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__HelloWorld::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__HelloWorld(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__HelloWorld(struct soap *soap, const char *tag, int id, const _ns1__HelloWorld *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__HelloWorld), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__HelloWorld::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__HelloWorld(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__HelloWorld * SOAP_FMAC4 soap_get__ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__HelloWorld(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__HelloWorld::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__HelloWorld(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__HelloWorld * SOAP_FMAC4 soap_in__ns1__HelloWorld(struct soap *soap, const char *tag, _ns1__HelloWorld *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__HelloWorld *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__HelloWorld, sizeof(_ns1__HelloWorld), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__HelloWorld)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__HelloWorld *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__HelloWorld *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__HelloWorld, 0, sizeof(_ns1__HelloWorld), 0, soap_copy__ns1__HelloWorld);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__HelloWorld * SOAP_FMAC6 soap_new__ns1__HelloWorld(struct soap *soap, int n)
{	return soap_instantiate__ns1__HelloWorld(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__HelloWorld * SOAP_FMAC4 soap_instantiate__ns1__HelloWorld(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__HelloWorld(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__HelloWorld, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__HelloWorld;
		if (size)
			*size = sizeof(_ns1__HelloWorld);
		((_ns1__HelloWorld*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__HelloWorld[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__HelloWorld);
		for (int i = 0; i < n; i++)
			((_ns1__HelloWorld*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__HelloWorld*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__HelloWorld(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__HelloWorld %p -> %p\n", q, p));
	*(_ns1__HelloWorld*)p = *(_ns1__HelloWorld*)q;
}

void ns1__LuaValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns1__LuaType(soap, &this->ns1__LuaValue::type);
	this->ns1__LuaValue::value = NULL;
	this->ns1__LuaValue::table = NULL;
	/* transient soap skipped */
}

void ns1__LuaValue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__LuaValue::value);
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->ns1__LuaValue::table);
	/* transient soap skipped */
}

int ns1__LuaValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__LuaValue);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__LuaValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__LuaValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LuaValue(struct soap *soap, const char *tag, int id, const ns1__LuaValue *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__LuaValue), type))
		return soap->error;
	if (soap_out_ns1__LuaType(soap, "ns1:type", -1, &(a->ns1__LuaValue::type), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:value", -1, &(a->ns1__LuaValue::value), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:table", -1, &(a->ns1__LuaValue::table), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__LuaValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__LuaValue(soap, this, tag, type);
}

SOAP_FMAC3 ns1__LuaValue * SOAP_FMAC4 soap_get_ns1__LuaValue(struct soap *soap, ns1__LuaValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__LuaValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__LuaValue::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__LuaValue(soap, tag, this, type);
}

SOAP_FMAC3 ns1__LuaValue * SOAP_FMAC4 soap_in_ns1__LuaValue(struct soap *soap, const char *tag, ns1__LuaValue *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__LuaValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__LuaValue, sizeof(ns1__LuaValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__LuaValue)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__LuaValue *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_type1 = 1, soap_flag_value1 = 1, soap_flag_table1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_ns1__LuaType(soap, "ns1:type", &(a->ns1__LuaValue::type), "ns1:LuaType"))
				{	soap_flag_type1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:value", &(a->ns1__LuaValue::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap_flag_table1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:table", &(a->ns1__LuaValue::table), "ns1:ArrayOfLuaValue"))
				{	soap_flag_table1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__LuaValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__LuaValue, 0, sizeof(ns1__LuaValue), 0, soap_copy_ns1__LuaValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_type1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__LuaValue * SOAP_FMAC6 soap_new_ns1__LuaValue(struct soap *soap, int n)
{	return soap_instantiate_ns1__LuaValue(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__LuaValue(struct soap *soap, ns1__LuaValue *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__LuaValue * SOAP_FMAC4 soap_instantiate_ns1__LuaValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__LuaValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__LuaValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__LuaValue;
		if (size)
			*size = sizeof(ns1__LuaValue);
		((ns1__LuaValue*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__LuaValue[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__LuaValue);
		for (int i = 0; i < n; i++)
			((ns1__LuaValue*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__LuaValue*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__LuaValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__LuaValue %p -> %p\n", q, p));
	*(ns1__LuaValue*)p = *(ns1__LuaValue*)q;
}

void ns1__ArrayOfJob::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__Job(soap, &this->ns1__ArrayOfJob::Job);
	/* transient soap skipped */
}

void ns1__ArrayOfJob::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__Job(soap, &this->ns1__ArrayOfJob::Job);
	/* transient soap skipped */
}

int ns1__ArrayOfJob::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfJob);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfJob::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfJob(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfJob(struct soap *soap, const char *tag, int id, const ns1__ArrayOfJob *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfJob), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__Job(soap, "ns1:Job", -1, &(a->ns1__ArrayOfJob::Job), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfJob::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfJob(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfJob * SOAP_FMAC4 soap_get_ns1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfJob::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfJob(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfJob * SOAP_FMAC4 soap_in_ns1__ArrayOfJob(struct soap *soap, const char *tag, ns1__ArrayOfJob *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfJob *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfJob, sizeof(ns1__ArrayOfJob), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfJob)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfJob *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__Job(soap, "ns1:Job", &(a->ns1__ArrayOfJob::Job), "ns1:Job"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfJob *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfJob, 0, sizeof(ns1__ArrayOfJob), 0, soap_copy_ns1__ArrayOfJob);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfJob * SOAP_FMAC6 soap_new_ns1__ArrayOfJob(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfJob * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfJob;
		if (size)
			*size = sizeof(ns1__ArrayOfJob);
		((ns1__ArrayOfJob*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfJob);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfJob*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfJob %p -> %p\n", q, p));
	*(ns1__ArrayOfJob*)p = *(ns1__ArrayOfJob*)q;
}

void ns1__ArrayOfLuaValue::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->ns1__ArrayOfLuaValue::LuaValue);
	/* transient soap skipped */
}

void ns1__ArrayOfLuaValue::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(soap, &this->ns1__ArrayOfLuaValue::LuaValue);
	/* transient soap skipped */
}

int ns1__ArrayOfLuaValue::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfLuaValue);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfLuaValue::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfLuaValue(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfLuaValue(struct soap *soap, const char *tag, int id, const ns1__ArrayOfLuaValue *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfLuaValue), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:LuaValue", -1, &(a->ns1__ArrayOfLuaValue::LuaValue), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfLuaValue::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfLuaValue(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfLuaValue * SOAP_FMAC4 soap_get_ns1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfLuaValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfLuaValue::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfLuaValue(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfLuaValue * SOAP_FMAC4 soap_in_ns1__ArrayOfLuaValue(struct soap *soap, const char *tag, ns1__ArrayOfLuaValue *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfLuaValue *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfLuaValue, sizeof(ns1__ArrayOfLuaValue), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfLuaValue)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfLuaValue *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__LuaValue(soap, "ns1:LuaValue", &(a->ns1__ArrayOfLuaValue::LuaValue), "ns1:LuaValue"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfLuaValue *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfLuaValue, 0, sizeof(ns1__ArrayOfLuaValue), 0, soap_copy_ns1__ArrayOfLuaValue);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfLuaValue * SOAP_FMAC6 soap_new_ns1__ArrayOfLuaValue(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfLuaValue(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfLuaValue * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfLuaValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfLuaValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfLuaValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfLuaValue;
		if (size)
			*size = sizeof(ns1__ArrayOfLuaValue);
		((ns1__ArrayOfLuaValue*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfLuaValue[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfLuaValue);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfLuaValue*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfLuaValue*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfLuaValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfLuaValue %p -> %p\n", q, p));
	*(ns1__ArrayOfLuaValue*)p = *(ns1__ArrayOfLuaValue*)q;
}

void ns1__ScriptExecution::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ScriptExecution::name = NULL;
	this->ns1__ScriptExecution::script = NULL;
	this->ns1__ScriptExecution::arguments = NULL;
	/* transient soap skipped */
}

void ns1__ScriptExecution::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__ScriptExecution::name);
	soap_serialize_PointerTostd__string(soap, &this->ns1__ScriptExecution::script);
	soap_serialize_PointerTons1__ArrayOfLuaValue(soap, &this->ns1__ScriptExecution::arguments);
	/* transient soap skipped */
}

int ns1__ScriptExecution::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ScriptExecution);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ScriptExecution::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ScriptExecution(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ScriptExecution(struct soap *soap, const char *tag, int id, const ns1__ScriptExecution *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ScriptExecution), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:name", -1, &(a->ns1__ScriptExecution::name), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:script", -1, &(a->ns1__ScriptExecution::script), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, "ns1:arguments", -1, &(a->ns1__ScriptExecution::arguments), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ScriptExecution::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ScriptExecution(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ScriptExecution * SOAP_FMAC4 soap_get_ns1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ScriptExecution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ScriptExecution::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ScriptExecution(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ScriptExecution * SOAP_FMAC4 soap_in_ns1__ScriptExecution(struct soap *soap, const char *tag, ns1__ScriptExecution *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ScriptExecution *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ScriptExecution, sizeof(ns1__ScriptExecution), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ScriptExecution)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ScriptExecution *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_name1 = 1, soap_flag_script1 = 1, soap_flag_arguments1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:name", &(a->ns1__ScriptExecution::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_script1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:script", &(a->ns1__ScriptExecution::script), "xsd:string"))
				{	soap_flag_script1--;
					continue;
				}
			if (soap_flag_arguments1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfLuaValue(soap, "ns1:arguments", &(a->ns1__ScriptExecution::arguments), "ns1:ArrayOfLuaValue"))
				{	soap_flag_arguments1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ScriptExecution *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ScriptExecution, 0, sizeof(ns1__ScriptExecution), 0, soap_copy_ns1__ScriptExecution);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ScriptExecution * SOAP_FMAC6 soap_new_ns1__ScriptExecution(struct soap *soap, int n)
{	return soap_instantiate_ns1__ScriptExecution(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ScriptExecution * SOAP_FMAC4 soap_instantiate_ns1__ScriptExecution(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ScriptExecution(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ScriptExecution, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ScriptExecution;
		if (size)
			*size = sizeof(ns1__ScriptExecution);
		((ns1__ScriptExecution*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ScriptExecution[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ScriptExecution);
		for (int i = 0; i < n; i++)
			((ns1__ScriptExecution*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ScriptExecution*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ScriptExecution(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ScriptExecution %p -> %p\n", q, p));
	*(ns1__ScriptExecution*)p = *(ns1__ScriptExecution*)q;
}

void ns1__Job::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->ns1__Job::id);
	soap_default_double(soap, &this->ns1__Job::expirationInSeconds);
	soap_default_int(soap, &this->ns1__Job::category);
	soap_default_double(soap, &this->ns1__Job::cores);
	/* transient soap skipped */
}

void ns1__Job::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__Job::id, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->ns1__Job::id);
	/* transient soap skipped */
}

int ns1__Job::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Job);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__Job::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Job(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Job(struct soap *soap, const char *tag, int id, const ns1__Job *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Job), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:id", -1, &(a->ns1__Job::id), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:expirationInSeconds", -1, &(a->ns1__Job::expirationInSeconds), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:category", -1, &(a->ns1__Job::category), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:cores", -1, &(a->ns1__Job::cores), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Job::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Job(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Job * SOAP_FMAC4 soap_get_ns1__Job(struct soap *soap, ns1__Job *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Job(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__Job::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Job(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Job * SOAP_FMAC4 soap_in_ns1__Job(struct soap *soap, const char *tag, ns1__Job *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Job *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Job, sizeof(ns1__Job), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Job)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Job *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_id1 = 1, soap_flag_expirationInSeconds1 = 1, soap_flag_category1 = 1, soap_flag_cores1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:id", &(a->ns1__Job::id), "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_expirationInSeconds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:expirationInSeconds", &(a->ns1__Job::expirationInSeconds), "xsd:double"))
				{	soap_flag_expirationInSeconds1--;
					continue;
				}
			if (soap_flag_category1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:category", &(a->ns1__Job::category), "xsd:int"))
				{	soap_flag_category1--;
					continue;
				}
			if (soap_flag_cores1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:cores", &(a->ns1__Job::cores), "xsd:double"))
				{	soap_flag_cores1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Job *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Job, 0, sizeof(ns1__Job), 0, soap_copy_ns1__Job);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_expirationInSeconds1 > 0 || soap_flag_category1 > 0 || soap_flag_cores1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__Job * SOAP_FMAC6 soap_new_ns1__Job(struct soap *soap, int n)
{	return soap_instantiate_ns1__Job(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__Job(struct soap *soap, ns1__Job *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__Job * SOAP_FMAC4 soap_instantiate_ns1__Job(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Job(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Job, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__Job;
		if (size)
			*size = sizeof(ns1__Job);
		((ns1__Job*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__Job[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Job);
		for (int i = 0; i < n; i++)
			((ns1__Job*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Job*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Job(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Job %p -> %p\n", q, p));
	*(ns1__Job*)p = *(ns1__Job*)q;
}

void ns1__Status::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__Status::version = NULL;
	soap_default_int(soap, &this->ns1__Status::environmentCount);
	/* transient soap skipped */
}

void ns1__Status::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__Status::version);
	/* transient soap skipped */
}

int ns1__Status::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Status);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__Status::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Status(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Status(struct soap *soap, const char *tag, int id, const ns1__Status *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Status), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:version", -1, &(a->ns1__Status::version), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:environmentCount", -1, &(a->ns1__Status::environmentCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Status::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Status(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_get_ns1__Status(struct soap *soap, ns1__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__Status::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Status(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_in_ns1__Status(struct soap *soap, const char *tag, ns1__Status *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Status *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Status, sizeof(ns1__Status), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Status)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Status *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_version1 = 1, soap_flag_environmentCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_version1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:version", &(a->ns1__Status::version), "xsd:string"))
				{	soap_flag_version1--;
					continue;
				}
			if (soap_flag_environmentCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:environmentCount", &(a->ns1__Status::environmentCount), "xsd:int"))
				{	soap_flag_environmentCount1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Status, 0, sizeof(ns1__Status), 0, soap_copy_ns1__Status);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_environmentCount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__Status * SOAP_FMAC6 soap_new_ns1__Status(struct soap *soap, int n)
{	return soap_instantiate_ns1__Status(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__Status(struct soap *soap, ns1__Status *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__Status * SOAP_FMAC4 soap_instantiate_ns1__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__Status;
		if (size)
			*size = sizeof(ns1__Status);
		((ns1__Status*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__Status[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Status);
		for (int i = 0; i < n; i++)
			((ns1__Status*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Status*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Status %p -> %p\n", q, p));
	*(ns1__Status*)p = *(ns1__Status*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DiagEx(struct soap *soap, struct __ns3__DiagEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DiagEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DiagEx(struct soap *soap, const struct __ns3__DiagEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DiagEx(soap, &a->ns1__DiagEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DiagEx(struct soap *soap, const struct __ns3__DiagEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DiagEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DiagEx(struct soap *soap, const char *tag, int id, const struct __ns3__DiagEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DiagEx(soap, "ns1:DiagEx", -1, &a->ns1__DiagEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DiagEx * SOAP_FMAC4 soap_get___ns3__DiagEx(struct soap *soap, struct __ns3__DiagEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DiagEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DiagEx * SOAP_FMAC4 soap_in___ns3__DiagEx(struct soap *soap, const char *tag, struct __ns3__DiagEx *a, const char *type)
{
	short soap_flag_ns1__DiagEx = 1;
	short soap_flag;
	a = (struct __ns3__DiagEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DiagEx, sizeof(struct __ns3__DiagEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DiagEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DiagEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DiagEx(soap, "ns1:DiagEx", &a->ns1__DiagEx, ""))
				{	soap_flag_ns1__DiagEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DiagEx * SOAP_FMAC6 soap_new___ns3__DiagEx(struct soap *soap, int n)
{	return soap_instantiate___ns3__DiagEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DiagEx(struct soap *soap, struct __ns3__DiagEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DiagEx * SOAP_FMAC4 soap_instantiate___ns3__DiagEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DiagEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DiagEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DiagEx;
		if (size)
			*size = sizeof(struct __ns3__DiagEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DiagEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DiagEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DiagEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DiagEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DiagEx %p -> %p\n", q, p));
	*(struct __ns3__DiagEx*)p = *(struct __ns3__DiagEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__Diag(struct soap *soap, struct __ns3__Diag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Diag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__Diag(struct soap *soap, const struct __ns3__Diag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Diag(soap, &a->ns1__Diag);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__Diag(struct soap *soap, const struct __ns3__Diag *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__Diag(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__Diag(struct soap *soap, const char *tag, int id, const struct __ns3__Diag *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Diag(soap, "ns1:Diag", -1, &a->ns1__Diag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__Diag * SOAP_FMAC4 soap_get___ns3__Diag(struct soap *soap, struct __ns3__Diag *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__Diag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__Diag * SOAP_FMAC4 soap_in___ns3__Diag(struct soap *soap, const char *tag, struct __ns3__Diag *a, const char *type)
{
	short soap_flag_ns1__Diag = 1;
	short soap_flag;
	a = (struct __ns3__Diag *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__Diag, sizeof(struct __ns3__Diag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__Diag(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Diag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Diag(soap, "ns1:Diag", &a->ns1__Diag, ""))
				{	soap_flag_ns1__Diag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__Diag * SOAP_FMAC6 soap_new___ns3__Diag(struct soap *soap, int n)
{	return soap_instantiate___ns3__Diag(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__Diag(struct soap *soap, struct __ns3__Diag *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__Diag * SOAP_FMAC4 soap_instantiate___ns3__Diag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__Diag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__Diag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__Diag;
		if (size)
			*size = sizeof(struct __ns3__Diag);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__Diag[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__Diag);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__Diag*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__Diag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__Diag %p -> %p\n", q, p));
	*(struct __ns3__Diag*)p = *(struct __ns3__Diag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CloseAllJobs(struct soap *soap, struct __ns3__CloseAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseAllJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CloseAllJobs(struct soap *soap, const struct __ns3__CloseAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseAllJobs(soap, &a->ns1__CloseAllJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CloseAllJobs(struct soap *soap, const struct __ns3__CloseAllJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CloseAllJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CloseAllJobs(struct soap *soap, const char *tag, int id, const struct __ns3__CloseAllJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseAllJobs(soap, "ns1:CloseAllJobs", -1, &a->ns1__CloseAllJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CloseAllJobs * SOAP_FMAC4 soap_get___ns3__CloseAllJobs(struct soap *soap, struct __ns3__CloseAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CloseAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__CloseAllJobs * SOAP_FMAC4 soap_in___ns3__CloseAllJobs(struct soap *soap, const char *tag, struct __ns3__CloseAllJobs *a, const char *type)
{
	short soap_flag_ns1__CloseAllJobs = 1;
	short soap_flag;
	a = (struct __ns3__CloseAllJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CloseAllJobs, sizeof(struct __ns3__CloseAllJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CloseAllJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseAllJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseAllJobs(soap, "ns1:CloseAllJobs", &a->ns1__CloseAllJobs, ""))
				{	soap_flag_ns1__CloseAllJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__CloseAllJobs * SOAP_FMAC6 soap_new___ns3__CloseAllJobs(struct soap *soap, int n)
{	return soap_instantiate___ns3__CloseAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__CloseAllJobs(struct soap *soap, struct __ns3__CloseAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__CloseAllJobs * SOAP_FMAC4 soap_instantiate___ns3__CloseAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CloseAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CloseAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__CloseAllJobs;
		if (size)
			*size = sizeof(struct __ns3__CloseAllJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__CloseAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CloseAllJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CloseAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CloseAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CloseAllJobs %p -> %p\n", q, p));
	*(struct __ns3__CloseAllJobs*)p = *(struct __ns3__CloseAllJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CloseExpiredJobs(struct soap *soap, struct __ns3__CloseExpiredJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseExpiredJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CloseExpiredJobs(struct soap *soap, const struct __ns3__CloseExpiredJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseExpiredJobs(soap, &a->ns1__CloseExpiredJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CloseExpiredJobs(struct soap *soap, const struct __ns3__CloseExpiredJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CloseExpiredJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CloseExpiredJobs(struct soap *soap, const char *tag, int id, const struct __ns3__CloseExpiredJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseExpiredJobs(soap, "ns1:CloseExpiredJobs", -1, &a->ns1__CloseExpiredJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CloseExpiredJobs * SOAP_FMAC4 soap_get___ns3__CloseExpiredJobs(struct soap *soap, struct __ns3__CloseExpiredJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CloseExpiredJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__CloseExpiredJobs * SOAP_FMAC4 soap_in___ns3__CloseExpiredJobs(struct soap *soap, const char *tag, struct __ns3__CloseExpiredJobs *a, const char *type)
{
	short soap_flag_ns1__CloseExpiredJobs = 1;
	short soap_flag;
	a = (struct __ns3__CloseExpiredJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CloseExpiredJobs, sizeof(struct __ns3__CloseExpiredJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CloseExpiredJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseExpiredJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseExpiredJobs(soap, "ns1:CloseExpiredJobs", &a->ns1__CloseExpiredJobs, ""))
				{	soap_flag_ns1__CloseExpiredJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__CloseExpiredJobs * SOAP_FMAC6 soap_new___ns3__CloseExpiredJobs(struct soap *soap, int n)
{	return soap_instantiate___ns3__CloseExpiredJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__CloseExpiredJobs(struct soap *soap, struct __ns3__CloseExpiredJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__CloseExpiredJobs * SOAP_FMAC4 soap_instantiate___ns3__CloseExpiredJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CloseExpiredJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CloseExpiredJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__CloseExpiredJobs;
		if (size)
			*size = sizeof(struct __ns3__CloseExpiredJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__CloseExpiredJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CloseExpiredJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CloseExpiredJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CloseExpiredJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CloseExpiredJobs %p -> %p\n", q, p));
	*(struct __ns3__CloseExpiredJobs*)p = *(struct __ns3__CloseExpiredJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetAllJobsEx(struct soap *soap, struct __ns3__GetAllJobsEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAllJobsEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetAllJobsEx(struct soap *soap, const struct __ns3__GetAllJobsEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAllJobsEx(soap, &a->ns1__GetAllJobsEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetAllJobsEx(struct soap *soap, const struct __ns3__GetAllJobsEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetAllJobsEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetAllJobsEx(struct soap *soap, const char *tag, int id, const struct __ns3__GetAllJobsEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAllJobsEx(soap, "ns1:GetAllJobsEx", -1, &a->ns1__GetAllJobsEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetAllJobsEx * SOAP_FMAC4 soap_get___ns3__GetAllJobsEx(struct soap *soap, struct __ns3__GetAllJobsEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetAllJobsEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetAllJobsEx * SOAP_FMAC4 soap_in___ns3__GetAllJobsEx(struct soap *soap, const char *tag, struct __ns3__GetAllJobsEx *a, const char *type)
{
	short soap_flag_ns1__GetAllJobsEx = 1;
	short soap_flag;
	a = (struct __ns3__GetAllJobsEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetAllJobsEx, sizeof(struct __ns3__GetAllJobsEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetAllJobsEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAllJobsEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAllJobsEx(soap, "ns1:GetAllJobsEx", &a->ns1__GetAllJobsEx, ""))
				{	soap_flag_ns1__GetAllJobsEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetAllJobsEx * SOAP_FMAC6 soap_new___ns3__GetAllJobsEx(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetAllJobsEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetAllJobsEx(struct soap *soap, struct __ns3__GetAllJobsEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetAllJobsEx * SOAP_FMAC4 soap_instantiate___ns3__GetAllJobsEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetAllJobsEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetAllJobsEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetAllJobsEx;
		if (size)
			*size = sizeof(struct __ns3__GetAllJobsEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetAllJobsEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetAllJobsEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetAllJobsEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetAllJobsEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetAllJobsEx %p -> %p\n", q, p));
	*(struct __ns3__GetAllJobsEx*)p = *(struct __ns3__GetAllJobsEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetAllJobs(struct soap *soap, struct __ns3__GetAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAllJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetAllJobs(struct soap *soap, const struct __ns3__GetAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAllJobs(soap, &a->ns1__GetAllJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetAllJobs(struct soap *soap, const struct __ns3__GetAllJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetAllJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetAllJobs(struct soap *soap, const char *tag, int id, const struct __ns3__GetAllJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAllJobs(soap, "ns1:GetAllJobs", -1, &a->ns1__GetAllJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetAllJobs * SOAP_FMAC4 soap_get___ns3__GetAllJobs(struct soap *soap, struct __ns3__GetAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetAllJobs * SOAP_FMAC4 soap_in___ns3__GetAllJobs(struct soap *soap, const char *tag, struct __ns3__GetAllJobs *a, const char *type)
{
	short soap_flag_ns1__GetAllJobs = 1;
	short soap_flag;
	a = (struct __ns3__GetAllJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetAllJobs, sizeof(struct __ns3__GetAllJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetAllJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAllJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAllJobs(soap, "ns1:GetAllJobs", &a->ns1__GetAllJobs, ""))
				{	soap_flag_ns1__GetAllJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetAllJobs * SOAP_FMAC6 soap_new___ns3__GetAllJobs(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetAllJobs(struct soap *soap, struct __ns3__GetAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetAllJobs * SOAP_FMAC4 soap_instantiate___ns3__GetAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetAllJobs;
		if (size)
			*size = sizeof(struct __ns3__GetAllJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetAllJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetAllJobs %p -> %p\n", q, p));
	*(struct __ns3__GetAllJobs*)p = *(struct __ns3__GetAllJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetExpiration(struct soap *soap, struct __ns3__GetExpiration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetExpiration = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetExpiration(struct soap *soap, const struct __ns3__GetExpiration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetExpiration(soap, &a->ns1__GetExpiration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetExpiration(struct soap *soap, const struct __ns3__GetExpiration *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetExpiration(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetExpiration(struct soap *soap, const char *tag, int id, const struct __ns3__GetExpiration *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetExpiration(soap, "ns1:GetExpiration", -1, &a->ns1__GetExpiration, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetExpiration * SOAP_FMAC4 soap_get___ns3__GetExpiration(struct soap *soap, struct __ns3__GetExpiration *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetExpiration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetExpiration * SOAP_FMAC4 soap_in___ns3__GetExpiration(struct soap *soap, const char *tag, struct __ns3__GetExpiration *a, const char *type)
{
	short soap_flag_ns1__GetExpiration = 1;
	short soap_flag;
	a = (struct __ns3__GetExpiration *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetExpiration, sizeof(struct __ns3__GetExpiration), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetExpiration(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetExpiration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetExpiration(soap, "ns1:GetExpiration", &a->ns1__GetExpiration, ""))
				{	soap_flag_ns1__GetExpiration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetExpiration * SOAP_FMAC6 soap_new___ns3__GetExpiration(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetExpiration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetExpiration(struct soap *soap, struct __ns3__GetExpiration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetExpiration * SOAP_FMAC4 soap_instantiate___ns3__GetExpiration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetExpiration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetExpiration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetExpiration;
		if (size)
			*size = sizeof(struct __ns3__GetExpiration);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetExpiration[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetExpiration);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetExpiration*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetExpiration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetExpiration %p -> %p\n", q, p));
	*(struct __ns3__GetExpiration*)p = *(struct __ns3__GetExpiration*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__BatchJobEx(struct soap *soap, struct __ns3__BatchJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__BatchJobEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__BatchJobEx(struct soap *soap, const struct __ns3__BatchJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__BatchJobEx(soap, &a->ns1__BatchJobEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__BatchJobEx(struct soap *soap, const struct __ns3__BatchJobEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__BatchJobEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__BatchJobEx(struct soap *soap, const char *tag, int id, const struct __ns3__BatchJobEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__BatchJobEx(soap, "ns1:BatchJobEx", -1, &a->ns1__BatchJobEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__BatchJobEx * SOAP_FMAC4 soap_get___ns3__BatchJobEx(struct soap *soap, struct __ns3__BatchJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__BatchJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__BatchJobEx * SOAP_FMAC4 soap_in___ns3__BatchJobEx(struct soap *soap, const char *tag, struct __ns3__BatchJobEx *a, const char *type)
{
	short soap_flag_ns1__BatchJobEx = 1;
	short soap_flag;
	a = (struct __ns3__BatchJobEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__BatchJobEx, sizeof(struct __ns3__BatchJobEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__BatchJobEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__BatchJobEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__BatchJobEx(soap, "ns1:BatchJobEx", &a->ns1__BatchJobEx, ""))
				{	soap_flag_ns1__BatchJobEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__BatchJobEx * SOAP_FMAC6 soap_new___ns3__BatchJobEx(struct soap *soap, int n)
{	return soap_instantiate___ns3__BatchJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__BatchJobEx(struct soap *soap, struct __ns3__BatchJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__BatchJobEx * SOAP_FMAC4 soap_instantiate___ns3__BatchJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__BatchJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__BatchJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__BatchJobEx;
		if (size)
			*size = sizeof(struct __ns3__BatchJobEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__BatchJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__BatchJobEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__BatchJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__BatchJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__BatchJobEx %p -> %p\n", q, p));
	*(struct __ns3__BatchJobEx*)p = *(struct __ns3__BatchJobEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__BatchJob(struct soap *soap, struct __ns3__BatchJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__BatchJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__BatchJob(struct soap *soap, const struct __ns3__BatchJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__BatchJob(soap, &a->ns1__BatchJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__BatchJob(struct soap *soap, const struct __ns3__BatchJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__BatchJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__BatchJob(struct soap *soap, const char *tag, int id, const struct __ns3__BatchJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__BatchJob(soap, "ns1:BatchJob", -1, &a->ns1__BatchJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__BatchJob * SOAP_FMAC4 soap_get___ns3__BatchJob(struct soap *soap, struct __ns3__BatchJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__BatchJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__BatchJob * SOAP_FMAC4 soap_in___ns3__BatchJob(struct soap *soap, const char *tag, struct __ns3__BatchJob *a, const char *type)
{
	short soap_flag_ns1__BatchJob = 1;
	short soap_flag;
	a = (struct __ns3__BatchJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__BatchJob, sizeof(struct __ns3__BatchJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__BatchJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__BatchJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__BatchJob(soap, "ns1:BatchJob", &a->ns1__BatchJob, ""))
				{	soap_flag_ns1__BatchJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__BatchJob * SOAP_FMAC6 soap_new___ns3__BatchJob(struct soap *soap, int n)
{	return soap_instantiate___ns3__BatchJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__BatchJob(struct soap *soap, struct __ns3__BatchJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__BatchJob * SOAP_FMAC4 soap_instantiate___ns3__BatchJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__BatchJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__BatchJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__BatchJob;
		if (size)
			*size = sizeof(struct __ns3__BatchJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__BatchJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__BatchJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__BatchJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__BatchJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__BatchJob %p -> %p\n", q, p));
	*(struct __ns3__BatchJob*)p = *(struct __ns3__BatchJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CloseJob(struct soap *soap, struct __ns3__CloseJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CloseJob(struct soap *soap, const struct __ns3__CloseJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseJob(soap, &a->ns1__CloseJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CloseJob(struct soap *soap, const struct __ns3__CloseJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CloseJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CloseJob(struct soap *soap, const char *tag, int id, const struct __ns3__CloseJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseJob(soap, "ns1:CloseJob", -1, &a->ns1__CloseJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CloseJob * SOAP_FMAC4 soap_get___ns3__CloseJob(struct soap *soap, struct __ns3__CloseJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CloseJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__CloseJob * SOAP_FMAC4 soap_in___ns3__CloseJob(struct soap *soap, const char *tag, struct __ns3__CloseJob *a, const char *type)
{
	short soap_flag_ns1__CloseJob = 1;
	short soap_flag;
	a = (struct __ns3__CloseJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CloseJob, sizeof(struct __ns3__CloseJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CloseJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseJob(soap, "ns1:CloseJob", &a->ns1__CloseJob, ""))
				{	soap_flag_ns1__CloseJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__CloseJob * SOAP_FMAC6 soap_new___ns3__CloseJob(struct soap *soap, int n)
{	return soap_instantiate___ns3__CloseJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__CloseJob(struct soap *soap, struct __ns3__CloseJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__CloseJob * SOAP_FMAC4 soap_instantiate___ns3__CloseJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CloseJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CloseJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__CloseJob;
		if (size)
			*size = sizeof(struct __ns3__CloseJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__CloseJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CloseJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CloseJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CloseJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CloseJob %p -> %p\n", q, p));
	*(struct __ns3__CloseJob*)p = *(struct __ns3__CloseJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__ExecuteEx(struct soap *soap, struct __ns3__ExecuteEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ExecuteEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__ExecuteEx(struct soap *soap, const struct __ns3__ExecuteEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__ExecuteEx(soap, &a->ns1__ExecuteEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__ExecuteEx(struct soap *soap, const struct __ns3__ExecuteEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__ExecuteEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__ExecuteEx(struct soap *soap, const char *tag, int id, const struct __ns3__ExecuteEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__ExecuteEx(soap, "ns1:ExecuteEx", -1, &a->ns1__ExecuteEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__ExecuteEx * SOAP_FMAC4 soap_get___ns3__ExecuteEx(struct soap *soap, struct __ns3__ExecuteEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__ExecuteEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__ExecuteEx * SOAP_FMAC4 soap_in___ns3__ExecuteEx(struct soap *soap, const char *tag, struct __ns3__ExecuteEx *a, const char *type)
{
	short soap_flag_ns1__ExecuteEx = 1;
	short soap_flag;
	a = (struct __ns3__ExecuteEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__ExecuteEx, sizeof(struct __ns3__ExecuteEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__ExecuteEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ExecuteEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ExecuteEx(soap, "ns1:ExecuteEx", &a->ns1__ExecuteEx, ""))
				{	soap_flag_ns1__ExecuteEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__ExecuteEx * SOAP_FMAC6 soap_new___ns3__ExecuteEx(struct soap *soap, int n)
{	return soap_instantiate___ns3__ExecuteEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__ExecuteEx(struct soap *soap, struct __ns3__ExecuteEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__ExecuteEx * SOAP_FMAC4 soap_instantiate___ns3__ExecuteEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__ExecuteEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__ExecuteEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__ExecuteEx;
		if (size)
			*size = sizeof(struct __ns3__ExecuteEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__ExecuteEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__ExecuteEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__ExecuteEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__ExecuteEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__ExecuteEx %p -> %p\n", q, p));
	*(struct __ns3__ExecuteEx*)p = *(struct __ns3__ExecuteEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__Execute(struct soap *soap, struct __ns3__Execute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Execute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__Execute(struct soap *soap, const struct __ns3__Execute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Execute(soap, &a->ns1__Execute);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__Execute(struct soap *soap, const struct __ns3__Execute *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__Execute(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__Execute(struct soap *soap, const char *tag, int id, const struct __ns3__Execute *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Execute(soap, "ns1:Execute", -1, &a->ns1__Execute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__Execute * SOAP_FMAC4 soap_get___ns3__Execute(struct soap *soap, struct __ns3__Execute *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__Execute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__Execute * SOAP_FMAC4 soap_in___ns3__Execute(struct soap *soap, const char *tag, struct __ns3__Execute *a, const char *type)
{
	short soap_flag_ns1__Execute = 1;
	short soap_flag;
	a = (struct __ns3__Execute *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__Execute, sizeof(struct __ns3__Execute), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__Execute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Execute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Execute(soap, "ns1:Execute", &a->ns1__Execute, ""))
				{	soap_flag_ns1__Execute--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__Execute * SOAP_FMAC6 soap_new___ns3__Execute(struct soap *soap, int n)
{	return soap_instantiate___ns3__Execute(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__Execute(struct soap *soap, struct __ns3__Execute *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__Execute * SOAP_FMAC4 soap_instantiate___ns3__Execute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__Execute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__Execute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__Execute;
		if (size)
			*size = sizeof(struct __ns3__Execute);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__Execute[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__Execute);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__Execute*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__Execute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__Execute %p -> %p\n", q, p));
	*(struct __ns3__Execute*)p = *(struct __ns3__Execute*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__RenewLease(struct soap *soap, struct __ns3__RenewLease *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RenewLease = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__RenewLease(struct soap *soap, const struct __ns3__RenewLease *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RenewLease(soap, &a->ns1__RenewLease);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__RenewLease(struct soap *soap, const struct __ns3__RenewLease *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__RenewLease(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__RenewLease(struct soap *soap, const char *tag, int id, const struct __ns3__RenewLease *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RenewLease(soap, "ns1:RenewLease", -1, &a->ns1__RenewLease, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__RenewLease * SOAP_FMAC4 soap_get___ns3__RenewLease(struct soap *soap, struct __ns3__RenewLease *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__RenewLease(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__RenewLease * SOAP_FMAC4 soap_in___ns3__RenewLease(struct soap *soap, const char *tag, struct __ns3__RenewLease *a, const char *type)
{
	short soap_flag_ns1__RenewLease = 1;
	short soap_flag;
	a = (struct __ns3__RenewLease *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__RenewLease, sizeof(struct __ns3__RenewLease), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__RenewLease(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RenewLease && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RenewLease(soap, "ns1:RenewLease", &a->ns1__RenewLease, ""))
				{	soap_flag_ns1__RenewLease--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__RenewLease * SOAP_FMAC6 soap_new___ns3__RenewLease(struct soap *soap, int n)
{	return soap_instantiate___ns3__RenewLease(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__RenewLease(struct soap *soap, struct __ns3__RenewLease *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__RenewLease * SOAP_FMAC4 soap_instantiate___ns3__RenewLease(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__RenewLease(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__RenewLease, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__RenewLease;
		if (size)
			*size = sizeof(struct __ns3__RenewLease);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__RenewLease[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__RenewLease);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__RenewLease*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__RenewLease(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__RenewLease %p -> %p\n", q, p));
	*(struct __ns3__RenewLease*)p = *(struct __ns3__RenewLease*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__OpenJobEx(struct soap *soap, struct __ns3__OpenJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenJobEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__OpenJobEx(struct soap *soap, const struct __ns3__OpenJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenJobEx(soap, &a->ns1__OpenJobEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__OpenJobEx(struct soap *soap, const struct __ns3__OpenJobEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__OpenJobEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__OpenJobEx(struct soap *soap, const char *tag, int id, const struct __ns3__OpenJobEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__OpenJobEx(soap, "ns1:OpenJobEx", -1, &a->ns1__OpenJobEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__OpenJobEx * SOAP_FMAC4 soap_get___ns3__OpenJobEx(struct soap *soap, struct __ns3__OpenJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__OpenJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__OpenJobEx * SOAP_FMAC4 soap_in___ns3__OpenJobEx(struct soap *soap, const char *tag, struct __ns3__OpenJobEx *a, const char *type)
{
	short soap_flag_ns1__OpenJobEx = 1;
	short soap_flag;
	a = (struct __ns3__OpenJobEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__OpenJobEx, sizeof(struct __ns3__OpenJobEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__OpenJobEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenJobEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenJobEx(soap, "ns1:OpenJobEx", &a->ns1__OpenJobEx, ""))
				{	soap_flag_ns1__OpenJobEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__OpenJobEx * SOAP_FMAC6 soap_new___ns3__OpenJobEx(struct soap *soap, int n)
{	return soap_instantiate___ns3__OpenJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__OpenJobEx(struct soap *soap, struct __ns3__OpenJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__OpenJobEx * SOAP_FMAC4 soap_instantiate___ns3__OpenJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__OpenJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__OpenJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__OpenJobEx;
		if (size)
			*size = sizeof(struct __ns3__OpenJobEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__OpenJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__OpenJobEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__OpenJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__OpenJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__OpenJobEx %p -> %p\n", q, p));
	*(struct __ns3__OpenJobEx*)p = *(struct __ns3__OpenJobEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__OpenJob(struct soap *soap, struct __ns3__OpenJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__OpenJob(struct soap *soap, const struct __ns3__OpenJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenJob(soap, &a->ns1__OpenJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__OpenJob(struct soap *soap, const struct __ns3__OpenJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__OpenJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__OpenJob(struct soap *soap, const char *tag, int id, const struct __ns3__OpenJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__OpenJob(soap, "ns1:OpenJob", -1, &a->ns1__OpenJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__OpenJob * SOAP_FMAC4 soap_get___ns3__OpenJob(struct soap *soap, struct __ns3__OpenJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__OpenJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__OpenJob * SOAP_FMAC4 soap_in___ns3__OpenJob(struct soap *soap, const char *tag, struct __ns3__OpenJob *a, const char *type)
{
	short soap_flag_ns1__OpenJob = 1;
	short soap_flag;
	a = (struct __ns3__OpenJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__OpenJob, sizeof(struct __ns3__OpenJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__OpenJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenJob(soap, "ns1:OpenJob", &a->ns1__OpenJob, ""))
				{	soap_flag_ns1__OpenJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__OpenJob * SOAP_FMAC6 soap_new___ns3__OpenJob(struct soap *soap, int n)
{	return soap_instantiate___ns3__OpenJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__OpenJob(struct soap *soap, struct __ns3__OpenJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__OpenJob * SOAP_FMAC4 soap_instantiate___ns3__OpenJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__OpenJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__OpenJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__OpenJob;
		if (size)
			*size = sizeof(struct __ns3__OpenJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__OpenJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__OpenJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__OpenJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__OpenJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__OpenJob %p -> %p\n", q, p));
	*(struct __ns3__OpenJob*)p = *(struct __ns3__OpenJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetStatus(struct soap *soap, struct __ns3__GetStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetStatus(struct soap *soap, const struct __ns3__GetStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStatus(soap, &a->ns1__GetStatus);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetStatus(struct soap *soap, const struct __ns3__GetStatus *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetStatus(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetStatus(struct soap *soap, const char *tag, int id, const struct __ns3__GetStatus *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStatus(soap, "ns1:GetStatus", -1, &a->ns1__GetStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetStatus * SOAP_FMAC4 soap_get___ns3__GetStatus(struct soap *soap, struct __ns3__GetStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetStatus * SOAP_FMAC4 soap_in___ns3__GetStatus(struct soap *soap, const char *tag, struct __ns3__GetStatus *a, const char *type)
{
	short soap_flag_ns1__GetStatus = 1;
	short soap_flag;
	a = (struct __ns3__GetStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetStatus, sizeof(struct __ns3__GetStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStatus(soap, "ns1:GetStatus", &a->ns1__GetStatus, ""))
				{	soap_flag_ns1__GetStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetStatus * SOAP_FMAC6 soap_new___ns3__GetStatus(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetStatus(struct soap *soap, struct __ns3__GetStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetStatus * SOAP_FMAC4 soap_instantiate___ns3__GetStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetStatus;
		if (size)
			*size = sizeof(struct __ns3__GetStatus);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetStatus %p -> %p\n", q, p));
	*(struct __ns3__GetStatus*)p = *(struct __ns3__GetStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetVersion(struct soap *soap, struct __ns3__GetVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetVersion(struct soap *soap, const struct __ns3__GetVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetVersion(soap, &a->ns1__GetVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetVersion(struct soap *soap, const struct __ns3__GetVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetVersion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetVersion(struct soap *soap, const char *tag, int id, const struct __ns3__GetVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetVersion(soap, "ns1:GetVersion", -1, &a->ns1__GetVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetVersion * SOAP_FMAC4 soap_get___ns3__GetVersion(struct soap *soap, struct __ns3__GetVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetVersion * SOAP_FMAC4 soap_in___ns3__GetVersion(struct soap *soap, const char *tag, struct __ns3__GetVersion *a, const char *type)
{
	short soap_flag_ns1__GetVersion = 1;
	short soap_flag;
	a = (struct __ns3__GetVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetVersion, sizeof(struct __ns3__GetVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVersion(soap, "ns1:GetVersion", &a->ns1__GetVersion, ""))
				{	soap_flag_ns1__GetVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetVersion * SOAP_FMAC6 soap_new___ns3__GetVersion(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetVersion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetVersion(struct soap *soap, struct __ns3__GetVersion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetVersion * SOAP_FMAC4 soap_instantiate___ns3__GetVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetVersion;
		if (size)
			*size = sizeof(struct __ns3__GetVersion);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetVersion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetVersion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetVersion %p -> %p\n", q, p));
	*(struct __ns3__GetVersion*)p = *(struct __ns3__GetVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__HelloWorld(struct soap *soap, struct __ns3__HelloWorld *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__HelloWorld = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__HelloWorld(struct soap *soap, const struct __ns3__HelloWorld *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__HelloWorld(soap, &a->ns1__HelloWorld);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__HelloWorld(struct soap *soap, const struct __ns3__HelloWorld *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__HelloWorld(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__HelloWorld(struct soap *soap, const char *tag, int id, const struct __ns3__HelloWorld *a, const char *type)
{
	if (soap_out_PointerTo_ns1__HelloWorld(soap, "ns1:HelloWorld", -1, &a->ns1__HelloWorld, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__HelloWorld * SOAP_FMAC4 soap_get___ns3__HelloWorld(struct soap *soap, struct __ns3__HelloWorld *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__HelloWorld(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__HelloWorld * SOAP_FMAC4 soap_in___ns3__HelloWorld(struct soap *soap, const char *tag, struct __ns3__HelloWorld *a, const char *type)
{
	short soap_flag_ns1__HelloWorld = 1;
	short soap_flag;
	a = (struct __ns3__HelloWorld *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__HelloWorld, sizeof(struct __ns3__HelloWorld), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__HelloWorld(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__HelloWorld && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__HelloWorld(soap, "ns1:HelloWorld", &a->ns1__HelloWorld, ""))
				{	soap_flag_ns1__HelloWorld--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__HelloWorld * SOAP_FMAC6 soap_new___ns3__HelloWorld(struct soap *soap, int n)
{	return soap_instantiate___ns3__HelloWorld(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__HelloWorld(struct soap *soap, struct __ns3__HelloWorld *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__HelloWorld * SOAP_FMAC4 soap_instantiate___ns3__HelloWorld(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__HelloWorld(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__HelloWorld, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__HelloWorld;
		if (size)
			*size = sizeof(struct __ns3__HelloWorld);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__HelloWorld[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__HelloWorld);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__HelloWorld*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__HelloWorld(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__HelloWorld %p -> %p\n", q, p));
	*(struct __ns3__HelloWorld*)p = *(struct __ns3__HelloWorld*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__DiagEx(struct soap *soap, struct __ns2__DiagEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DiagEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__DiagEx(struct soap *soap, const struct __ns2__DiagEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DiagEx(soap, &a->ns1__DiagEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__DiagEx(struct soap *soap, const struct __ns2__DiagEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__DiagEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__DiagEx(struct soap *soap, const char *tag, int id, const struct __ns2__DiagEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DiagEx(soap, "ns1:DiagEx", -1, &a->ns1__DiagEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__DiagEx * SOAP_FMAC4 soap_get___ns2__DiagEx(struct soap *soap, struct __ns2__DiagEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__DiagEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__DiagEx * SOAP_FMAC4 soap_in___ns2__DiagEx(struct soap *soap, const char *tag, struct __ns2__DiagEx *a, const char *type)
{
	short soap_flag_ns1__DiagEx = 1;
	short soap_flag;
	a = (struct __ns2__DiagEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__DiagEx, sizeof(struct __ns2__DiagEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__DiagEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DiagEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DiagEx(soap, "ns1:DiagEx", &a->ns1__DiagEx, ""))
				{	soap_flag_ns1__DiagEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__DiagEx * SOAP_FMAC6 soap_new___ns2__DiagEx(struct soap *soap, int n)
{	return soap_instantiate___ns2__DiagEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__DiagEx(struct soap *soap, struct __ns2__DiagEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__DiagEx * SOAP_FMAC4 soap_instantiate___ns2__DiagEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__DiagEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__DiagEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__DiagEx;
		if (size)
			*size = sizeof(struct __ns2__DiagEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__DiagEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__DiagEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__DiagEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__DiagEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__DiagEx %p -> %p\n", q, p));
	*(struct __ns2__DiagEx*)p = *(struct __ns2__DiagEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__Diag(struct soap *soap, struct __ns2__Diag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Diag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__Diag(struct soap *soap, const struct __ns2__Diag *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Diag(soap, &a->ns1__Diag);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__Diag(struct soap *soap, const struct __ns2__Diag *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__Diag(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__Diag(struct soap *soap, const char *tag, int id, const struct __ns2__Diag *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Diag(soap, "ns1:Diag", -1, &a->ns1__Diag, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__Diag * SOAP_FMAC4 soap_get___ns2__Diag(struct soap *soap, struct __ns2__Diag *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__Diag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__Diag * SOAP_FMAC4 soap_in___ns2__Diag(struct soap *soap, const char *tag, struct __ns2__Diag *a, const char *type)
{
	short soap_flag_ns1__Diag = 1;
	short soap_flag;
	a = (struct __ns2__Diag *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__Diag, sizeof(struct __ns2__Diag), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__Diag(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Diag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Diag(soap, "ns1:Diag", &a->ns1__Diag, ""))
				{	soap_flag_ns1__Diag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__Diag * SOAP_FMAC6 soap_new___ns2__Diag(struct soap *soap, int n)
{	return soap_instantiate___ns2__Diag(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__Diag(struct soap *soap, struct __ns2__Diag *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__Diag * SOAP_FMAC4 soap_instantiate___ns2__Diag(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__Diag(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__Diag, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__Diag;
		if (size)
			*size = sizeof(struct __ns2__Diag);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__Diag[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__Diag);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__Diag*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__Diag(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__Diag %p -> %p\n", q, p));
	*(struct __ns2__Diag*)p = *(struct __ns2__Diag*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CloseAllJobs(struct soap *soap, struct __ns2__CloseAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseAllJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CloseAllJobs(struct soap *soap, const struct __ns2__CloseAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseAllJobs(soap, &a->ns1__CloseAllJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CloseAllJobs(struct soap *soap, const struct __ns2__CloseAllJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CloseAllJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CloseAllJobs(struct soap *soap, const char *tag, int id, const struct __ns2__CloseAllJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseAllJobs(soap, "ns1:CloseAllJobs", -1, &a->ns1__CloseAllJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CloseAllJobs * SOAP_FMAC4 soap_get___ns2__CloseAllJobs(struct soap *soap, struct __ns2__CloseAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CloseAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__CloseAllJobs * SOAP_FMAC4 soap_in___ns2__CloseAllJobs(struct soap *soap, const char *tag, struct __ns2__CloseAllJobs *a, const char *type)
{
	short soap_flag_ns1__CloseAllJobs = 1;
	short soap_flag;
	a = (struct __ns2__CloseAllJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CloseAllJobs, sizeof(struct __ns2__CloseAllJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CloseAllJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseAllJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseAllJobs(soap, "ns1:CloseAllJobs", &a->ns1__CloseAllJobs, ""))
				{	soap_flag_ns1__CloseAllJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__CloseAllJobs * SOAP_FMAC6 soap_new___ns2__CloseAllJobs(struct soap *soap, int n)
{	return soap_instantiate___ns2__CloseAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__CloseAllJobs(struct soap *soap, struct __ns2__CloseAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__CloseAllJobs * SOAP_FMAC4 soap_instantiate___ns2__CloseAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CloseAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CloseAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__CloseAllJobs;
		if (size)
			*size = sizeof(struct __ns2__CloseAllJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__CloseAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CloseAllJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CloseAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CloseAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CloseAllJobs %p -> %p\n", q, p));
	*(struct __ns2__CloseAllJobs*)p = *(struct __ns2__CloseAllJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CloseExpiredJobs(struct soap *soap, struct __ns2__CloseExpiredJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseExpiredJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CloseExpiredJobs(struct soap *soap, const struct __ns2__CloseExpiredJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseExpiredJobs(soap, &a->ns1__CloseExpiredJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CloseExpiredJobs(struct soap *soap, const struct __ns2__CloseExpiredJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CloseExpiredJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CloseExpiredJobs(struct soap *soap, const char *tag, int id, const struct __ns2__CloseExpiredJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseExpiredJobs(soap, "ns1:CloseExpiredJobs", -1, &a->ns1__CloseExpiredJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CloseExpiredJobs * SOAP_FMAC4 soap_get___ns2__CloseExpiredJobs(struct soap *soap, struct __ns2__CloseExpiredJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CloseExpiredJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__CloseExpiredJobs * SOAP_FMAC4 soap_in___ns2__CloseExpiredJobs(struct soap *soap, const char *tag, struct __ns2__CloseExpiredJobs *a, const char *type)
{
	short soap_flag_ns1__CloseExpiredJobs = 1;
	short soap_flag;
	a = (struct __ns2__CloseExpiredJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CloseExpiredJobs, sizeof(struct __ns2__CloseExpiredJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CloseExpiredJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseExpiredJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseExpiredJobs(soap, "ns1:CloseExpiredJobs", &a->ns1__CloseExpiredJobs, ""))
				{	soap_flag_ns1__CloseExpiredJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__CloseExpiredJobs * SOAP_FMAC6 soap_new___ns2__CloseExpiredJobs(struct soap *soap, int n)
{	return soap_instantiate___ns2__CloseExpiredJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__CloseExpiredJobs(struct soap *soap, struct __ns2__CloseExpiredJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__CloseExpiredJobs * SOAP_FMAC4 soap_instantiate___ns2__CloseExpiredJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CloseExpiredJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CloseExpiredJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__CloseExpiredJobs;
		if (size)
			*size = sizeof(struct __ns2__CloseExpiredJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__CloseExpiredJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CloseExpiredJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CloseExpiredJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CloseExpiredJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CloseExpiredJobs %p -> %p\n", q, p));
	*(struct __ns2__CloseExpiredJobs*)p = *(struct __ns2__CloseExpiredJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetAllJobsEx(struct soap *soap, struct __ns2__GetAllJobsEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAllJobsEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetAllJobsEx(struct soap *soap, const struct __ns2__GetAllJobsEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAllJobsEx(soap, &a->ns1__GetAllJobsEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetAllJobsEx(struct soap *soap, const struct __ns2__GetAllJobsEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetAllJobsEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetAllJobsEx(struct soap *soap, const char *tag, int id, const struct __ns2__GetAllJobsEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAllJobsEx(soap, "ns1:GetAllJobsEx", -1, &a->ns1__GetAllJobsEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetAllJobsEx * SOAP_FMAC4 soap_get___ns2__GetAllJobsEx(struct soap *soap, struct __ns2__GetAllJobsEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetAllJobsEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetAllJobsEx * SOAP_FMAC4 soap_in___ns2__GetAllJobsEx(struct soap *soap, const char *tag, struct __ns2__GetAllJobsEx *a, const char *type)
{
	short soap_flag_ns1__GetAllJobsEx = 1;
	short soap_flag;
	a = (struct __ns2__GetAllJobsEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetAllJobsEx, sizeof(struct __ns2__GetAllJobsEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetAllJobsEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAllJobsEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAllJobsEx(soap, "ns1:GetAllJobsEx", &a->ns1__GetAllJobsEx, ""))
				{	soap_flag_ns1__GetAllJobsEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetAllJobsEx * SOAP_FMAC6 soap_new___ns2__GetAllJobsEx(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetAllJobsEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetAllJobsEx(struct soap *soap, struct __ns2__GetAllJobsEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetAllJobsEx * SOAP_FMAC4 soap_instantiate___ns2__GetAllJobsEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetAllJobsEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetAllJobsEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetAllJobsEx;
		if (size)
			*size = sizeof(struct __ns2__GetAllJobsEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetAllJobsEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetAllJobsEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetAllJobsEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetAllJobsEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetAllJobsEx %p -> %p\n", q, p));
	*(struct __ns2__GetAllJobsEx*)p = *(struct __ns2__GetAllJobsEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetAllJobs(struct soap *soap, struct __ns2__GetAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAllJobs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetAllJobs(struct soap *soap, const struct __ns2__GetAllJobs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAllJobs(soap, &a->ns1__GetAllJobs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetAllJobs(struct soap *soap, const struct __ns2__GetAllJobs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetAllJobs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetAllJobs(struct soap *soap, const char *tag, int id, const struct __ns2__GetAllJobs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAllJobs(soap, "ns1:GetAllJobs", -1, &a->ns1__GetAllJobs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetAllJobs * SOAP_FMAC4 soap_get___ns2__GetAllJobs(struct soap *soap, struct __ns2__GetAllJobs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetAllJobs * SOAP_FMAC4 soap_in___ns2__GetAllJobs(struct soap *soap, const char *tag, struct __ns2__GetAllJobs *a, const char *type)
{
	short soap_flag_ns1__GetAllJobs = 1;
	short soap_flag;
	a = (struct __ns2__GetAllJobs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetAllJobs, sizeof(struct __ns2__GetAllJobs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetAllJobs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAllJobs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAllJobs(soap, "ns1:GetAllJobs", &a->ns1__GetAllJobs, ""))
				{	soap_flag_ns1__GetAllJobs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetAllJobs * SOAP_FMAC6 soap_new___ns2__GetAllJobs(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetAllJobs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetAllJobs(struct soap *soap, struct __ns2__GetAllJobs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetAllJobs * SOAP_FMAC4 soap_instantiate___ns2__GetAllJobs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetAllJobs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetAllJobs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetAllJobs;
		if (size)
			*size = sizeof(struct __ns2__GetAllJobs);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetAllJobs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetAllJobs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetAllJobs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetAllJobs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetAllJobs %p -> %p\n", q, p));
	*(struct __ns2__GetAllJobs*)p = *(struct __ns2__GetAllJobs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetExpiration(struct soap *soap, struct __ns2__GetExpiration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetExpiration = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetExpiration(struct soap *soap, const struct __ns2__GetExpiration *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetExpiration(soap, &a->ns1__GetExpiration);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetExpiration(struct soap *soap, const struct __ns2__GetExpiration *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetExpiration(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetExpiration(struct soap *soap, const char *tag, int id, const struct __ns2__GetExpiration *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetExpiration(soap, "ns1:GetExpiration", -1, &a->ns1__GetExpiration, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetExpiration * SOAP_FMAC4 soap_get___ns2__GetExpiration(struct soap *soap, struct __ns2__GetExpiration *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetExpiration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetExpiration * SOAP_FMAC4 soap_in___ns2__GetExpiration(struct soap *soap, const char *tag, struct __ns2__GetExpiration *a, const char *type)
{
	short soap_flag_ns1__GetExpiration = 1;
	short soap_flag;
	a = (struct __ns2__GetExpiration *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetExpiration, sizeof(struct __ns2__GetExpiration), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetExpiration(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetExpiration && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetExpiration(soap, "ns1:GetExpiration", &a->ns1__GetExpiration, ""))
				{	soap_flag_ns1__GetExpiration--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetExpiration * SOAP_FMAC6 soap_new___ns2__GetExpiration(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetExpiration(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetExpiration(struct soap *soap, struct __ns2__GetExpiration *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetExpiration * SOAP_FMAC4 soap_instantiate___ns2__GetExpiration(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetExpiration(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetExpiration, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetExpiration;
		if (size)
			*size = sizeof(struct __ns2__GetExpiration);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetExpiration[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetExpiration);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetExpiration*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetExpiration(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetExpiration %p -> %p\n", q, p));
	*(struct __ns2__GetExpiration*)p = *(struct __ns2__GetExpiration*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__BatchJobEx(struct soap *soap, struct __ns2__BatchJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__BatchJobEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__BatchJobEx(struct soap *soap, const struct __ns2__BatchJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__BatchJobEx(soap, &a->ns1__BatchJobEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__BatchJobEx(struct soap *soap, const struct __ns2__BatchJobEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__BatchJobEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__BatchJobEx(struct soap *soap, const char *tag, int id, const struct __ns2__BatchJobEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__BatchJobEx(soap, "ns1:BatchJobEx", -1, &a->ns1__BatchJobEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__BatchJobEx * SOAP_FMAC4 soap_get___ns2__BatchJobEx(struct soap *soap, struct __ns2__BatchJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__BatchJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__BatchJobEx * SOAP_FMAC4 soap_in___ns2__BatchJobEx(struct soap *soap, const char *tag, struct __ns2__BatchJobEx *a, const char *type)
{
	short soap_flag_ns1__BatchJobEx = 1;
	short soap_flag;
	a = (struct __ns2__BatchJobEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__BatchJobEx, sizeof(struct __ns2__BatchJobEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__BatchJobEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__BatchJobEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__BatchJobEx(soap, "ns1:BatchJobEx", &a->ns1__BatchJobEx, ""))
				{	soap_flag_ns1__BatchJobEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__BatchJobEx * SOAP_FMAC6 soap_new___ns2__BatchJobEx(struct soap *soap, int n)
{	return soap_instantiate___ns2__BatchJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__BatchJobEx(struct soap *soap, struct __ns2__BatchJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__BatchJobEx * SOAP_FMAC4 soap_instantiate___ns2__BatchJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__BatchJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__BatchJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__BatchJobEx;
		if (size)
			*size = sizeof(struct __ns2__BatchJobEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__BatchJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__BatchJobEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__BatchJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__BatchJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__BatchJobEx %p -> %p\n", q, p));
	*(struct __ns2__BatchJobEx*)p = *(struct __ns2__BatchJobEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__BatchJob(struct soap *soap, struct __ns2__BatchJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__BatchJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__BatchJob(struct soap *soap, const struct __ns2__BatchJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__BatchJob(soap, &a->ns1__BatchJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__BatchJob(struct soap *soap, const struct __ns2__BatchJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__BatchJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__BatchJob(struct soap *soap, const char *tag, int id, const struct __ns2__BatchJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__BatchJob(soap, "ns1:BatchJob", -1, &a->ns1__BatchJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__BatchJob * SOAP_FMAC4 soap_get___ns2__BatchJob(struct soap *soap, struct __ns2__BatchJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__BatchJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__BatchJob * SOAP_FMAC4 soap_in___ns2__BatchJob(struct soap *soap, const char *tag, struct __ns2__BatchJob *a, const char *type)
{
	short soap_flag_ns1__BatchJob = 1;
	short soap_flag;
	a = (struct __ns2__BatchJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__BatchJob, sizeof(struct __ns2__BatchJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__BatchJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__BatchJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__BatchJob(soap, "ns1:BatchJob", &a->ns1__BatchJob, ""))
				{	soap_flag_ns1__BatchJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__BatchJob * SOAP_FMAC6 soap_new___ns2__BatchJob(struct soap *soap, int n)
{	return soap_instantiate___ns2__BatchJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__BatchJob(struct soap *soap, struct __ns2__BatchJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__BatchJob * SOAP_FMAC4 soap_instantiate___ns2__BatchJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__BatchJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__BatchJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__BatchJob;
		if (size)
			*size = sizeof(struct __ns2__BatchJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__BatchJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__BatchJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__BatchJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__BatchJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__BatchJob %p -> %p\n", q, p));
	*(struct __ns2__BatchJob*)p = *(struct __ns2__BatchJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CloseJob(struct soap *soap, struct __ns2__CloseJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CloseJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CloseJob(struct soap *soap, const struct __ns2__CloseJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CloseJob(soap, &a->ns1__CloseJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CloseJob(struct soap *soap, const struct __ns2__CloseJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CloseJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CloseJob(struct soap *soap, const char *tag, int id, const struct __ns2__CloseJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CloseJob(soap, "ns1:CloseJob", -1, &a->ns1__CloseJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CloseJob * SOAP_FMAC4 soap_get___ns2__CloseJob(struct soap *soap, struct __ns2__CloseJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CloseJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__CloseJob * SOAP_FMAC4 soap_in___ns2__CloseJob(struct soap *soap, const char *tag, struct __ns2__CloseJob *a, const char *type)
{
	short soap_flag_ns1__CloseJob = 1;
	short soap_flag;
	a = (struct __ns2__CloseJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CloseJob, sizeof(struct __ns2__CloseJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CloseJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CloseJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CloseJob(soap, "ns1:CloseJob", &a->ns1__CloseJob, ""))
				{	soap_flag_ns1__CloseJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__CloseJob * SOAP_FMAC6 soap_new___ns2__CloseJob(struct soap *soap, int n)
{	return soap_instantiate___ns2__CloseJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__CloseJob(struct soap *soap, struct __ns2__CloseJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__CloseJob * SOAP_FMAC4 soap_instantiate___ns2__CloseJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CloseJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CloseJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__CloseJob;
		if (size)
			*size = sizeof(struct __ns2__CloseJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__CloseJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CloseJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CloseJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CloseJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CloseJob %p -> %p\n", q, p));
	*(struct __ns2__CloseJob*)p = *(struct __ns2__CloseJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__ExecuteEx(struct soap *soap, struct __ns2__ExecuteEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__ExecuteEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__ExecuteEx(struct soap *soap, const struct __ns2__ExecuteEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__ExecuteEx(soap, &a->ns1__ExecuteEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__ExecuteEx(struct soap *soap, const struct __ns2__ExecuteEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__ExecuteEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__ExecuteEx(struct soap *soap, const char *tag, int id, const struct __ns2__ExecuteEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__ExecuteEx(soap, "ns1:ExecuteEx", -1, &a->ns1__ExecuteEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__ExecuteEx * SOAP_FMAC4 soap_get___ns2__ExecuteEx(struct soap *soap, struct __ns2__ExecuteEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__ExecuteEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__ExecuteEx * SOAP_FMAC4 soap_in___ns2__ExecuteEx(struct soap *soap, const char *tag, struct __ns2__ExecuteEx *a, const char *type)
{
	short soap_flag_ns1__ExecuteEx = 1;
	short soap_flag;
	a = (struct __ns2__ExecuteEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__ExecuteEx, sizeof(struct __ns2__ExecuteEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__ExecuteEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__ExecuteEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ExecuteEx(soap, "ns1:ExecuteEx", &a->ns1__ExecuteEx, ""))
				{	soap_flag_ns1__ExecuteEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__ExecuteEx * SOAP_FMAC6 soap_new___ns2__ExecuteEx(struct soap *soap, int n)
{	return soap_instantiate___ns2__ExecuteEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__ExecuteEx(struct soap *soap, struct __ns2__ExecuteEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__ExecuteEx * SOAP_FMAC4 soap_instantiate___ns2__ExecuteEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__ExecuteEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__ExecuteEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__ExecuteEx;
		if (size)
			*size = sizeof(struct __ns2__ExecuteEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__ExecuteEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__ExecuteEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__ExecuteEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__ExecuteEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__ExecuteEx %p -> %p\n", q, p));
	*(struct __ns2__ExecuteEx*)p = *(struct __ns2__ExecuteEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__Execute(struct soap *soap, struct __ns2__Execute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Execute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__Execute(struct soap *soap, const struct __ns2__Execute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Execute(soap, &a->ns1__Execute);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__Execute(struct soap *soap, const struct __ns2__Execute *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__Execute(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__Execute(struct soap *soap, const char *tag, int id, const struct __ns2__Execute *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Execute(soap, "ns1:Execute", -1, &a->ns1__Execute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__Execute * SOAP_FMAC4 soap_get___ns2__Execute(struct soap *soap, struct __ns2__Execute *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__Execute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__Execute * SOAP_FMAC4 soap_in___ns2__Execute(struct soap *soap, const char *tag, struct __ns2__Execute *a, const char *type)
{
	short soap_flag_ns1__Execute = 1;
	short soap_flag;
	a = (struct __ns2__Execute *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__Execute, sizeof(struct __ns2__Execute), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__Execute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Execute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Execute(soap, "ns1:Execute", &a->ns1__Execute, ""))
				{	soap_flag_ns1__Execute--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__Execute * SOAP_FMAC6 soap_new___ns2__Execute(struct soap *soap, int n)
{	return soap_instantiate___ns2__Execute(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__Execute(struct soap *soap, struct __ns2__Execute *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__Execute * SOAP_FMAC4 soap_instantiate___ns2__Execute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__Execute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__Execute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__Execute;
		if (size)
			*size = sizeof(struct __ns2__Execute);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__Execute[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__Execute);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__Execute*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__Execute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__Execute %p -> %p\n", q, p));
	*(struct __ns2__Execute*)p = *(struct __ns2__Execute*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__RenewLease(struct soap *soap, struct __ns2__RenewLease *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RenewLease = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__RenewLease(struct soap *soap, const struct __ns2__RenewLease *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RenewLease(soap, &a->ns1__RenewLease);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__RenewLease(struct soap *soap, const struct __ns2__RenewLease *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__RenewLease(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__RenewLease(struct soap *soap, const char *tag, int id, const struct __ns2__RenewLease *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RenewLease(soap, "ns1:RenewLease", -1, &a->ns1__RenewLease, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__RenewLease * SOAP_FMAC4 soap_get___ns2__RenewLease(struct soap *soap, struct __ns2__RenewLease *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__RenewLease(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__RenewLease * SOAP_FMAC4 soap_in___ns2__RenewLease(struct soap *soap, const char *tag, struct __ns2__RenewLease *a, const char *type)
{
	short soap_flag_ns1__RenewLease = 1;
	short soap_flag;
	a = (struct __ns2__RenewLease *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__RenewLease, sizeof(struct __ns2__RenewLease), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__RenewLease(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RenewLease && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RenewLease(soap, "ns1:RenewLease", &a->ns1__RenewLease, ""))
				{	soap_flag_ns1__RenewLease--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__RenewLease * SOAP_FMAC6 soap_new___ns2__RenewLease(struct soap *soap, int n)
{	return soap_instantiate___ns2__RenewLease(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__RenewLease(struct soap *soap, struct __ns2__RenewLease *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__RenewLease * SOAP_FMAC4 soap_instantiate___ns2__RenewLease(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__RenewLease(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__RenewLease, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__RenewLease;
		if (size)
			*size = sizeof(struct __ns2__RenewLease);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__RenewLease[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__RenewLease);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__RenewLease*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__RenewLease(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__RenewLease %p -> %p\n", q, p));
	*(struct __ns2__RenewLease*)p = *(struct __ns2__RenewLease*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__OpenJobEx(struct soap *soap, struct __ns2__OpenJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenJobEx = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__OpenJobEx(struct soap *soap, const struct __ns2__OpenJobEx *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenJobEx(soap, &a->ns1__OpenJobEx);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__OpenJobEx(struct soap *soap, const struct __ns2__OpenJobEx *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__OpenJobEx(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__OpenJobEx(struct soap *soap, const char *tag, int id, const struct __ns2__OpenJobEx *a, const char *type)
{
	if (soap_out_PointerTo_ns1__OpenJobEx(soap, "ns1:OpenJobEx", -1, &a->ns1__OpenJobEx, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__OpenJobEx * SOAP_FMAC4 soap_get___ns2__OpenJobEx(struct soap *soap, struct __ns2__OpenJobEx *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__OpenJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__OpenJobEx * SOAP_FMAC4 soap_in___ns2__OpenJobEx(struct soap *soap, const char *tag, struct __ns2__OpenJobEx *a, const char *type)
{
	short soap_flag_ns1__OpenJobEx = 1;
	short soap_flag;
	a = (struct __ns2__OpenJobEx *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__OpenJobEx, sizeof(struct __ns2__OpenJobEx), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__OpenJobEx(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenJobEx && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenJobEx(soap, "ns1:OpenJobEx", &a->ns1__OpenJobEx, ""))
				{	soap_flag_ns1__OpenJobEx--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__OpenJobEx * SOAP_FMAC6 soap_new___ns2__OpenJobEx(struct soap *soap, int n)
{	return soap_instantiate___ns2__OpenJobEx(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__OpenJobEx(struct soap *soap, struct __ns2__OpenJobEx *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__OpenJobEx * SOAP_FMAC4 soap_instantiate___ns2__OpenJobEx(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__OpenJobEx(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__OpenJobEx, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__OpenJobEx;
		if (size)
			*size = sizeof(struct __ns2__OpenJobEx);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__OpenJobEx[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__OpenJobEx);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__OpenJobEx*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__OpenJobEx(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__OpenJobEx %p -> %p\n", q, p));
	*(struct __ns2__OpenJobEx*)p = *(struct __ns2__OpenJobEx*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__OpenJob(struct soap *soap, struct __ns2__OpenJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__OpenJob = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__OpenJob(struct soap *soap, const struct __ns2__OpenJob *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__OpenJob(soap, &a->ns1__OpenJob);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__OpenJob(struct soap *soap, const struct __ns2__OpenJob *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__OpenJob(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__OpenJob(struct soap *soap, const char *tag, int id, const struct __ns2__OpenJob *a, const char *type)
{
	if (soap_out_PointerTo_ns1__OpenJob(soap, "ns1:OpenJob", -1, &a->ns1__OpenJob, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__OpenJob * SOAP_FMAC4 soap_get___ns2__OpenJob(struct soap *soap, struct __ns2__OpenJob *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__OpenJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__OpenJob * SOAP_FMAC4 soap_in___ns2__OpenJob(struct soap *soap, const char *tag, struct __ns2__OpenJob *a, const char *type)
{
	short soap_flag_ns1__OpenJob = 1;
	short soap_flag;
	a = (struct __ns2__OpenJob *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__OpenJob, sizeof(struct __ns2__OpenJob), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__OpenJob(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__OpenJob && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__OpenJob(soap, "ns1:OpenJob", &a->ns1__OpenJob, ""))
				{	soap_flag_ns1__OpenJob--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__OpenJob * SOAP_FMAC6 soap_new___ns2__OpenJob(struct soap *soap, int n)
{	return soap_instantiate___ns2__OpenJob(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__OpenJob(struct soap *soap, struct __ns2__OpenJob *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__OpenJob * SOAP_FMAC4 soap_instantiate___ns2__OpenJob(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__OpenJob(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__OpenJob, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__OpenJob;
		if (size)
			*size = sizeof(struct __ns2__OpenJob);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__OpenJob[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__OpenJob);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__OpenJob*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__OpenJob(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__OpenJob %p -> %p\n", q, p));
	*(struct __ns2__OpenJob*)p = *(struct __ns2__OpenJob*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetStatus(struct soap *soap, struct __ns2__GetStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetStatus = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetStatus(struct soap *soap, const struct __ns2__GetStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetStatus(soap, &a->ns1__GetStatus);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetStatus(struct soap *soap, const struct __ns2__GetStatus *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetStatus(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetStatus(struct soap *soap, const char *tag, int id, const struct __ns2__GetStatus *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetStatus(soap, "ns1:GetStatus", -1, &a->ns1__GetStatus, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetStatus * SOAP_FMAC4 soap_get___ns2__GetStatus(struct soap *soap, struct __ns2__GetStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetStatus * SOAP_FMAC4 soap_in___ns2__GetStatus(struct soap *soap, const char *tag, struct __ns2__GetStatus *a, const char *type)
{
	short soap_flag_ns1__GetStatus = 1;
	short soap_flag;
	a = (struct __ns2__GetStatus *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetStatus, sizeof(struct __ns2__GetStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetStatus(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetStatus && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetStatus(soap, "ns1:GetStatus", &a->ns1__GetStatus, ""))
				{	soap_flag_ns1__GetStatus--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetStatus * SOAP_FMAC6 soap_new___ns2__GetStatus(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetStatus(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetStatus(struct soap *soap, struct __ns2__GetStatus *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetStatus * SOAP_FMAC4 soap_instantiate___ns2__GetStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetStatus;
		if (size)
			*size = sizeof(struct __ns2__GetStatus);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetStatus[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetStatus);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetStatus*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetStatus %p -> %p\n", q, p));
	*(struct __ns2__GetStatus*)p = *(struct __ns2__GetStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetVersion(struct soap *soap, struct __ns2__GetVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetVersion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetVersion(struct soap *soap, const struct __ns2__GetVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetVersion(soap, &a->ns1__GetVersion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetVersion(struct soap *soap, const struct __ns2__GetVersion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetVersion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetVersion(struct soap *soap, const char *tag, int id, const struct __ns2__GetVersion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetVersion(soap, "ns1:GetVersion", -1, &a->ns1__GetVersion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetVersion * SOAP_FMAC4 soap_get___ns2__GetVersion(struct soap *soap, struct __ns2__GetVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetVersion * SOAP_FMAC4 soap_in___ns2__GetVersion(struct soap *soap, const char *tag, struct __ns2__GetVersion *a, const char *type)
{
	short soap_flag_ns1__GetVersion = 1;
	short soap_flag;
	a = (struct __ns2__GetVersion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetVersion, sizeof(struct __ns2__GetVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetVersion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetVersion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetVersion(soap, "ns1:GetVersion", &a->ns1__GetVersion, ""))
				{	soap_flag_ns1__GetVersion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetVersion * SOAP_FMAC6 soap_new___ns2__GetVersion(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetVersion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetVersion(struct soap *soap, struct __ns2__GetVersion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetVersion * SOAP_FMAC4 soap_instantiate___ns2__GetVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetVersion;
		if (size)
			*size = sizeof(struct __ns2__GetVersion);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetVersion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetVersion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetVersion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetVersion %p -> %p\n", q, p));
	*(struct __ns2__GetVersion*)p = *(struct __ns2__GetVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__HelloWorld(struct soap *soap, struct __ns2__HelloWorld *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__HelloWorld = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__HelloWorld(struct soap *soap, const struct __ns2__HelloWorld *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__HelloWorld(soap, &a->ns1__HelloWorld);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__HelloWorld(struct soap *soap, const struct __ns2__HelloWorld *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__HelloWorld(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__HelloWorld(struct soap *soap, const char *tag, int id, const struct __ns2__HelloWorld *a, const char *type)
{
	if (soap_out_PointerTo_ns1__HelloWorld(soap, "ns1:HelloWorld", -1, &a->ns1__HelloWorld, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__HelloWorld * SOAP_FMAC4 soap_get___ns2__HelloWorld(struct soap *soap, struct __ns2__HelloWorld *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__HelloWorld(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__HelloWorld * SOAP_FMAC4 soap_in___ns2__HelloWorld(struct soap *soap, const char *tag, struct __ns2__HelloWorld *a, const char *type)
{
	short soap_flag_ns1__HelloWorld = 1;
	short soap_flag;
	a = (struct __ns2__HelloWorld *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__HelloWorld, sizeof(struct __ns2__HelloWorld), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__HelloWorld(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__HelloWorld && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__HelloWorld(soap, "ns1:HelloWorld", &a->ns1__HelloWorld, ""))
				{	soap_flag_ns1__HelloWorld--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__HelloWorld * SOAP_FMAC6 soap_new___ns2__HelloWorld(struct soap *soap, int n)
{	return soap_instantiate___ns2__HelloWorld(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__HelloWorld(struct soap *soap, struct __ns2__HelloWorld *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__HelloWorld * SOAP_FMAC4 soap_instantiate___ns2__HelloWorld(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__HelloWorld(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__HelloWorld, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__HelloWorld;
		if (size)
			*size = sizeof(struct __ns2__HelloWorld);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__HelloWorld[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__HelloWorld);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__HelloWorld*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__HelloWorld(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__HelloWorld %p -> %p\n", q, p));
	*(struct __ns2__HelloWorld*)p = *(struct __ns2__HelloWorld*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DiagExResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DiagExResponse);
	if (soap_out_PointerTo_ns1__DiagExResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DiagExResponse(struct soap *soap, const char *tag, int id, _ns1__DiagExResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DiagExResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DiagExResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DiagExResponse(struct soap *soap, _ns1__DiagExResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DiagExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DiagExResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DiagExResponse(struct soap *soap, const char *tag, _ns1__DiagExResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DiagExResponse **)soap_malloc(soap, sizeof(_ns1__DiagExResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DiagExResponse *)soap_instantiate__ns1__DiagExResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DiagExResponse ** p = (_ns1__DiagExResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DiagExResponse, sizeof(_ns1__DiagExResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DiagEx(struct soap *soap, _ns1__DiagEx *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DiagEx))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DiagEx(struct soap *soap, _ns1__DiagEx *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DiagEx);
	if (soap_out_PointerTo_ns1__DiagEx(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DiagEx(struct soap *soap, const char *tag, int id, _ns1__DiagEx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DiagEx);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DiagEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__DiagEx(struct soap *soap, _ns1__DiagEx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DiagEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DiagEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__DiagEx(struct soap *soap, const char *tag, _ns1__DiagEx **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DiagEx **)soap_malloc(soap, sizeof(_ns1__DiagEx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DiagEx *)soap_instantiate__ns1__DiagEx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DiagEx ** p = (_ns1__DiagEx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DiagEx, sizeof(_ns1__DiagEx), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DiagResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DiagResponse);
	if (soap_out_PointerTo_ns1__DiagResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DiagResponse(struct soap *soap, const char *tag, int id, _ns1__DiagResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DiagResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DiagResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DiagResponse(struct soap *soap, _ns1__DiagResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DiagResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DiagResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DiagResponse(struct soap *soap, const char *tag, _ns1__DiagResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DiagResponse **)soap_malloc(soap, sizeof(_ns1__DiagResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DiagResponse *)soap_instantiate__ns1__DiagResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DiagResponse ** p = (_ns1__DiagResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DiagResponse, sizeof(_ns1__DiagResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Diag(struct soap *soap, _ns1__Diag *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Diag))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Diag(struct soap *soap, _ns1__Diag *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Diag);
	if (soap_out_PointerTo_ns1__Diag(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Diag(struct soap *soap, const char *tag, int id, _ns1__Diag *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Diag);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Diag ** SOAP_FMAC4 soap_get_PointerTo_ns1__Diag(struct soap *soap, _ns1__Diag **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Diag(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__Diag ** SOAP_FMAC4 soap_in_PointerTo_ns1__Diag(struct soap *soap, const char *tag, _ns1__Diag **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Diag **)soap_malloc(soap, sizeof(_ns1__Diag *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Diag *)soap_instantiate__ns1__Diag(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Diag ** p = (_ns1__Diag **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Diag, sizeof(_ns1__Diag), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseAllJobsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseAllJobsResponse);
	if (soap_out_PointerTo_ns1__CloseAllJobsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseAllJobsResponse(struct soap *soap, const char *tag, int id, _ns1__CloseAllJobsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseAllJobsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseAllJobsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseAllJobsResponse(struct soap *soap, _ns1__CloseAllJobsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseAllJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseAllJobsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseAllJobsResponse(struct soap *soap, const char *tag, _ns1__CloseAllJobsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseAllJobsResponse **)soap_malloc(soap, sizeof(_ns1__CloseAllJobsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseAllJobsResponse *)soap_instantiate__ns1__CloseAllJobsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseAllJobsResponse ** p = (_ns1__CloseAllJobsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseAllJobsResponse, sizeof(_ns1__CloseAllJobsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseAllJobs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseAllJobs);
	if (soap_out_PointerTo_ns1__CloseAllJobs(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseAllJobs(struct soap *soap, const char *tag, int id, _ns1__CloseAllJobs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseAllJobs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseAllJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseAllJobs(struct soap *soap, _ns1__CloseAllJobs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseAllJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseAllJobs(struct soap *soap, const char *tag, _ns1__CloseAllJobs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseAllJobs **)soap_malloc(soap, sizeof(_ns1__CloseAllJobs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseAllJobs *)soap_instantiate__ns1__CloseAllJobs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseAllJobs ** p = (_ns1__CloseAllJobs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseAllJobs, sizeof(_ns1__CloseAllJobs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseExpiredJobsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseExpiredJobsResponse);
	if (soap_out_PointerTo_ns1__CloseExpiredJobsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseExpiredJobsResponse(struct soap *soap, const char *tag, int id, _ns1__CloseExpiredJobsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseExpiredJobsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseExpiredJobsResponse(struct soap *soap, _ns1__CloseExpiredJobsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseExpiredJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseExpiredJobsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseExpiredJobsResponse(struct soap *soap, const char *tag, _ns1__CloseExpiredJobsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseExpiredJobsResponse **)soap_malloc(soap, sizeof(_ns1__CloseExpiredJobsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseExpiredJobsResponse *)soap_instantiate__ns1__CloseExpiredJobsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseExpiredJobsResponse ** p = (_ns1__CloseExpiredJobsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseExpiredJobsResponse, sizeof(_ns1__CloseExpiredJobsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseExpiredJobs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseExpiredJobs);
	if (soap_out_PointerTo_ns1__CloseExpiredJobs(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseExpiredJobs(struct soap *soap, const char *tag, int id, _ns1__CloseExpiredJobs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseExpiredJobs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseExpiredJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseExpiredJobs(struct soap *soap, _ns1__CloseExpiredJobs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseExpiredJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseExpiredJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseExpiredJobs(struct soap *soap, const char *tag, _ns1__CloseExpiredJobs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseExpiredJobs **)soap_malloc(soap, sizeof(_ns1__CloseExpiredJobs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseExpiredJobs *)soap_instantiate__ns1__CloseExpiredJobs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseExpiredJobs ** p = (_ns1__CloseExpiredJobs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseExpiredJobs, sizeof(_ns1__CloseExpiredJobs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAllJobsExResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAllJobsExResponse);
	if (soap_out_PointerTo_ns1__GetAllJobsExResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobsExResponse(struct soap *soap, const char *tag, int id, _ns1__GetAllJobsExResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAllJobsExResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAllJobsExResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobsExResponse(struct soap *soap, _ns1__GetAllJobsExResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAllJobsExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAllJobsExResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobsExResponse(struct soap *soap, const char *tag, _ns1__GetAllJobsExResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAllJobsExResponse **)soap_malloc(soap, sizeof(_ns1__GetAllJobsExResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAllJobsExResponse *)soap_instantiate__ns1__GetAllJobsExResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAllJobsExResponse ** p = (_ns1__GetAllJobsExResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAllJobsExResponse, sizeof(_ns1__GetAllJobsExResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAllJobsEx))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAllJobsEx);
	if (soap_out_PointerTo_ns1__GetAllJobsEx(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobsEx(struct soap *soap, const char *tag, int id, _ns1__GetAllJobsEx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAllJobsEx);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAllJobsEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobsEx(struct soap *soap, _ns1__GetAllJobsEx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAllJobsEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAllJobsEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobsEx(struct soap *soap, const char *tag, _ns1__GetAllJobsEx **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAllJobsEx **)soap_malloc(soap, sizeof(_ns1__GetAllJobsEx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAllJobsEx *)soap_instantiate__ns1__GetAllJobsEx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAllJobsEx ** p = (_ns1__GetAllJobsEx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAllJobsEx, sizeof(_ns1__GetAllJobsEx), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAllJobsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAllJobsResponse);
	if (soap_out_PointerTo_ns1__GetAllJobsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobsResponse(struct soap *soap, const char *tag, int id, _ns1__GetAllJobsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAllJobsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAllJobsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobsResponse(struct soap *soap, _ns1__GetAllJobsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAllJobsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAllJobsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobsResponse(struct soap *soap, const char *tag, _ns1__GetAllJobsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAllJobsResponse **)soap_malloc(soap, sizeof(_ns1__GetAllJobsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAllJobsResponse *)soap_instantiate__ns1__GetAllJobsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAllJobsResponse ** p = (_ns1__GetAllJobsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAllJobsResponse, sizeof(_ns1__GetAllJobsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAllJobs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAllJobs);
	if (soap_out_PointerTo_ns1__GetAllJobs(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAllJobs(struct soap *soap, const char *tag, int id, _ns1__GetAllJobs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAllJobs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAllJobs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAllJobs(struct soap *soap, _ns1__GetAllJobs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAllJobs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAllJobs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAllJobs(struct soap *soap, const char *tag, _ns1__GetAllJobs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAllJobs **)soap_malloc(soap, sizeof(_ns1__GetAllJobs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAllJobs *)soap_instantiate__ns1__GetAllJobs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAllJobs ** p = (_ns1__GetAllJobs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAllJobs, sizeof(_ns1__GetAllJobs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetExpirationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetExpirationResponse);
	if (soap_out_PointerTo_ns1__GetExpirationResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetExpirationResponse(struct soap *soap, const char *tag, int id, _ns1__GetExpirationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetExpirationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetExpirationResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetExpirationResponse(struct soap *soap, _ns1__GetExpirationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetExpirationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetExpirationResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetExpirationResponse(struct soap *soap, const char *tag, _ns1__GetExpirationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetExpirationResponse **)soap_malloc(soap, sizeof(_ns1__GetExpirationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetExpirationResponse *)soap_instantiate__ns1__GetExpirationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetExpirationResponse ** p = (_ns1__GetExpirationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetExpirationResponse, sizeof(_ns1__GetExpirationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetExpiration))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetExpiration);
	if (soap_out_PointerTo_ns1__GetExpiration(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetExpiration(struct soap *soap, const char *tag, int id, _ns1__GetExpiration *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetExpiration);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetExpiration ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetExpiration(struct soap *soap, _ns1__GetExpiration **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetExpiration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetExpiration ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetExpiration(struct soap *soap, const char *tag, _ns1__GetExpiration **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetExpiration **)soap_malloc(soap, sizeof(_ns1__GetExpiration *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetExpiration *)soap_instantiate__ns1__GetExpiration(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetExpiration ** p = (_ns1__GetExpiration **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetExpiration, sizeof(_ns1__GetExpiration), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__BatchJobExResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__BatchJobExResponse);
	if (soap_out_PointerTo_ns1__BatchJobExResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJobExResponse(struct soap *soap, const char *tag, int id, _ns1__BatchJobExResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__BatchJobExResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__BatchJobExResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJobExResponse(struct soap *soap, _ns1__BatchJobExResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__BatchJobExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__BatchJobExResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJobExResponse(struct soap *soap, const char *tag, _ns1__BatchJobExResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__BatchJobExResponse **)soap_malloc(soap, sizeof(_ns1__BatchJobExResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__BatchJobExResponse *)soap_instantiate__ns1__BatchJobExResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__BatchJobExResponse ** p = (_ns1__BatchJobExResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__BatchJobExResponse, sizeof(_ns1__BatchJobExResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__BatchJobEx))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__BatchJobEx);
	if (soap_out_PointerTo_ns1__BatchJobEx(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJobEx(struct soap *soap, const char *tag, int id, _ns1__BatchJobEx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__BatchJobEx);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__BatchJobEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJobEx(struct soap *soap, _ns1__BatchJobEx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__BatchJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__BatchJobEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJobEx(struct soap *soap, const char *tag, _ns1__BatchJobEx **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__BatchJobEx **)soap_malloc(soap, sizeof(_ns1__BatchJobEx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__BatchJobEx *)soap_instantiate__ns1__BatchJobEx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__BatchJobEx ** p = (_ns1__BatchJobEx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__BatchJobEx, sizeof(_ns1__BatchJobEx), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__BatchJobResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__BatchJobResponse);
	if (soap_out_PointerTo_ns1__BatchJobResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJobResponse(struct soap *soap, const char *tag, int id, _ns1__BatchJobResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__BatchJobResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__BatchJobResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJobResponse(struct soap *soap, _ns1__BatchJobResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__BatchJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__BatchJobResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJobResponse(struct soap *soap, const char *tag, _ns1__BatchJobResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__BatchJobResponse **)soap_malloc(soap, sizeof(_ns1__BatchJobResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__BatchJobResponse *)soap_instantiate__ns1__BatchJobResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__BatchJobResponse ** p = (_ns1__BatchJobResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__BatchJobResponse, sizeof(_ns1__BatchJobResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BatchJob(struct soap *soap, _ns1__BatchJob *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__BatchJob))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BatchJob(struct soap *soap, _ns1__BatchJob *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__BatchJob);
	if (soap_out_PointerTo_ns1__BatchJob(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BatchJob(struct soap *soap, const char *tag, int id, _ns1__BatchJob *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__BatchJob);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__BatchJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__BatchJob(struct soap *soap, _ns1__BatchJob **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__BatchJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__BatchJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__BatchJob(struct soap *soap, const char *tag, _ns1__BatchJob **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__BatchJob **)soap_malloc(soap, sizeof(_ns1__BatchJob *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__BatchJob *)soap_instantiate__ns1__BatchJob(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__BatchJob ** p = (_ns1__BatchJob **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__BatchJob, sizeof(_ns1__BatchJob), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseJobResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseJobResponse);
	if (soap_out_PointerTo_ns1__CloseJobResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseJobResponse(struct soap *soap, const char *tag, int id, _ns1__CloseJobResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseJobResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseJobResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseJobResponse(struct soap *soap, _ns1__CloseJobResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseJobResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseJobResponse(struct soap *soap, const char *tag, _ns1__CloseJobResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseJobResponse **)soap_malloc(soap, sizeof(_ns1__CloseJobResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseJobResponse *)soap_instantiate__ns1__CloseJobResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseJobResponse ** p = (_ns1__CloseJobResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseJobResponse, sizeof(_ns1__CloseJobResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CloseJob(struct soap *soap, _ns1__CloseJob *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CloseJob))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CloseJob(struct soap *soap, _ns1__CloseJob *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CloseJob);
	if (soap_out_PointerTo_ns1__CloseJob(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CloseJob(struct soap *soap, const char *tag, int id, _ns1__CloseJob *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CloseJob);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CloseJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__CloseJob(struct soap *soap, _ns1__CloseJob **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CloseJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CloseJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__CloseJob(struct soap *soap, const char *tag, _ns1__CloseJob **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CloseJob **)soap_malloc(soap, sizeof(_ns1__CloseJob *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CloseJob *)soap_instantiate__ns1__CloseJob(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CloseJob ** p = (_ns1__CloseJob **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CloseJob, sizeof(_ns1__CloseJob), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ExecuteExResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ExecuteExResponse);
	if (soap_out_PointerTo_ns1__ExecuteExResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteExResponse(struct soap *soap, const char *tag, int id, _ns1__ExecuteExResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ExecuteExResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ExecuteExResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteExResponse(struct soap *soap, _ns1__ExecuteExResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ExecuteExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__ExecuteExResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteExResponse(struct soap *soap, const char *tag, _ns1__ExecuteExResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ExecuteExResponse **)soap_malloc(soap, sizeof(_ns1__ExecuteExResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ExecuteExResponse *)soap_instantiate__ns1__ExecuteExResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ExecuteExResponse ** p = (_ns1__ExecuteExResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ExecuteExResponse, sizeof(_ns1__ExecuteExResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ExecuteEx))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ExecuteEx);
	if (soap_out_PointerTo_ns1__ExecuteEx(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteEx(struct soap *soap, const char *tag, int id, _ns1__ExecuteEx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ExecuteEx);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ExecuteEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteEx(struct soap *soap, _ns1__ExecuteEx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ExecuteEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__ExecuteEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteEx(struct soap *soap, const char *tag, _ns1__ExecuteEx **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ExecuteEx **)soap_malloc(soap, sizeof(_ns1__ExecuteEx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ExecuteEx *)soap_instantiate__ns1__ExecuteEx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ExecuteEx ** p = (_ns1__ExecuteEx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ExecuteEx, sizeof(_ns1__ExecuteEx), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ExecuteResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ExecuteResponse);
	if (soap_out_PointerTo_ns1__ExecuteResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteResponse(struct soap *soap, const char *tag, int id, _ns1__ExecuteResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ExecuteResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ExecuteResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ExecuteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__ExecuteResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteResponse(struct soap *soap, const char *tag, _ns1__ExecuteResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ExecuteResponse **)soap_malloc(soap, sizeof(_ns1__ExecuteResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ExecuteResponse *)soap_instantiate__ns1__ExecuteResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ExecuteResponse ** p = (_ns1__ExecuteResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ExecuteResponse, sizeof(_ns1__ExecuteResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Execute(struct soap *soap, _ns1__Execute *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Execute))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Execute(struct soap *soap, _ns1__Execute *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Execute);
	if (soap_out_PointerTo_ns1__Execute(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Execute(struct soap *soap, const char *tag, int id, _ns1__Execute *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Execute);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_get_PointerTo_ns1__Execute(struct soap *soap, _ns1__Execute **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Execute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_in_PointerTo_ns1__Execute(struct soap *soap, const char *tag, _ns1__Execute **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Execute **)soap_malloc(soap, sizeof(_ns1__Execute *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Execute *)soap_instantiate__ns1__Execute(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Execute ** p = (_ns1__Execute **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Execute, sizeof(_ns1__Execute), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RenewLeaseResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RenewLeaseResponse);
	if (soap_out_PointerTo_ns1__RenewLeaseResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RenewLeaseResponse(struct soap *soap, const char *tag, int id, _ns1__RenewLeaseResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RenewLeaseResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RenewLeaseResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RenewLeaseResponse(struct soap *soap, _ns1__RenewLeaseResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RenewLeaseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RenewLeaseResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RenewLeaseResponse(struct soap *soap, const char *tag, _ns1__RenewLeaseResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RenewLeaseResponse **)soap_malloc(soap, sizeof(_ns1__RenewLeaseResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RenewLeaseResponse *)soap_instantiate__ns1__RenewLeaseResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RenewLeaseResponse ** p = (_ns1__RenewLeaseResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RenewLeaseResponse, sizeof(_ns1__RenewLeaseResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RenewLease(struct soap *soap, _ns1__RenewLease *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RenewLease))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RenewLease(struct soap *soap, _ns1__RenewLease *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RenewLease);
	if (soap_out_PointerTo_ns1__RenewLease(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RenewLease(struct soap *soap, const char *tag, int id, _ns1__RenewLease *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RenewLease);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RenewLease ** SOAP_FMAC4 soap_get_PointerTo_ns1__RenewLease(struct soap *soap, _ns1__RenewLease **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RenewLease(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RenewLease ** SOAP_FMAC4 soap_in_PointerTo_ns1__RenewLease(struct soap *soap, const char *tag, _ns1__RenewLease **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RenewLease **)soap_malloc(soap, sizeof(_ns1__RenewLease *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RenewLease *)soap_instantiate__ns1__RenewLease(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RenewLease ** p = (_ns1__RenewLease **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RenewLease, sizeof(_ns1__RenewLease), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenJobExResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenJobExResponse);
	if (soap_out_PointerTo_ns1__OpenJobExResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJobExResponse(struct soap *soap, const char *tag, int id, _ns1__OpenJobExResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenJobExResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenJobExResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJobExResponse(struct soap *soap, _ns1__OpenJobExResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenJobExResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__OpenJobExResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJobExResponse(struct soap *soap, const char *tag, _ns1__OpenJobExResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenJobExResponse **)soap_malloc(soap, sizeof(_ns1__OpenJobExResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenJobExResponse *)soap_instantiate__ns1__OpenJobExResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenJobExResponse ** p = (_ns1__OpenJobExResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenJobExResponse, sizeof(_ns1__OpenJobExResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenJobEx))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenJobEx);
	if (soap_out_PointerTo_ns1__OpenJobEx(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJobEx(struct soap *soap, const char *tag, int id, _ns1__OpenJobEx *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenJobEx);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenJobEx ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJobEx(struct soap *soap, _ns1__OpenJobEx **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenJobEx(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__OpenJobEx ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJobEx(struct soap *soap, const char *tag, _ns1__OpenJobEx **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenJobEx **)soap_malloc(soap, sizeof(_ns1__OpenJobEx *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenJobEx *)soap_instantiate__ns1__OpenJobEx(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenJobEx ** p = (_ns1__OpenJobEx **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenJobEx, sizeof(_ns1__OpenJobEx), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenJobResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenJobResponse);
	if (soap_out_PointerTo_ns1__OpenJobResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJobResponse(struct soap *soap, const char *tag, int id, _ns1__OpenJobResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenJobResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenJobResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJobResponse(struct soap *soap, _ns1__OpenJobResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenJobResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__OpenJobResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJobResponse(struct soap *soap, const char *tag, _ns1__OpenJobResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenJobResponse **)soap_malloc(soap, sizeof(_ns1__OpenJobResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenJobResponse *)soap_instantiate__ns1__OpenJobResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenJobResponse ** p = (_ns1__OpenJobResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenJobResponse, sizeof(_ns1__OpenJobResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__OpenJob(struct soap *soap, _ns1__OpenJob *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__OpenJob))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__OpenJob(struct soap *soap, _ns1__OpenJob *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__OpenJob);
	if (soap_out_PointerTo_ns1__OpenJob(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__OpenJob(struct soap *soap, const char *tag, int id, _ns1__OpenJob *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__OpenJob);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__OpenJob ** SOAP_FMAC4 soap_get_PointerTo_ns1__OpenJob(struct soap *soap, _ns1__OpenJob **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__OpenJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__OpenJob ** SOAP_FMAC4 soap_in_PointerTo_ns1__OpenJob(struct soap *soap, const char *tag, _ns1__OpenJob **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__OpenJob **)soap_malloc(soap, sizeof(_ns1__OpenJob *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__OpenJob *)soap_instantiate__ns1__OpenJob(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__OpenJob ** p = (_ns1__OpenJob **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__OpenJob, sizeof(_ns1__OpenJob), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStatusResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStatusResponse);
	if (soap_out_PointerTo_ns1__GetStatusResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStatusResponse(struct soap *soap, const char *tag, int id, _ns1__GetStatusResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStatusResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStatusResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStatusResponse(struct soap *soap, _ns1__GetStatusResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetStatusResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStatusResponse(struct soap *soap, const char *tag, _ns1__GetStatusResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStatusResponse **)soap_malloc(soap, sizeof(_ns1__GetStatusResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStatusResponse *)soap_instantiate__ns1__GetStatusResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStatusResponse ** p = (_ns1__GetStatusResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStatusResponse, sizeof(_ns1__GetStatusResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetStatus(struct soap *soap, _ns1__GetStatus *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetStatus))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetStatus(struct soap *soap, _ns1__GetStatus *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetStatus);
	if (soap_out_PointerTo_ns1__GetStatus(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetStatus(struct soap *soap, const char *tag, int id, _ns1__GetStatus *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetStatus);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetStatus ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetStatus(struct soap *soap, _ns1__GetStatus **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetStatus ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetStatus(struct soap *soap, const char *tag, _ns1__GetStatus **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetStatus **)soap_malloc(soap, sizeof(_ns1__GetStatus *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetStatus *)soap_instantiate__ns1__GetStatus(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetStatus ** p = (_ns1__GetStatus **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetStatus, sizeof(_ns1__GetStatus), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVersionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetVersionResponse);
	if (soap_out_PointerTo_ns1__GetVersionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersionResponse(struct soap *soap, const char *tag, int id, _ns1__GetVersionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVersionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetVersionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersionResponse(struct soap *soap, _ns1__GetVersionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetVersionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersionResponse(struct soap *soap, const char *tag, _ns1__GetVersionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVersionResponse **)soap_malloc(soap, sizeof(_ns1__GetVersionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVersionResponse *)soap_instantiate__ns1__GetVersionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetVersionResponse ** p = (_ns1__GetVersionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVersionResponse, sizeof(_ns1__GetVersionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetVersion(struct soap *soap, _ns1__GetVersion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetVersion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetVersion(struct soap *soap, _ns1__GetVersion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetVersion);
	if (soap_out_PointerTo_ns1__GetVersion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetVersion(struct soap *soap, const char *tag, int id, _ns1__GetVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetVersion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetVersion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetVersion(struct soap *soap, _ns1__GetVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetVersion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetVersion(struct soap *soap, const char *tag, _ns1__GetVersion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetVersion **)soap_malloc(soap, sizeof(_ns1__GetVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetVersion *)soap_instantiate__ns1__GetVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetVersion ** p = (_ns1__GetVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetVersion, sizeof(_ns1__GetVersion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__HelloWorldResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__HelloWorldResponse);
	if (soap_out_PointerTo_ns1__HelloWorldResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__HelloWorldResponse(struct soap *soap, const char *tag, int id, _ns1__HelloWorldResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__HelloWorldResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__HelloWorldResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__HelloWorldResponse(struct soap *soap, _ns1__HelloWorldResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__HelloWorldResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__HelloWorldResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__HelloWorldResponse(struct soap *soap, const char *tag, _ns1__HelloWorldResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__HelloWorldResponse **)soap_malloc(soap, sizeof(_ns1__HelloWorldResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__HelloWorldResponse *)soap_instantiate__ns1__HelloWorldResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__HelloWorldResponse ** p = (_ns1__HelloWorldResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__HelloWorldResponse, sizeof(_ns1__HelloWorldResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__HelloWorld))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__HelloWorld);
	if (soap_out_PointerTo_ns1__HelloWorld(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__HelloWorld(struct soap *soap, const char *tag, int id, _ns1__HelloWorld *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__HelloWorld);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__HelloWorld ** SOAP_FMAC4 soap_get_PointerTo_ns1__HelloWorld(struct soap *soap, _ns1__HelloWorld **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__HelloWorld(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__HelloWorld ** SOAP_FMAC4 soap_in_PointerTo_ns1__HelloWorld(struct soap *soap, const char *tag, _ns1__HelloWorld **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__HelloWorld **)soap_malloc(soap, sizeof(_ns1__HelloWorld *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__HelloWorld *)soap_instantiate__ns1__HelloWorld(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__HelloWorld ** p = (_ns1__HelloWorld **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__HelloWorld, sizeof(_ns1__HelloWorld), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfJob))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfJob);
	if (soap_out_PointerTons1__ArrayOfJob(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfJob(struct soap *soap, const char *tag, int id, ns1__ArrayOfJob *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfJob);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfJob ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfJob(struct soap *soap, ns1__ArrayOfJob **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfJob(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfJob ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfJob(struct soap *soap, const char *tag, ns1__ArrayOfJob **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfJob **)soap_malloc(soap, sizeof(ns1__ArrayOfJob *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfJob *)soap_instantiate_ns1__ArrayOfJob(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfJob ** p = (ns1__ArrayOfJob **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfJob, sizeof(ns1__ArrayOfJob), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ScriptExecution))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ScriptExecution(struct soap *soap, ns1__ScriptExecution *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ScriptExecution);
	if (soap_out_PointerTons1__ScriptExecution(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ScriptExecution(struct soap *soap, const char *tag, int id, ns1__ScriptExecution *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ScriptExecution);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ScriptExecution ** SOAP_FMAC4 soap_get_PointerTons1__ScriptExecution(struct soap *soap, ns1__ScriptExecution **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ScriptExecution(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ScriptExecution ** SOAP_FMAC4 soap_in_PointerTons1__ScriptExecution(struct soap *soap, const char *tag, ns1__ScriptExecution **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ScriptExecution **)soap_malloc(soap, sizeof(ns1__ScriptExecution *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ScriptExecution *)soap_instantiate_ns1__ScriptExecution(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ScriptExecution ** p = (ns1__ScriptExecution **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ScriptExecution, sizeof(ns1__ScriptExecution), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Status(struct soap *soap, ns1__Status *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Status))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Status(struct soap *soap, ns1__Status *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Status);
	if (soap_out_PointerTons1__Status(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Status(struct soap *soap, const char *tag, int id, ns1__Status *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Status);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_get_PointerTons1__Status(struct soap *soap, ns1__Status **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__Status ** SOAP_FMAC4 soap_in_PointerTons1__Status(struct soap *soap, const char *tag, ns1__Status **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Status **)soap_malloc(soap, sizeof(ns1__Status *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Status *)soap_instantiate_ns1__Status(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Status ** p = (ns1__Status **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Status, sizeof(ns1__Status), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Job(struct soap *soap, ns1__Job *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Job))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Job(struct soap *soap, ns1__Job *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Job);
	if (soap_out_PointerTons1__Job(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Job(struct soap *soap, const char *tag, int id, ns1__Job *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Job);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Job ** SOAP_FMAC4 soap_get_PointerTons1__Job(struct soap *soap, ns1__Job **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Job(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__Job ** SOAP_FMAC4 soap_in_PointerTons1__Job(struct soap *soap, const char *tag, ns1__Job **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Job **)soap_malloc(soap, sizeof(ns1__Job *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Job *)soap_instantiate_ns1__Job(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Job ** p = (ns1__Job **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Job, sizeof(ns1__Job), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LuaValue(struct soap *soap, ns1__LuaValue *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__LuaValue))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LuaValue(struct soap *soap, ns1__LuaValue *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__LuaValue);
	if (soap_out_PointerTons1__LuaValue(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LuaValue(struct soap *soap, const char *tag, int id, ns1__LuaValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__LuaValue);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__LuaValue ** SOAP_FMAC4 soap_get_PointerTons1__LuaValue(struct soap *soap, ns1__LuaValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__LuaValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__LuaValue ** SOAP_FMAC4 soap_in_PointerTons1__LuaValue(struct soap *soap, const char *tag, ns1__LuaValue **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__LuaValue **)soap_malloc(soap, sizeof(ns1__LuaValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__LuaValue *)soap_instantiate_ns1__LuaValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__LuaValue ** p = (ns1__LuaValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__LuaValue, sizeof(ns1__LuaValue), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfLuaValue))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfLuaValue);
	if (soap_out_PointerTons1__ArrayOfLuaValue(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfLuaValue(struct soap *soap, const char *tag, int id, ns1__ArrayOfLuaValue *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfLuaValue);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfLuaValue ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfLuaValue(struct soap *soap, ns1__ArrayOfLuaValue **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfLuaValue(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfLuaValue ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfLuaValue(struct soap *soap, const char *tag, ns1__ArrayOfLuaValue **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfLuaValue **)soap_malloc(soap, sizeof(ns1__ArrayOfLuaValue *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfLuaValue *)soap_instantiate_ns1__ArrayOfLuaValue(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfLuaValue ** p = (ns1__ArrayOfLuaValue **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfLuaValue, sizeof(ns1__ArrayOfLuaValue), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, std::vector<ns1__Job * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, const std::vector<ns1__Job * >*a)
{
	for (std::vector<ns1__Job * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__Job(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, const char *tag, int id, const std::vector<ns1__Job * >*a, const char *type)
{
	for (std::vector<ns1__Job * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__Job(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__Job * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, const char *tag, std::vector<ns1__Job * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__Job(soap, -1)))
		return NULL;
	ns1__Job *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__Job, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job, sizeof(ns1__Job), 1))
				break;
			if (!soap_in_PointerTons1__Job(soap, tag, NULL, "ns1:Job"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__Job(soap, tag, &n, "ns1:Job"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__Job * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__Job(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, std::vector<ns1__Job * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__Job * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__Job(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__Job, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__Job * >;
		if (size)
			*size = sizeof(std::vector<ns1__Job * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__Job * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__Job * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__Job * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__Job(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__Job * > %p -> %p\n", q, p));
	*(std::vector<ns1__Job * >*)p = *(std::vector<ns1__Job * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, std::vector<ns1__LuaValue * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, const std::vector<ns1__LuaValue * >*a)
{
	for (std::vector<ns1__LuaValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__LuaValue(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, const char *tag, int id, const std::vector<ns1__LuaValue * >*a, const char *type)
{
	for (std::vector<ns1__LuaValue * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__LuaValue(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__LuaValue * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, const char *tag, std::vector<ns1__LuaValue * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__LuaValue(soap, -1)))
		return NULL;
	ns1__LuaValue *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__LuaValue, SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue, sizeof(ns1__LuaValue), 1))
				break;
			if (!soap_in_PointerTons1__LuaValue(soap, tag, NULL, "ns1:LuaValue"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__LuaValue(soap, tag, &n, "ns1:LuaValue"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<ns1__LuaValue * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, std::vector<ns1__LuaValue * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<ns1__LuaValue * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__LuaValue(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__LuaValue, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<ns1__LuaValue * >;
		if (size)
			*size = sizeof(std::vector<ns1__LuaValue * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<ns1__LuaValue * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__LuaValue * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__LuaValue * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__LuaValue(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__LuaValue * > %p -> %p\n", q, p));
	*(std::vector<ns1__LuaValue * >*)p = *(std::vector<ns1__LuaValue * >*)q;
}

/* End of soapC.cpp */
